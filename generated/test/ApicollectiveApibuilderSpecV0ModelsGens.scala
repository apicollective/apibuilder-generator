/**
  * Generated by API Builder - https://www.apibuilder.io
  * Service version: 0.14.60
  */
package io.apibuilder.spec.v0.models

package object gens {

  private[v0] implicit val arbitraryString: _root_.org.scalacheck.Arbitrary[String] = _root_.org.scalacheck.Arbitrary(
    _root_.org.scalacheck.Gen.identifier)

  private[v0] implicit lazy val arbitraryIoApibuilderSpecV0ModelsJodaDateTime
    : _root_.org.scalacheck.Arbitrary[_root_.org.joda.time.DateTime] =
    _root_.org.scalacheck.Arbitrary(genJodaDateTime)
  private[v0] lazy val genJodaDateTime
    : _root_.org.scalacheck.Gen[_root_.org.joda.time.DateTime] =
    _root_.org.scalacheck.Gen.lzy {
      _root_.org.scalacheck.Gen
        .posNum[Long]
        .map(instant => new _root_.org.joda.time.DateTime(instant))
    }

  private[v0] implicit lazy val arbitraryIoApibuilderSpecV0ModelsJodaLocalDate
    : _root_.org.scalacheck.Arbitrary[_root_.org.joda.time.LocalDate] =
    _root_.org.scalacheck.Arbitrary(genJodaLocalDate)
  private[v0] lazy val genJodaLocalDate
    : _root_.org.scalacheck.Gen[_root_.org.joda.time.LocalDate] =
    _root_.org.scalacheck.Gen.lzy {
      _root_.org.scalacheck.Gen
        .posNum[Long]
        .map(instant => new _root_.org.joda.time.LocalDate(instant))
    }

  private[v0] implicit lazy val arbitraryIoApibuilderSpecV0ModelsJsObject
    : _root_.org.scalacheck.Arbitrary[_root_.play.api.libs.json.JsObject] =
    _root_.org.scalacheck.Arbitrary(genJsObject)
  private[v0] lazy val genJsObject
    : _root_.org.scalacheck.Gen[_root_.play.api.libs.json.JsObject] =
    _root_.org.scalacheck.Gen.lzy {
      for {
        underlying <- _root_.org.scalacheck.Arbitrary
          .arbitrary[Map[String, _root_.play.api.libs.json.JsValue]]
      } yield _root_.play.api.libs.json.JsObject(underlying)
    }

  private[v0] implicit lazy val arbitraryIoApibuilderSpecV0ModelsJsValue
    : _root_.org.scalacheck.Arbitrary[_root_.play.api.libs.json.JsValue] =
    _root_.org.scalacheck.Arbitrary(genJsValue)
  private[v0] lazy val genJsValue
    : _root_.org.scalacheck.Gen[_root_.play.api.libs.json.JsValue] =
    _root_.org.scalacheck.Gen.lzy {
      _root_.org.scalacheck.Gen.oneOf(
        _root_.org.scalacheck.Arbitrary
          .arbitrary[IndexedSeq[_root_.play.api.libs.json.JsValue]]
          .map(_root_.play.api.libs.json.JsArray),
        _root_.org.scalacheck.Arbitrary
          .arbitrary[Boolean]
          .map(play.api.libs.json.JsBoolean),
        _root_.org.scalacheck.Gen.const(play.api.libs.json.JsNull),
        _root_.org.scalacheck.Arbitrary
          .arbitrary[BigDecimal]
          .map(play.api.libs.json.JsNumber),
        // _root_.org.scalacheck.Arbitrary.arbitrary[_root_.play.api.libs.json.JsObject],
        _root_.org.scalacheck.Arbitrary
          .arbitrary[String]
          .map(_root_.play.api.libs.json.JsString)
      )
    }

  implicit lazy val arbitraryIoApibuilderSpecV0ModelsMethod
    : _root_.org.scalacheck.Arbitrary[io.apibuilder.spec.v0.models.Method] =
    _root_.org.scalacheck.Arbitrary(genMethod)
  implicit lazy val arbitraryIoApibuilderSpecV0ModelsParameterLocation
    : _root_.org.scalacheck.Arbitrary[
      io.apibuilder.spec.v0.models.ParameterLocation] =
    _root_.org.scalacheck.Arbitrary(genParameterLocation)
  implicit lazy val arbitraryIoApibuilderSpecV0ModelsResponseCodeOption
    : _root_.org.scalacheck.Arbitrary[
      io.apibuilder.spec.v0.models.ResponseCodeOption] =
    _root_.org.scalacheck.Arbitrary(genResponseCodeOption)
  implicit lazy val arbitraryIoApibuilderSpecV0ModelsAnnotation
    : _root_.org.scalacheck.Arbitrary[io.apibuilder.spec.v0.models.Annotation] =
    _root_.org.scalacheck.Arbitrary(genAnnotation)
  implicit lazy val arbitraryIoApibuilderSpecV0ModelsApidoc
    : _root_.org.scalacheck.Arbitrary[io.apibuilder.spec.v0.models.Apidoc] =
    _root_.org.scalacheck.Arbitrary(genApidoc)
  implicit lazy val arbitraryIoApibuilderSpecV0ModelsApplication
    : _root_.org.scalacheck.Arbitrary[
      io.apibuilder.spec.v0.models.Application] =
    _root_.org.scalacheck.Arbitrary(genApplication)
  implicit lazy val arbitraryIoApibuilderSpecV0ModelsAttribute
    : _root_.org.scalacheck.Arbitrary[io.apibuilder.spec.v0.models.Attribute] =
    _root_.org.scalacheck.Arbitrary(genAttribute)
  implicit lazy val arbitraryIoApibuilderSpecV0ModelsBody
    : _root_.org.scalacheck.Arbitrary[io.apibuilder.spec.v0.models.Body] =
    _root_.org.scalacheck.Arbitrary(genBody)
  implicit lazy val arbitraryIoApibuilderSpecV0ModelsContact
    : _root_.org.scalacheck.Arbitrary[io.apibuilder.spec.v0.models.Contact] =
    _root_.org.scalacheck.Arbitrary(genContact)
  implicit lazy val arbitraryIoApibuilderSpecV0ModelsDeprecation
    : _root_.org.scalacheck.Arbitrary[
      io.apibuilder.spec.v0.models.Deprecation] =
    _root_.org.scalacheck.Arbitrary(genDeprecation)
  implicit lazy val arbitraryIoApibuilderSpecV0ModelsEnum
    : _root_.org.scalacheck.Arbitrary[io.apibuilder.spec.v0.models.Enum] =
    _root_.org.scalacheck.Arbitrary(genEnum)
  implicit lazy val arbitraryIoApibuilderSpecV0ModelsEnumValue
    : _root_.org.scalacheck.Arbitrary[io.apibuilder.spec.v0.models.EnumValue] =
    _root_.org.scalacheck.Arbitrary(genEnumValue)
  implicit lazy val arbitraryIoApibuilderSpecV0ModelsField
    : _root_.org.scalacheck.Arbitrary[io.apibuilder.spec.v0.models.Field] =
    _root_.org.scalacheck.Arbitrary(genField)
  implicit lazy val arbitraryIoApibuilderSpecV0ModelsHeader
    : _root_.org.scalacheck.Arbitrary[io.apibuilder.spec.v0.models.Header] =
    _root_.org.scalacheck.Arbitrary(genHeader)
  implicit lazy val arbitraryIoApibuilderSpecV0ModelsImport
    : _root_.org.scalacheck.Arbitrary[io.apibuilder.spec.v0.models.Import] =
    _root_.org.scalacheck.Arbitrary(genImport)
  implicit lazy val arbitraryIoApibuilderSpecV0ModelsInfo
    : _root_.org.scalacheck.Arbitrary[io.apibuilder.spec.v0.models.Info] =
    _root_.org.scalacheck.Arbitrary(genInfo)
  implicit lazy val arbitraryIoApibuilderSpecV0ModelsLicense
    : _root_.org.scalacheck.Arbitrary[io.apibuilder.spec.v0.models.License] =
    _root_.org.scalacheck.Arbitrary(genLicense)
  implicit lazy val arbitraryIoApibuilderSpecV0ModelsInterface
  : _root_.org.scalacheck.Arbitrary[io.apibuilder.spec.v0.models.Interface] =
    _root_.org.scalacheck.Arbitrary(genInterface)
  implicit lazy val arbitraryIoApibuilderSpecV0ModelsModel
    : _root_.org.scalacheck.Arbitrary[io.apibuilder.spec.v0.models.Model] =
    _root_.org.scalacheck.Arbitrary(genModel)
  implicit lazy val arbitraryIoApibuilderSpecV0ModelsOperation
    : _root_.org.scalacheck.Arbitrary[io.apibuilder.spec.v0.models.Operation] =
    _root_.org.scalacheck.Arbitrary(genOperation)
  implicit lazy val arbitraryIoApibuilderSpecV0ModelsOrganization
    : _root_.org.scalacheck.Arbitrary[
      io.apibuilder.spec.v0.models.Organization] =
    _root_.org.scalacheck.Arbitrary(genOrganization)
  implicit lazy val arbitraryIoApibuilderSpecV0ModelsParameter
    : _root_.org.scalacheck.Arbitrary[io.apibuilder.spec.v0.models.Parameter] =
    _root_.org.scalacheck.Arbitrary(genParameter)
  implicit lazy val arbitraryIoApibuilderSpecV0ModelsResource
    : _root_.org.scalacheck.Arbitrary[io.apibuilder.spec.v0.models.Resource] =
    _root_.org.scalacheck.Arbitrary(genResource)
  implicit lazy val arbitraryIoApibuilderSpecV0ModelsResponse
    : _root_.org.scalacheck.Arbitrary[io.apibuilder.spec.v0.models.Response] =
    _root_.org.scalacheck.Arbitrary(genResponse)
  implicit lazy val arbitraryIoApibuilderSpecV0ModelsService
    : _root_.org.scalacheck.Arbitrary[io.apibuilder.spec.v0.models.Service] =
    _root_.org.scalacheck.Arbitrary(genService)
  implicit lazy val arbitraryIoApibuilderSpecV0ModelsUnion
    : _root_.org.scalacheck.Arbitrary[io.apibuilder.spec.v0.models.Union] =
    _root_.org.scalacheck.Arbitrary(genUnion)
  implicit lazy val arbitraryIoApibuilderSpecV0ModelsUnionType
    : _root_.org.scalacheck.Arbitrary[io.apibuilder.spec.v0.models.UnionType] =
    _root_.org.scalacheck.Arbitrary(genUnionType)
  implicit lazy val arbitraryIoApibuilderSpecV0ModelsResponseCode
    : _root_.org.scalacheck.Arbitrary[
      io.apibuilder.spec.v0.models.ResponseCode] =
    _root_.org.scalacheck.Arbitrary(genResponseCode)
  implicit lazy val arbitraryIoApibuilderSpecV0ModelsResponseCodeInt
    : _root_.org.scalacheck.Arbitrary[
      io.apibuilder.spec.v0.models.ResponseCodeInt] =
    _root_.org.scalacheck.Arbitrary(genResponseCodeInt)

  lazy val genMethod
    : _root_.org.scalacheck.Gen[io.apibuilder.spec.v0.models.Method] =
    _root_.org.scalacheck.Gen.lzy {
      _root_.org.scalacheck.Gen.oneOf(
        _root_.org.scalacheck.Gen
          .const(io.apibuilder.spec.v0.models.Method.Get),
        _root_.org.scalacheck.Gen
          .const(io.apibuilder.spec.v0.models.Method.Post),
        _root_.org.scalacheck.Gen
          .const(io.apibuilder.spec.v0.models.Method.Put),
        _root_.org.scalacheck.Gen
          .const(io.apibuilder.spec.v0.models.Method.Patch),
        _root_.org.scalacheck.Gen
          .const(io.apibuilder.spec.v0.models.Method.Delete),
        _root_.org.scalacheck.Gen
          .const(io.apibuilder.spec.v0.models.Method.Head),
        _root_.org.scalacheck.Gen
          .const(io.apibuilder.spec.v0.models.Method.Connect),
        _root_.org.scalacheck.Gen
          .const(io.apibuilder.spec.v0.models.Method.Options),
        _root_.org.scalacheck.Gen
          .const(io.apibuilder.spec.v0.models.Method.Trace)
      )
    }

  lazy val genParameterLocation: _root_.org.scalacheck.Gen[
    io.apibuilder.spec.v0.models.ParameterLocation] =
    _root_.org.scalacheck.Gen.lzy {
      _root_.org.scalacheck.Gen.oneOf(
        _root_.org.scalacheck.Gen
          .const(io.apibuilder.spec.v0.models.ParameterLocation.Path),
        _root_.org.scalacheck.Gen
          .const(io.apibuilder.spec.v0.models.ParameterLocation.Query),
        _root_.org.scalacheck.Gen
          .const(io.apibuilder.spec.v0.models.ParameterLocation.Form),
        _root_.org.scalacheck.Gen
          .const(io.apibuilder.spec.v0.models.ParameterLocation.Header)
      )
    }

  lazy val genResponseCodeOption: _root_.org.scalacheck.Gen[
    io.apibuilder.spec.v0.models.ResponseCodeOption] =
    _root_.org.scalacheck.Gen
      .const(io.apibuilder.spec.v0.models.ResponseCodeOption.Default)

  lazy val genAnnotation
    : _root_.org.scalacheck.Gen[io.apibuilder.spec.v0.models.Annotation] =
    _root_.org.scalacheck.Gen.lzy {
      for {
        name <- _root_.org.scalacheck.Arbitrary.arbitrary[String]
        description <- _root_.org.scalacheck.Arbitrary
          .arbitrary[_root_.scala.Option[String]]
        deprecation <- _root_.org.scalacheck.Arbitrary
          .arbitrary[_root_.scala.Option[
            io.apibuilder.spec.v0.models.Deprecation]]
      } yield
        io.apibuilder.spec.v0.models.Annotation(name, description, deprecation)
    }

  lazy val genApidoc
    : _root_.org.scalacheck.Gen[io.apibuilder.spec.v0.models.Apidoc] =
    _root_.org.scalacheck.Gen.lzy {
      for {
        version <- _root_.org.scalacheck.Arbitrary.arbitrary[String]
      } yield io.apibuilder.spec.v0.models.Apidoc(version)
    }

  lazy val genApplication
    : _root_.org.scalacheck.Gen[io.apibuilder.spec.v0.models.Application] =
    _root_.org.scalacheck.Gen.lzy {
      for {
        key <- _root_.org.scalacheck.Arbitrary.arbitrary[String]
      } yield io.apibuilder.spec.v0.models.Application(key)
    }

  lazy val genAttribute
    : _root_.org.scalacheck.Gen[io.apibuilder.spec.v0.models.Attribute] =
    _root_.org.scalacheck.Gen.lzy {
      for {
        name <- _root_.org.scalacheck.Arbitrary.arbitrary[String]
        value <- _root_.org.scalacheck.Arbitrary
          .arbitrary[_root_.play.api.libs.json.JsObject]
        description <- _root_.org.scalacheck.Arbitrary
          .arbitrary[_root_.scala.Option[String]]
        deprecation <- _root_.org.scalacheck.Arbitrary
          .arbitrary[_root_.scala.Option[
            io.apibuilder.spec.v0.models.Deprecation]]
      } yield
        io.apibuilder.spec.v0.models
          .Attribute(name, value, description, deprecation)
    }

  lazy val genBody
    : _root_.org.scalacheck.Gen[io.apibuilder.spec.v0.models.Body] =
    _root_.org.scalacheck.Gen.lzy {
      for {
        `type` <- _root_.org.scalacheck.Arbitrary.arbitrary[String]
        description <- _root_.org.scalacheck.Arbitrary
          .arbitrary[_root_.scala.Option[String]]
        deprecation <- _root_.org.scalacheck.Arbitrary
          .arbitrary[_root_.scala.Option[
            io.apibuilder.spec.v0.models.Deprecation]]
        attributes <- _root_.org.scalacheck.Arbitrary
          .arbitrary[Seq[io.apibuilder.spec.v0.models.Attribute]]
      } yield
        io.apibuilder.spec.v0.models
          .Body(`type`, description, deprecation, attributes)
    }

  lazy val genContact
    : _root_.org.scalacheck.Gen[io.apibuilder.spec.v0.models.Contact] =
    _root_.org.scalacheck.Gen.lzy {
      for {
        name <- _root_.org.scalacheck.Arbitrary
          .arbitrary[_root_.scala.Option[String]]
        url <- _root_.org.scalacheck.Arbitrary
          .arbitrary[_root_.scala.Option[String]]
        email <- _root_.org.scalacheck.Arbitrary
          .arbitrary[_root_.scala.Option[String]]
      } yield io.apibuilder.spec.v0.models.Contact(name, url, email)
    }

  lazy val genDeprecation
    : _root_.org.scalacheck.Gen[io.apibuilder.spec.v0.models.Deprecation] =
    _root_.org.scalacheck.Gen.lzy {
      for {
        description <- _root_.org.scalacheck.Arbitrary
          .arbitrary[_root_.scala.Option[String]]
      } yield io.apibuilder.spec.v0.models.Deprecation(description)
    }

  lazy val genEnum
    : _root_.org.scalacheck.Gen[io.apibuilder.spec.v0.models.Enum] =
    _root_.org.scalacheck.Gen.lzy {
      for {
        name <- _root_.org.scalacheck.Arbitrary.arbitrary[String]
        plural <- _root_.org.scalacheck.Arbitrary.arbitrary[String]
        description <- _root_.org.scalacheck.Arbitrary
          .arbitrary[_root_.scala.Option[String]]
        deprecation <- _root_.org.scalacheck.Arbitrary
          .arbitrary[_root_.scala.Option[
            io.apibuilder.spec.v0.models.Deprecation]]
        values <- _root_.org.scalacheck.Arbitrary
          .arbitrary[Seq[io.apibuilder.spec.v0.models.EnumValue]]
        attributes <- _root_.org.scalacheck.Arbitrary
          .arbitrary[Seq[io.apibuilder.spec.v0.models.Attribute]]
      } yield
        io.apibuilder.spec.v0.models.Enum(name,
                                          plural,
                                          description,
                                          deprecation,
                                          values,
                                          attributes)
    }

  lazy val genEnumValue
    : _root_.org.scalacheck.Gen[io.apibuilder.spec.v0.models.EnumValue] =
    _root_.org.scalacheck.Gen.lzy {
      for {
        name <- _root_.org.scalacheck.Arbitrary.arbitrary[String]
        description <- _root_.org.scalacheck.Arbitrary
          .arbitrary[_root_.scala.Option[String]]
        deprecation <- _root_.org.scalacheck.Arbitrary
          .arbitrary[_root_.scala.Option[
            io.apibuilder.spec.v0.models.Deprecation]]
        attributes <- _root_.org.scalacheck.Arbitrary
          .arbitrary[Seq[io.apibuilder.spec.v0.models.Attribute]]
        value <- _root_.org.scalacheck.Arbitrary
          .arbitrary[_root_.scala.Option[String]]
      } yield
        io.apibuilder.spec.v0.models
          .EnumValue(name, description, deprecation, attributes, value)
    }

  lazy val genField
    : _root_.org.scalacheck.Gen[io.apibuilder.spec.v0.models.Field] =
    _root_.org.scalacheck.Gen.lzy {
      for {
        name <- _root_.org.scalacheck.Arbitrary.arbitrary[String]
        `type` <- _root_.org.scalacheck.Arbitrary.arbitrary[String]
        description <- _root_.org.scalacheck.Arbitrary
          .arbitrary[_root_.scala.Option[String]]
        deprecation <- _root_.org.scalacheck.Arbitrary
          .arbitrary[_root_.scala.Option[
            io.apibuilder.spec.v0.models.Deprecation]]
        default <- _root_.org.scalacheck.Arbitrary
          .arbitrary[_root_.scala.Option[String]]
        required <- _root_.org.scalacheck.Arbitrary.arbitrary[Boolean]
        minimum <- _root_.org.scalacheck.Arbitrary
          .arbitrary[_root_.scala.Option[Long]]
        maximum <- _root_.org.scalacheck.Arbitrary
          .arbitrary[_root_.scala.Option[Long]]
        example <- _root_.org.scalacheck.Arbitrary
          .arbitrary[_root_.scala.Option[String]]
        attributes <- _root_.org.scalacheck.Arbitrary
          .arbitrary[Seq[io.apibuilder.spec.v0.models.Attribute]]
        annotations <- _root_.org.scalacheck.Arbitrary.arbitrary[Seq[String]]
      } yield
        io.apibuilder.spec.v0.models.Field(name,
                                           `type`,
                                           description,
                                           deprecation,
                                           default,
                                           required,
                                           minimum,
                                           maximum,
                                           example,
                                           attributes,
                                           annotations)
    }

  lazy val genHeader
    : _root_.org.scalacheck.Gen[io.apibuilder.spec.v0.models.Header] =
    _root_.org.scalacheck.Gen.lzy {
      for {
        name <- _root_.org.scalacheck.Arbitrary.arbitrary[String]
        `type` <- _root_.org.scalacheck.Arbitrary.arbitrary[String]
        description <- _root_.org.scalacheck.Arbitrary
          .arbitrary[_root_.scala.Option[String]]
        deprecation <- _root_.org.scalacheck.Arbitrary
          .arbitrary[_root_.scala.Option[
            io.apibuilder.spec.v0.models.Deprecation]]
        required <- _root_.org.scalacheck.Arbitrary.arbitrary[Boolean]
        default <- _root_.org.scalacheck.Arbitrary
          .arbitrary[_root_.scala.Option[String]]
        attributes <- _root_.org.scalacheck.Arbitrary
          .arbitrary[Seq[io.apibuilder.spec.v0.models.Attribute]]
      } yield
        io.apibuilder.spec.v0.models.Header(name,
                                            `type`,
                                            description,
                                            deprecation,
                                            required,
                                            default,
                                            attributes)
    }

  lazy val genImport
    : _root_.org.scalacheck.Gen[io.apibuilder.spec.v0.models.Import] =
    _root_.org.scalacheck.Gen.lzy {
      for {
        uri <- _root_.org.scalacheck.Arbitrary.arbitrary[String]
        namespace <- _root_.org.scalacheck.Arbitrary.arbitrary[String]
        organization <- _root_.org.scalacheck.Arbitrary
          .arbitrary[io.apibuilder.spec.v0.models.Organization]
        application <- _root_.org.scalacheck.Arbitrary
          .arbitrary[io.apibuilder.spec.v0.models.Application]
        version <- _root_.org.scalacheck.Arbitrary.arbitrary[String]
        interfaces <- _root_.org.scalacheck.Arbitrary.arbitrary[Seq[String]]
        enums <- _root_.org.scalacheck.Arbitrary.arbitrary[Seq[String]]
        unions <- _root_.org.scalacheck.Arbitrary.arbitrary[Seq[String]]
        models <- _root_.org.scalacheck.Arbitrary.arbitrary[Seq[String]]
        annotations <- _root_.org.scalacheck.Arbitrary
          .arbitrary[Seq[io.apibuilder.spec.v0.models.Annotation]]
      } yield
        io.apibuilder.spec.v0.models.Import(
          uri = uri,
          namespace = namespace,
          organization = organization,
          application = application,
          version = version,
          enums = enums,
          interfaces = interfaces,
          unions = unions,
          models = models,
          annotations = annotations)
    }

  lazy val genInfo
    : _root_.org.scalacheck.Gen[io.apibuilder.spec.v0.models.Info] =
    _root_.org.scalacheck.Gen.lzy {
      for {
        license <- _root_.org.scalacheck.Arbitrary
          .arbitrary[_root_.scala.Option[io.apibuilder.spec.v0.models.License]]
        contact <- _root_.org.scalacheck.Arbitrary
          .arbitrary[_root_.scala.Option[io.apibuilder.spec.v0.models.Contact]]
      } yield io.apibuilder.spec.v0.models.Info(license, contact)
    }

  lazy val genLicense
    : _root_.org.scalacheck.Gen[io.apibuilder.spec.v0.models.License] =
    _root_.org.scalacheck.Gen.lzy {
      for {
        name <- _root_.org.scalacheck.Arbitrary.arbitrary[String]
        url <- _root_.org.scalacheck.Arbitrary
          .arbitrary[_root_.scala.Option[String]]
      } yield io.apibuilder.spec.v0.models.License(name, url)
    }

  lazy val genInterface
  : _root_.org.scalacheck.Gen[io.apibuilder.spec.v0.models.Interface] =
    _root_.org.scalacheck.Gen.lzy {
      for {
        name <- _root_.org.scalacheck.Arbitrary.arbitrary[String]
        plural <- _root_.org.scalacheck.Arbitrary.arbitrary[String]
        description <- _root_.org.scalacheck.Arbitrary
          .arbitrary[_root_.scala.Option[String]]
        deprecation <- _root_.org.scalacheck.Arbitrary
          .arbitrary[_root_.scala.Option[
          io.apibuilder.spec.v0.models.Deprecation]]
        fields <- _root_.org.scalacheck.Arbitrary
          .arbitrary[Seq[io.apibuilder.spec.v0.models.Field]]
        attributes <- _root_.org.scalacheck.Arbitrary
          .arbitrary[Seq[io.apibuilder.spec.v0.models.Attribute]]
      } yield
        io.apibuilder.spec.v0.models.Interface(name,
          plural,
          description,
          deprecation,
          fields,
          attributes)
    }

  lazy val genModel
    : _root_.org.scalacheck.Gen[io.apibuilder.spec.v0.models.Model] =
    _root_.org.scalacheck.Gen.lzy {
      for {
        name <- _root_.org.scalacheck.Arbitrary.arbitrary[String]
        plural <- _root_.org.scalacheck.Arbitrary.arbitrary[String]
        interfaces <- _root_.org.scalacheck.Arbitrary
          .arbitrary[Seq[String]]
        description <- _root_.org.scalacheck.Arbitrary
          .arbitrary[_root_.scala.Option[String]]
        deprecation <- _root_.org.scalacheck.Arbitrary
          .arbitrary[_root_.scala.Option[
            io.apibuilder.spec.v0.models.Deprecation]]
        fields <- _root_.org.scalacheck.Arbitrary
          .arbitrary[Seq[io.apibuilder.spec.v0.models.Field]]
        attributes <- _root_.org.scalacheck.Arbitrary
          .arbitrary[Seq[io.apibuilder.spec.v0.models.Attribute]]
      } yield
        io.apibuilder.spec.v0.models.Model(name,
                                           plural,
                                           description,
                                           deprecation,
                                           fields,
                                           attributes,
                                           interfaces)
    }

  lazy val genOperation
    : _root_.org.scalacheck.Gen[io.apibuilder.spec.v0.models.Operation] =
    _root_.org.scalacheck.Gen.lzy {
      for {
        method <- _root_.org.scalacheck.Arbitrary
          .arbitrary[io.apibuilder.spec.v0.models.Method]
        path <- _root_.org.scalacheck.Arbitrary.arbitrary[String]
        description <- _root_.org.scalacheck.Arbitrary
          .arbitrary[_root_.scala.Option[String]]
        deprecation <- _root_.org.scalacheck.Arbitrary
          .arbitrary[_root_.scala.Option[
            io.apibuilder.spec.v0.models.Deprecation]]
        body <- _root_.org.scalacheck.Arbitrary
          .arbitrary[_root_.scala.Option[io.apibuilder.spec.v0.models.Body]]
        parameters <- _root_.org.scalacheck.Arbitrary
          .arbitrary[Seq[io.apibuilder.spec.v0.models.Parameter]]
        responses <- _root_.org.scalacheck.Arbitrary
          .arbitrary[Seq[io.apibuilder.spec.v0.models.Response]]
        attributes <- _root_.org.scalacheck.Arbitrary
          .arbitrary[Seq[io.apibuilder.spec.v0.models.Attribute]]
      } yield
        io.apibuilder.spec.v0.models.Operation(method,
                                               path,
                                               description,
                                               deprecation,
                                               body,
                                               parameters,
                                               responses,
                                               attributes)
    }

  lazy val genOrganization
    : _root_.org.scalacheck.Gen[io.apibuilder.spec.v0.models.Organization] =
    _root_.org.scalacheck.Gen.lzy {
      for {
        key <- _root_.org.scalacheck.Arbitrary.arbitrary[String]
      } yield io.apibuilder.spec.v0.models.Organization(key)
    }

  lazy val genParameter
    : _root_.org.scalacheck.Gen[io.apibuilder.spec.v0.models.Parameter] =
    _root_.org.scalacheck.Gen.lzy {
      for {
        name <- _root_.org.scalacheck.Arbitrary.arbitrary[String]
        `type` <- _root_.org.scalacheck.Arbitrary.arbitrary[String]
        location <- _root_.org.scalacheck.Arbitrary
          .arbitrary[io.apibuilder.spec.v0.models.ParameterLocation]
        description <- _root_.org.scalacheck.Arbitrary
          .arbitrary[_root_.scala.Option[String]]
        deprecation <- _root_.org.scalacheck.Arbitrary
          .arbitrary[_root_.scala.Option[
            io.apibuilder.spec.v0.models.Deprecation]]
        required <- _root_.org.scalacheck.Arbitrary.arbitrary[Boolean]
        default <- _root_.org.scalacheck.Arbitrary
          .arbitrary[_root_.scala.Option[String]]
        minimum <- _root_.org.scalacheck.Arbitrary
          .arbitrary[_root_.scala.Option[Long]]
        maximum <- _root_.org.scalacheck.Arbitrary
          .arbitrary[_root_.scala.Option[Long]]
        example <- _root_.org.scalacheck.Arbitrary
          .arbitrary[_root_.scala.Option[String]]
      } yield
        io.apibuilder.spec.v0.models.Parameter(name,
                                               `type`,
                                               location,
                                               description,
                                               deprecation,
                                               required,
                                               default,
                                               minimum,
                                               maximum,
                                               example)
    }

  lazy val genResource
    : _root_.org.scalacheck.Gen[io.apibuilder.spec.v0.models.Resource] =
    _root_.org.scalacheck.Gen.lzy {
      for {
        `type` <- _root_.org.scalacheck.Arbitrary.arbitrary[String]
        plural <- _root_.org.scalacheck.Arbitrary.arbitrary[String]
        path <- _root_.org.scalacheck.Arbitrary
          .arbitrary[_root_.scala.Option[String]]
        description <- _root_.org.scalacheck.Arbitrary
          .arbitrary[_root_.scala.Option[String]]
        deprecation <- _root_.org.scalacheck.Arbitrary
          .arbitrary[_root_.scala.Option[
            io.apibuilder.spec.v0.models.Deprecation]]
        operations <- _root_.org.scalacheck.Arbitrary
          .arbitrary[Seq[io.apibuilder.spec.v0.models.Operation]]
        attributes <- _root_.org.scalacheck.Arbitrary
          .arbitrary[Seq[io.apibuilder.spec.v0.models.Attribute]]
      } yield
        io.apibuilder.spec.v0.models.Resource(`type`,
                                              plural,
                                              path,
                                              description,
                                              deprecation,
                                              operations,
                                              attributes)
    }

  lazy val genResponse
    : _root_.org.scalacheck.Gen[io.apibuilder.spec.v0.models.Response] =
    _root_.org.scalacheck.Gen.lzy {
      for {
        code <- _root_.org.scalacheck.Arbitrary
          .arbitrary[io.apibuilder.spec.v0.models.ResponseCode]
        `type` <- _root_.org.scalacheck.Arbitrary.arbitrary[String]
        headers <- _root_.org.scalacheck.Arbitrary
          .arbitrary[_root_.scala.Option[Seq[
            io.apibuilder.spec.v0.models.Header]]]
        description <- _root_.org.scalacheck.Arbitrary
          .arbitrary[_root_.scala.Option[String]]
        deprecation <- _root_.org.scalacheck.Arbitrary
          .arbitrary[_root_.scala.Option[
            io.apibuilder.spec.v0.models.Deprecation]]
        attributes <- _root_.org.scalacheck.Arbitrary
          .arbitrary[_root_.scala.Option[Seq[
            io.apibuilder.spec.v0.models.Attribute]]]
      } yield
        io.apibuilder.spec.v0.models.Response(code,
                                              `type`,
                                              headers,
                                              description,
                                              deprecation,
                                              attributes)
    }

  lazy val genService
    : _root_.org.scalacheck.Gen[io.apibuilder.spec.v0.models.Service] =
    _root_.org.scalacheck.Gen.lzy {
      for {
        apidoc <- _root_.org.scalacheck.Arbitrary
          .arbitrary[io.apibuilder.spec.v0.models.Apidoc]
        name <- _root_.org.scalacheck.Arbitrary.arbitrary[String]
        organization <- _root_.org.scalacheck.Arbitrary
          .arbitrary[io.apibuilder.spec.v0.models.Organization]
        application <- _root_.org.scalacheck.Arbitrary
          .arbitrary[io.apibuilder.spec.v0.models.Application]
        namespace <- _root_.org.scalacheck.Arbitrary.arbitrary[String]
        version <- _root_.org.scalacheck.Arbitrary.arbitrary[String]
        baseUrl <- _root_.org.scalacheck.Arbitrary
          .arbitrary[_root_.scala.Option[String]]
        description <- _root_.org.scalacheck.Arbitrary
          .arbitrary[_root_.scala.Option[String]]
        info <- _root_.org.scalacheck.Arbitrary
          .arbitrary[io.apibuilder.spec.v0.models.Info]
        headers <- _root_.org.scalacheck.Arbitrary
          .arbitrary[Seq[io.apibuilder.spec.v0.models.Header]]
        imports <- _root_.org.scalacheck.Arbitrary
          .arbitrary[Seq[io.apibuilder.spec.v0.models.Import]]
        enums <- _root_.org.scalacheck.Arbitrary
          .arbitrary[Seq[io.apibuilder.spec.v0.models.Enum]]
        interfaces <- _root_.org.scalacheck.Arbitrary
          .arbitrary[Seq[io.apibuilder.spec.v0.models.Interface]]
        unions <- _root_.org.scalacheck.Arbitrary
          .arbitrary[Seq[io.apibuilder.spec.v0.models.Union]]
        models <- _root_.org.scalacheck.Arbitrary
          .arbitrary[Seq[io.apibuilder.spec.v0.models.Model]]
        resources <- _root_.org.scalacheck.Arbitrary
          .arbitrary[Seq[io.apibuilder.spec.v0.models.Resource]]
        attributes <- _root_.org.scalacheck.Arbitrary
          .arbitrary[Seq[io.apibuilder.spec.v0.models.Attribute]]
        annotations <- _root_.org.scalacheck.Arbitrary
          .arbitrary[Seq[io.apibuilder.spec.v0.models.Annotation]]
      } yield
        io.apibuilder.spec.v0.models.Service(
          apidoc = apidoc,
          name = name,
          organization = organization,
          application = application,
          namespace = namespace,
          version = version,
          baseUrl = baseUrl,
          description = description,
          info = info,
          headers = headers,
          imports = imports,
          enums = enums,
          interfaces = interfaces,
          unions = unions,
          models = models,
          resources = resources,
          attributes = attributes,
          annotations = annotations,
        )
    }

  lazy val genUnion
    : _root_.org.scalacheck.Gen[io.apibuilder.spec.v0.models.Union] =
    _root_.org.scalacheck.Gen.lzy {
      for {
        name <- _root_.org.scalacheck.Arbitrary.arbitrary[String]
        plural <- _root_.org.scalacheck.Arbitrary.arbitrary[String]
        discriminator <- _root_.org.scalacheck.Arbitrary
          .arbitrary[_root_.scala.Option[String]]
        description <- _root_.org.scalacheck.Arbitrary
          .arbitrary[_root_.scala.Option[String]]
        deprecation <- _root_.org.scalacheck.Arbitrary
          .arbitrary[_root_.scala.Option[
            io.apibuilder.spec.v0.models.Deprecation]]
        types <- _root_.org.scalacheck.Arbitrary
          .arbitrary[Seq[io.apibuilder.spec.v0.models.UnionType]]
        attributes <- _root_.org.scalacheck.Arbitrary
          .arbitrary[Seq[io.apibuilder.spec.v0.models.Attribute]]
        interfaces <- _root_.org.scalacheck.Arbitrary
          .arbitrary[_root_.scala.Seq[String]]
      } yield
        io.apibuilder.spec.v0.models.Union(
          name = name,
          plural = plural,
          interfaces = interfaces,
          discriminator = discriminator,
          description = description,
          deprecation = deprecation,
          types = types,
          attributes = attributes,
        )
    }

  lazy val genUnionType
    : _root_.org.scalacheck.Gen[io.apibuilder.spec.v0.models.UnionType] =
    _root_.org.scalacheck.Gen.lzy {
      for {
        `type` <- _root_.org.scalacheck.Arbitrary.arbitrary[String]
        description <- _root_.org.scalacheck.Arbitrary
          .arbitrary[_root_.scala.Option[String]]
        deprecation <- _root_.org.scalacheck.Arbitrary
          .arbitrary[_root_.scala.Option[
            io.apibuilder.spec.v0.models.Deprecation]]
        attributes <- _root_.org.scalacheck.Arbitrary
          .arbitrary[Seq[io.apibuilder.spec.v0.models.Attribute]]
        default <- _root_.org.scalacheck.Arbitrary
          .arbitrary[_root_.scala.Option[Boolean]]
        discriminatorValue <- _root_.org.scalacheck.Arbitrary
          .arbitrary[_root_.scala.Option[String]]
      } yield
        io.apibuilder.spec.v0.models.UnionType(`type`,
                                               description,
                                               deprecation,
                                               attributes,
                                               default,
                                               discriminatorValue)
    }

  lazy val genResponseCode
    : _root_.org.scalacheck.Gen[io.apibuilder.spec.v0.models.ResponseCode] =
    _root_.org.scalacheck.Gen.lzy {
      _root_.org.scalacheck.Gen.oneOf(
        _root_.org.scalacheck.Arbitrary.arbitrary[ResponseCodeInt],
        _root_.org.scalacheck.Arbitrary
          .arbitrary[io.apibuilder.spec.v0.models.ResponseCodeOption])
    }

  lazy val genResponseCodeInt
    : _root_.org.scalacheck.Gen[io.apibuilder.spec.v0.models.ResponseCodeInt] =
    _root_.org.scalacheck.Gen.lzy {
      for {
        value <- _root_.org.scalacheck.Arbitrary.arbitrary[Int]
      } yield io.apibuilder.spec.v0.models.ResponseCodeInt(value)
    }

}
