/**
  * Generated by API Builder - https://www.apibuilder.io
  * Service version: 0.16.53
  * User agent: apibuilder app.apibuilder.io/apicollective/apibuilder-generator/latest/play_2_9_scala_3_controllers
  */
package io.apibuilder.generator.v0.controllers

import io.apibuilder.generator.v0.models.json._
import io.apibuilder.common.v0.models.json._
import io.apibuilder.spec.v0.models.json._

trait GeneratorsController extends play.api.mvc.BaseController {

  sealed trait Get extends Product with Serializable
  object Get {
    final case class HTTP200(body: Seq[io.apibuilder.generator.v0.models.Generator]) extends Get
    final case class Undocumented(result: play.api.mvc.Result) extends Get
  }

  def get(
      request: play.api.mvc.Request[play.api.mvc.AnyContent],
      key: _root_.scala.Option[String],
      limit: Int,
      offset: Int
  ): scala.concurrent.Future[Get]
  final def get(
      key: _root_.scala.Option[String],
      limit: Int,
      offset: Int
  ): play.api.mvc.Action[play.api.mvc.AnyContent] = Action.async { request =>
    get(request, key, limit, offset)
      .map {
        case r: Get.HTTP200      => Status(200)(play.api.libs.json.Json.toJson(r.body))
        case r: Get.Undocumented => r.result
      }(defaultExecutionContext)
  }

  sealed trait GetByKey extends Product with Serializable
  object GetByKey {
    final case class HTTP200(body: io.apibuilder.generator.v0.models.Generator) extends GetByKey
    case object HTTP404 extends GetByKey
    final case class Undocumented(result: play.api.mvc.Result) extends GetByKey
  }

  def getByKey(request: play.api.mvc.Request[play.api.mvc.AnyContent], key: String): scala.concurrent.Future[GetByKey]
  final def getByKey(key: String): play.api.mvc.Action[play.api.mvc.AnyContent] = Action.async { request =>
    getByKey(request, key)
      .map {
        case r: GetByKey.HTTP200      => Status(200)(play.api.libs.json.Json.toJson(r.body))
        case GetByKey.HTTP404         => Status(404)(play.api.mvc.Results.EmptyContent())
        case r: GetByKey.Undocumented => r.result
      }(defaultExecutionContext)
  }

}

trait HealthchecksController extends play.api.mvc.BaseController {

  sealed trait Get extends Product with Serializable
  object Get {
    final case class HTTP200(body: io.apibuilder.generator.v0.models.Healthcheck) extends Get
    final case class Undocumented(result: play.api.mvc.Result) extends Get
  }

  def get(request: play.api.mvc.Request[play.api.mvc.AnyContent]): scala.concurrent.Future[Get]
  final def get(): play.api.mvc.Action[play.api.mvc.AnyContent] = Action.async { request =>
    get(request)
      .map {
        case r: Get.HTTP200      => Status(200)(play.api.libs.json.Json.toJson(r.body))
        case r: Get.Undocumented => r.result
      }(defaultExecutionContext)
  }

}

trait InvocationsController extends play.api.mvc.BaseController {

  sealed trait PostByKey extends Product with Serializable
  object PostByKey {
    final case class HTTP200(body: io.apibuilder.generator.v0.models.Invocation) extends PostByKey
    final case class HTTP409(body: Seq[io.apibuilder.generator.v0.models.Error]) extends PostByKey
    final case class Undocumented(result: play.api.mvc.Result) extends PostByKey
  }

  def postByKey(
      request: play.api.mvc.Request[io.apibuilder.generator.v0.models.InvocationForm],
      key: String,
      body: io.apibuilder.generator.v0.models.InvocationForm
  ): scala.concurrent.Future[PostByKey]
  final def postByKey(key: String): play.api.mvc.Action[io.apibuilder.generator.v0.models.InvocationForm] =
    Action.async(parse.json[io.apibuilder.generator.v0.models.InvocationForm]) { request =>
      postByKey(request, key, request.body)
        .map {
          case r: PostByKey.HTTP200      => Status(200)(play.api.libs.json.Json.toJson(r.body))
          case r: PostByKey.HTTP409      => Status(409)(play.api.libs.json.Json.toJson(r.body))
          case r: PostByKey.Undocumented => r.result
        }(defaultExecutionContext)
    }

}
