/**
 * Generated by API Builder - https://www.apibuilder.io
 * Service version: 0.3.46
 */
package io.apibuilder.example.union.types.v0.models {

  sealed trait Foobar extends _root_.scala.Product with _root_.scala.Serializable

  @deprecated("to be removed")
  sealed trait User extends _root_.scala.Product with _root_.scala.Serializable

  /**
   * Defines the valid discriminator values for the type User
   */
  sealed trait UserDiscriminator extends _root_.scala.Product with _root_.scala.Serializable

  @deprecated("to be removed")
  object UserDiscriminator {

    case object RegisteredUser extends UserDiscriminator { override def toString = "registered_user" }
    case object GuestUser extends UserDiscriminator { override def toString = "guest_user" }
    @deprecated 
    case object Uuid extends UserDiscriminator { override def toString = "uuid" }

    case class UNDEFINED(override val toString: String) extends UserDiscriminator

    val all: scala.List[UserDiscriminator] = scala.List(RegisteredUser, GuestUser, Uuid)

    private[this] val byName: Map[String, UserDiscriminator] = all.map(x => x.toString.toLowerCase -> x).toMap

    def apply(value: String): UserDiscriminator = fromString(value).getOrElse(UNDEFINED(value))

    def fromString(value: String): _root_.scala.Option[UserDiscriminator] = byName.get(value.toLowerCase)

  }

  /**
   * @param guid Internal unique identifier for this user.
   */
  case class GuestUser(
    guid: _root_.java.util.UUID,
    email: String
  ) extends User

  /**
   * @param guid Internal unique identifier for this user.
   */
  case class RegisteredUser(
    guid: _root_.java.util.UUID,
    email: String,
    preference: io.apibuilder.example.union.types.v0.models.Foobar
  ) extends User

  /**
   * Provides future compatibility in clients - in the future, when a type is added
   * to the union Foobar, it will need to be handled in the client code. This
   * implementation will deserialize these future types as an instance of this class.
   * 
   * @param description Information about the type that we received that is undefined in this version of
   *        the client.
   */
  case class FoobarUndefinedType(
    description: String
  ) extends Foobar

  /**
   * Provides future compatibility in clients - in the future, when a type is added
   * to the union User, it will need to be handled in the client code. This
   * implementation will deserialize these future types as an instance of this class.
   * 
   * @param description Information about the type that we received that is undefined in this version of
   *        the client.
   */
  case class UserUndefinedType(
    description: String
  ) extends User


  /**
   * Wrapper class to support the union types containing the datatype[uuid]
   */
  case class UserUuid(
    value: _root_.java.util.UUID
  ) extends User

  sealed trait Bar extends Foobar

  @deprecated("to be removed") object Bar {

    @deprecated case object B extends Bar { override def toString = "b" }

    /**
     * UNDEFINED captures values that are sent either in error or
     * that were added by the server after this library was
     * generated. We want to make it easy and obvious for users of
     * this library to handle this case gracefully.
     *
     * We use all CAPS for the variable name to avoid collisions
     * with the camel cased values above.
     */
    case class UNDEFINED(override val toString: String) extends Bar

    /**
     * all returns a list of all the valid, known values. We use
     * lower case to avoid collisions with the camel cased values
     * above.
     */
    val all: scala.List[Bar] = scala.List(B)

    private[this]
    val byName: Map[String, Bar] = all.map(x => x.toString.toLowerCase -> x).toMap

    def apply(value: String): Bar = fromString(value).getOrElse(UNDEFINED(value))

    def fromString(value: String): _root_.scala.Option[Bar] = byName.get(value.toLowerCase)

  }

  sealed trait Foo extends Foobar

  object Foo {

    case object A extends Foo { override def toString = "a" }

    /**
     * UNDEFINED captures values that are sent either in error or
     * that were added by the server after this library was
     * generated. We want to make it easy and obvious for users of
     * this library to handle this case gracefully.
     *
     * We use all CAPS for the variable name to avoid collisions
     * with the camel cased values above.
     */
    case class UNDEFINED(override val toString: String) extends Foo

    /**
     * all returns a list of all the valid, known values. We use
     * lower case to avoid collisions with the camel cased values
     * above.
     */
    val all: scala.List[Foo] = scala.List(A)

    private[this]
    val byName: Map[String, Foo] = all.map(x => x.toString.toLowerCase -> x).toMap

    def apply(value: String): Foo = fromString(value).getOrElse(UNDEFINED(value))

    def fromString(value: String): _root_.scala.Option[Foo] = byName.get(value.toLowerCase)

  }

}

package io.apibuilder.example.union.types.v0.models {

  package object json {
    import play.api.libs.json.__
    import play.api.libs.json.JsString
    import play.api.libs.json.Writes
    import play.api.libs.functional.syntax._
    import io.apibuilder.example.union.types.v0.models.json._

    private[v0] implicit val jsonReadsUUID = __.read[String].map(java.util.UUID.fromString)

    private[v0] implicit val jsonWritesUUID = new Writes[java.util.UUID] {
      def writes(x: java.util.UUID) = JsString(x.toString)
    }

    private[v0] implicit val jsonReadsJodaDateTime = __.read[String].map { str =>
      import org.joda.time.format.ISODateTimeFormat.dateTimeParser
      dateTimeParser.parseDateTime(str)
    }

    private[v0] implicit val jsonWritesJodaDateTime = new Writes[org.joda.time.DateTime] {
      def writes(x: org.joda.time.DateTime) = {
        import org.joda.time.format.ISODateTimeFormat.dateTime
        val str = dateTime.print(x)
        JsString(str)
      }
    }

    implicit val jsonReadsApidocExampleUnionTypesBar = new play.api.libs.json.Reads[io.apibuilder.example.union.types.v0.models.Bar] {
      def reads(js: play.api.libs.json.JsValue): play.api.libs.json.JsResult[io.apibuilder.example.union.types.v0.models.Bar] = {
        js match {
          case v: play.api.libs.json.JsString => play.api.libs.json.JsSuccess(io.apibuilder.example.union.types.v0.models.Bar(v.value))
          case _ => {
            (js \ "value").validate[String] match {
              case play.api.libs.json.JsSuccess(v, _) => play.api.libs.json.JsSuccess(io.apibuilder.example.union.types.v0.models.Bar(v))
              case err: play.api.libs.json.JsError => err
            }
          }
        }
      }
    }

    def jsonWritesApidocExampleUnionTypesBar(obj: io.apibuilder.example.union.types.v0.models.Bar) = {
      play.api.libs.json.JsString(obj.toString)
    }

    def jsObjectBar(obj: io.apibuilder.example.union.types.v0.models.Bar) = {
      play.api.libs.json.Json.obj("value" -> play.api.libs.json.JsString(obj.toString))
    }

    implicit def jsonWritesApidocExampleUnionTypesBar: play.api.libs.json.Writes[Bar] = {
      new play.api.libs.json.Writes[io.apibuilder.example.union.types.v0.models.Bar] {
        def writes(obj: io.apibuilder.example.union.types.v0.models.Bar) = {
          jsonWritesApidocExampleUnionTypesBar(obj)
        }
      }
    }

    implicit val jsonReadsApidocExampleUnionTypesFoo = new play.api.libs.json.Reads[io.apibuilder.example.union.types.v0.models.Foo] {
      def reads(js: play.api.libs.json.JsValue): play.api.libs.json.JsResult[io.apibuilder.example.union.types.v0.models.Foo] = {
        js match {
          case v: play.api.libs.json.JsString => play.api.libs.json.JsSuccess(io.apibuilder.example.union.types.v0.models.Foo(v.value))
          case _ => {
            (js \ "value").validate[String] match {
              case play.api.libs.json.JsSuccess(v, _) => play.api.libs.json.JsSuccess(io.apibuilder.example.union.types.v0.models.Foo(v))
              case err: play.api.libs.json.JsError => err
            }
          }
        }
      }
    }

    def jsonWritesApidocExampleUnionTypesFoo(obj: io.apibuilder.example.union.types.v0.models.Foo) = {
      play.api.libs.json.JsString(obj.toString)
    }

    def jsObjectFoo(obj: io.apibuilder.example.union.types.v0.models.Foo) = {
      play.api.libs.json.Json.obj("value" -> play.api.libs.json.JsString(obj.toString))
    }

    implicit def jsonWritesApidocExampleUnionTypesFoo: play.api.libs.json.Writes[Foo] = {
      new play.api.libs.json.Writes[io.apibuilder.example.union.types.v0.models.Foo] {
        def writes(obj: io.apibuilder.example.union.types.v0.models.Foo) = {
          jsonWritesApidocExampleUnionTypesFoo(obj)
        }
      }
    }

    implicit def jsonReadsApidocExampleUnionTypesGuestUser: play.api.libs.json.Reads[GuestUser] = {
      (
        (__ \ "guid").read[_root_.java.util.UUID] and
        (__ \ "email").read[String]
      )(GuestUser.apply _)
    }

    def jsObjectGuestUser(obj: io.apibuilder.example.union.types.v0.models.GuestUser): play.api.libs.json.JsObject = {
      play.api.libs.json.Json.obj(
        "guid" -> play.api.libs.json.JsString(obj.guid.toString),
        "email" -> play.api.libs.json.JsString(obj.email)
      )
    }

    implicit def jsonReadsApidocExampleUnionTypesRegisteredUser: play.api.libs.json.Reads[RegisteredUser] = {
      (
        (__ \ "guid").read[_root_.java.util.UUID] and
        (__ \ "email").read[String] and
        (__ \ "preference").read[io.apibuilder.example.union.types.v0.models.Foobar]
      )(RegisteredUser.apply _)
    }

    def jsObjectRegisteredUser(obj: io.apibuilder.example.union.types.v0.models.RegisteredUser): play.api.libs.json.JsObject = {
      play.api.libs.json.Json.obj(
        "guid" -> play.api.libs.json.JsString(obj.guid.toString),
        "email" -> play.api.libs.json.JsString(obj.email),
        "preference" -> jsObjectFoobar(obj.preference)
      )
    }

    implicit def jsonReadsApidocExampleUnionTypesUserUuid: play.api.libs.json.Reads[UserUuid] = {
      (__ \ "value").read[_root_.java.util.UUID].map { x => new UserUuid(value = x) }
    }

    implicit def jsonReadsApidocExampleUnionTypesFoobar: play.api.libs.json.Reads[Foobar] = {
      (
        (__ \ "foo").read(jsonReadsApidocExampleUnionTypesFoo).asInstanceOf[play.api.libs.json.Reads[Foobar]]
        orElse
        (__ \ "bar").read(jsonReadsApidocExampleUnionTypesBar).asInstanceOf[play.api.libs.json.Reads[Foobar]]
        orElse
        play.api.libs.json.Reads(jsValue => play.api.libs.json.JsSuccess(io.apibuilder.example.union.types.v0.models.FoobarUndefinedType(jsValue.toString))).asInstanceOf[play.api.libs.json.Reads[Foobar]]
      )
    }

    def jsObjectFoobar(obj: io.apibuilder.example.union.types.v0.models.Foobar): play.api.libs.json.JsObject = {
      obj match {
        case x: io.apibuilder.example.union.types.v0.models.Foo => play.api.libs.json.Json.obj("foo" -> play.api.libs.json.JsString(x.toString))
        case x: io.apibuilder.example.union.types.v0.models.Bar => play.api.libs.json.Json.obj("bar" -> play.api.libs.json.JsString(x.toString))
        case x: io.apibuilder.example.union.types.v0.models.FoobarUndefinedType => sys.error(s"The type[io.apibuilder.example.union.types.v0.models.FoobarUndefinedType] should never be serialized")
      }
    }

    implicit def jsonWritesApidocExampleUnionTypesFoobar: play.api.libs.json.Writes[Foobar] = {
      new play.api.libs.json.Writes[io.apibuilder.example.union.types.v0.models.Foobar] {
        def writes(obj: io.apibuilder.example.union.types.v0.models.Foobar) = {
          jsObjectFoobar(obj)
        }
      }
    }

    implicit def jsonReadsApidocExampleUnionTypesUser: play.api.libs.json.Reads[User] = new play.api.libs.json.Reads[User] {
      def reads(js: play.api.libs.json.JsValue): play.api.libs.json.JsResult[User] = {
        (js \ "discriminator").asOpt[String].getOrElse("registered_user") match {
          case "registered_user" => js.validate[io.apibuilder.example.union.types.v0.models.RegisteredUser]
          case "guest_user" => js.validate[io.apibuilder.example.union.types.v0.models.GuestUser]
          case "uuid" => js.validate[io.apibuilder.example.union.types.v0.models.UserUuid]
          case other => play.api.libs.json.JsSuccess(io.apibuilder.example.union.types.v0.models.UserUndefinedType(other))
        }
      }
    }

    def jsObjectUser(obj: io.apibuilder.example.union.types.v0.models.User): play.api.libs.json.JsObject = {
      obj match {
        case x: io.apibuilder.example.union.types.v0.models.RegisteredUser => jsObjectRegisteredUser(x) ++ play.api.libs.json.Json.obj("discriminator" -> "registered_user")
        case x: io.apibuilder.example.union.types.v0.models.GuestUser => jsObjectGuestUser(x) ++ play.api.libs.json.Json.obj("discriminator" -> "guest_user")
        case x: io.apibuilder.example.union.types.v0.models.UserUuid => play.api.libs.json.Json.obj("discriminator" -> "uuid", "value" -> play.api.libs.json.JsString(x.value.toString))
        case other => {
          sys.error(s"The type[${other.getClass.getName}] has no JSON writer")
        }
      }
    }

    implicit def jsonWritesApidocExampleUnionTypesUser: play.api.libs.json.Writes[User] = {
      new play.api.libs.json.Writes[io.apibuilder.example.union.types.v0.models.User] {
        def writes(obj: io.apibuilder.example.union.types.v0.models.User) = {
          jsObjectUser(obj)
        }
      }
    }
  }
}

package io.apibuilder.example.union.types.v0 {

  object Bindables {

    import play.api.mvc.{PathBindable, QueryStringBindable}
    import org.joda.time.{DateTime, LocalDate}
    import org.joda.time.format.ISODateTimeFormat
    import io.apibuilder.example.union.types.v0.models._

    // Type: date-time-iso8601
    implicit val pathBindableTypeDateTimeIso8601 = new PathBindable.Parsing[org.joda.time.DateTime](
      ISODateTimeFormat.dateTimeParser.parseDateTime(_), _.toString, (key: String, e: _root_.java.lang.Exception) => s"Error parsing date time $key. Example: 2014-04-29T11:56:52Z"
    )

    implicit val queryStringBindableTypeDateTimeIso8601 = new QueryStringBindable.Parsing[org.joda.time.DateTime](
      ISODateTimeFormat.dateTimeParser.parseDateTime(_), _.toString, (key: String, e: _root_.java.lang.Exception) => s"Error parsing date time $key. Example: 2014-04-29T11:56:52Z"
    )

    // Type: date-iso8601
    implicit val pathBindableTypeDateIso8601 = new PathBindable.Parsing[org.joda.time.LocalDate](
      ISODateTimeFormat.yearMonthDay.parseLocalDate(_), _.toString, (key: String, e: _root_.java.lang.Exception) => s"Error parsing date $key. Example: 2014-04-29"
    )

    implicit val queryStringBindableTypeDateIso8601 = new QueryStringBindable.Parsing[org.joda.time.LocalDate](
      ISODateTimeFormat.yearMonthDay.parseLocalDate(_), _.toString, (key: String, e: _root_.java.lang.Exception) => s"Error parsing date $key. Example: 2014-04-29"
    )

    // Enum: Bar
    private[this] val enumBarNotFound = (key: String, e: _root_.java.lang.Exception) => s"Unrecognized $key, should be one of ${io.apibuilder.example.union.types.v0.models.Bar.all.mkString(", ")}"

    implicit val pathBindableEnumBar = new PathBindable.Parsing[io.apibuilder.example.union.types.v0.models.Bar] (
      Bar.fromString(_).get, _.toString, enumBarNotFound
    )

    implicit val queryStringBindableEnumBar = new QueryStringBindable.Parsing[io.apibuilder.example.union.types.v0.models.Bar](
      Bar.fromString(_).get, _.toString, enumBarNotFound
    )

    // Enum: Foo
    private[this] val enumFooNotFound = (key: String, e: _root_.java.lang.Exception) => s"Unrecognized $key, should be one of ${io.apibuilder.example.union.types.v0.models.Foo.all.mkString(", ")}"

    implicit val pathBindableEnumFoo = new PathBindable.Parsing[io.apibuilder.example.union.types.v0.models.Foo] (
      Foo.fromString(_).get, _.toString, enumFooNotFound
    )

    implicit val queryStringBindableEnumFoo = new QueryStringBindable.Parsing[io.apibuilder.example.union.types.v0.models.Foo](
      Foo.fromString(_).get, _.toString, enumFooNotFound
    )

  }

}


package io.apibuilder.example.union.types.v0 {

  object Constants {

    val Namespace = "io.apibuilder.example.union.types.v0"
    val UserAgent = "apidoc:play_2x_client:unknown"
    val Version = "0.3.46"
    val VersionMajor = 0

  }

  class Client(
    val baseUrl: String,
    auth: scala.Option[io.apibuilder.example.union.types.v0.Authorization] = None,
    defaultHeaders: Seq[(String, String)] = Nil
  ) extends interfaces.Client {
    import io.apibuilder.example.union.types.v0.models.json._

    private[this] val logger = play.api.Logger("io.apibuilder.example.union.types.v0.Client")

    logger.info(s"Initializing io.apibuilder.example.union.types.v0.Client for url $baseUrl")

    def users: Users = Users

    object Users extends Users {
      override def get(
        requestHeaders: Seq[(String, String)] = Nil
      )(implicit ec: scala.concurrent.ExecutionContext): scala.concurrent.Future[Seq[io.apibuilder.example.union.types.v0.models.User]] = {
        _executeRequest("GET", s"/users", requestHeaders = requestHeaders).map {
          case r if r.status == 200 => _root_.io.apibuilder.example.union.types.v0.Client.parseJson("Seq[io.apibuilder.example.union.types.v0.models.User]", r, _.validate[Seq[io.apibuilder.example.union.types.v0.models.User]])
          case r => throw io.apibuilder.example.union.types.v0.errors.FailedRequest(r.status, s"Unsupported response code[${r.status}]. Expected: 200")
        }
      }

      override def getByGuid(
        guid: _root_.java.util.UUID,
        requestHeaders: Seq[(String, String)] = Nil
      )(implicit ec: scala.concurrent.ExecutionContext): scala.concurrent.Future[io.apibuilder.example.union.types.v0.models.User] = {
        _executeRequest("GET", s"/users/${guid}", requestHeaders = requestHeaders).map {
          case r if r.status == 200 => _root_.io.apibuilder.example.union.types.v0.Client.parseJson("io.apibuilder.example.union.types.v0.models.User", r, _.validate[io.apibuilder.example.union.types.v0.models.User])
          case r if r.status == 404 => throw io.apibuilder.example.union.types.v0.errors.UnitResponse(r.status)
          case r => throw io.apibuilder.example.union.types.v0.errors.FailedRequest(r.status, s"Unsupported response code[${r.status}]. Expected: 200, 404")
        }
      }

      override def post(
        user: io.apibuilder.example.union.types.v0.models.User,
        requestHeaders: Seq[(String, String)] = Nil
      )(implicit ec: scala.concurrent.ExecutionContext): scala.concurrent.Future[io.apibuilder.example.union.types.v0.models.User] = {
        val payload = play.api.libs.json.Json.toJson(user)

        _executeRequest("POST", s"/users", body = Some(payload), requestHeaders = requestHeaders).map {
          case r if r.status == 201 => _root_.io.apibuilder.example.union.types.v0.Client.parseJson("io.apibuilder.example.union.types.v0.models.User", r, _.validate[io.apibuilder.example.union.types.v0.models.User])
          case r => throw io.apibuilder.example.union.types.v0.errors.FailedRequest(r.status, s"Unsupported response code[${r.status}]. Expected: 201")
        }
      }
    }

    def _requestHolder(path: String): play.api.libs.ws.WSRequestHolder = {
      import play.api.Play.current

      val holder = play.api.libs.ws.WS.url(baseUrl + path).withHeaders(
        "User-Agent" -> Constants.UserAgent,
        "X-Apidoc-Version" -> Constants.Version,
        "X-Apidoc-Version-Major" -> Constants.VersionMajor.toString
      ).withHeaders(defaultHeaders : _*)
      auth.fold(holder) {
        case Authorization.Basic(username, password) => {
          holder.withAuth(username, password.getOrElse(""), play.api.libs.ws.WSAuthScheme.BASIC)
        }
        case a => sys.error("Invalid authorization scheme[" + a.getClass + "]")
      }
    }

    def _logRequest(method: String, req: play.api.libs.ws.WSRequestHolder)(implicit ec: scala.concurrent.ExecutionContext): play.api.libs.ws.WSRequestHolder = {
      val queryComponents = for {
        (name, values) <- req.queryString
        value <- values
      } yield s"$name=$value"
      val url = s"${req.url}${queryComponents.mkString("?", "&", "")}"
      auth.fold(logger.info(s"curl -X $method $url")) { _ =>
        logger.info(s"curl -X $method -u '[REDACTED]:' $url")
      }
      req
    }

    def _executeRequest(
      method: String,
      path: String,
      queryParameters: Seq[(String, String)] = Nil,
      requestHeaders: Seq[(String, String)] = Nil,
      body: Option[play.api.libs.json.JsValue] = None
    )(implicit ec: scala.concurrent.ExecutionContext): scala.concurrent.Future[play.api.libs.ws.WSResponse] = {
      method.toUpperCase match {
        case "GET" => {
          _logRequest("GET", _requestHolder(path).withHeaders(requestHeaders:_*).withQueryString(queryParameters:_*)).get()
        }
        case "POST" => {
          _logRequest("POST", _requestHolder(path).withHeaders(_withJsonContentType(requestHeaders):_*).withQueryString(queryParameters:_*)).post(body.getOrElse(play.api.libs.json.Json.obj()))
        }
        case "PUT" => {
          _logRequest("PUT", _requestHolder(path).withHeaders(_withJsonContentType(requestHeaders):_*).withQueryString(queryParameters:_*)).put(body.getOrElse(play.api.libs.json.Json.obj()))
        }
        case "PATCH" => {
          _logRequest("PATCH", _requestHolder(path).withHeaders(requestHeaders:_*).withQueryString(queryParameters:_*)).patch(body.getOrElse(play.api.libs.json.Json.obj()))
        }
        case "DELETE" => {
          _logRequest("DELETE", _requestHolder(path).withHeaders(requestHeaders:_*).withQueryString(queryParameters:_*)).delete()
        }
         case "HEAD" => {
          _logRequest("HEAD", _requestHolder(path).withHeaders(requestHeaders:_*).withQueryString(queryParameters:_*)).head()
        }
         case "OPTIONS" => {
          _logRequest("OPTIONS", _requestHolder(path).withHeaders(requestHeaders:_*).withQueryString(queryParameters:_*)).options()
        }
        case _ => {
          _logRequest(method, _requestHolder(path).withHeaders(requestHeaders:_*).withQueryString(queryParameters:_*))
          sys.error("Unsupported method[%s]".format(method))
        }
      }
    }

    /**
     * Adds a Content-Type: application/json header unless the specified requestHeaders
     * already contain a Content-Type header
     */
    def _withJsonContentType(headers: Seq[(String, String)]): Seq[(String, String)] = {
      headers.find { _._1.toUpperCase == "CONTENT-TYPE" } match {
        case None => headers ++ Seq(("Content-Type" -> "application/json; charset=UTF-8"))
        case Some(_) => headers
      }
    }

  }

  object Client {

    def parseJson[T](
      className: String,
      r: play.api.libs.ws.WSResponse,
      f: (play.api.libs.json.JsValue => play.api.libs.json.JsResult[T])
    ): T = {
      f(play.api.libs.json.Json.parse(r.body)) match {
        case play.api.libs.json.JsSuccess(x, _) => x
        case play.api.libs.json.JsError(errors) => {
          throw io.apibuilder.example.union.types.v0.errors.FailedRequest(r.status, s"Invalid json for class[" + className + "]: " + errors.mkString(" "))
        }
      }
    }

  }

  sealed trait Authorization extends _root_.scala.Product with _root_.scala.Serializable
  object Authorization {
    case class Basic(username: String, password: Option[String] = None) extends Authorization
  }

  package interfaces {

    trait Client {
      def baseUrl: String
      def users: io.apibuilder.example.union.types.v0.Users
    }

  }

  trait Users {
    def get(
      requestHeaders: Seq[(String, String)] = Nil
    )(implicit ec: scala.concurrent.ExecutionContext): scala.concurrent.Future[Seq[io.apibuilder.example.union.types.v0.models.User]]

    def getByGuid(
      guid: _root_.java.util.UUID,
      requestHeaders: Seq[(String, String)] = Nil
    )(implicit ec: scala.concurrent.ExecutionContext): scala.concurrent.Future[io.apibuilder.example.union.types.v0.models.User]

    def post(
      user: io.apibuilder.example.union.types.v0.models.User,
      requestHeaders: Seq[(String, String)] = Nil
    )(implicit ec: scala.concurrent.ExecutionContext): scala.concurrent.Future[io.apibuilder.example.union.types.v0.models.User]
  }

  package errors {

    import io.apibuilder.example.union.types.v0.models.json._

    case class UnitResponse(status: Int) extends Exception(s"HTTP $status")

    case class FailedRequest(responseCode: Int, message: String, requestUri: Option[_root_.java.net.URI] = None) extends _root_.java.lang.Exception(s"HTTP $responseCode: $message")

  }

}