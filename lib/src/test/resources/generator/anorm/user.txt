/**
 * Generated by apidoc - http://www.apidoc.me
 * Service version: 1.0.0
 */
import anorm._

package test.apidoc.apidoctest.v0.anorm.parsers {

  import test.apidoc.apidoctest.v0.anorm.conversions.Standard._

  import test.apidoc.apidoctest.v0.anorm.conversions.Types._

  object Name {

    def parserWithPrefix(prefix: String, sep: String = "_") = parser(
      first = s"$prefix${sep}first",
      last = s"$prefix${sep}last"
    )

    def parser(
      first: String = "first",
      last: String = "last"
    ): RowParser[test.apidoc.apidoctest.v0.models.Name] = {
      SqlParser.str(first).? ~
      SqlParser.str(last).? map {
        case first ~ last => {
          test.apidoc.apidoctest.v0.models.Name(
            first = first,
            last = last
          )
        }
      }
    }

  }

  object User {

    def parserWithPrefix(prefix: String, sep: String = "_") = parser(
      guid = s"$prefix${sep}guid",
      email = s"$prefix${sep}email",
      namePrefix = s"$prefix${sep}name"
    )

    def parser(
      guid: String = "guid",
      email: String = "email",
      namePrefix: String = "name"
    ): RowParser[test.apidoc.apidoctest.v0.models.User] = {
      SqlParser.get[_root_.java.util.UUID](guid) ~
      SqlParser.str(email) ~
      test.apidoc.apidoctest.v0.anorm.parsers.Name.parserWithPrefix(namePrefix).? map {
        case guid ~ email ~ name => {
          test.apidoc.apidoctest.v0.models.User(
            guid = guid,
            email = email,
            name = name
          )
        }
      }
    }

  }

}