/**
 * Generated by API Builder - https://www.apibuilder.io
 * Service version: 1.0.0
 */
import anorm._

package test.apidoc.apidoctest.v0.anorm.parsers {

  import test.apidoc.apidoctest.v0.anorm.conversions.Standard._

  import test.apidoc.apidoctest.v0.anorm.conversions.Types._

  object Status {

    def parserWithPrefix(prefix: String, sep: String = "_"): RowParser[test.apidoc.apidoctest.v0.models.Status] = parser(prefixOpt = Some(s"$prefix$sep"))

    def parser(name: String = "status", prefixOpt: Option[String] = None): RowParser[test.apidoc.apidoctest.v0.models.Status] = {
      SqlParser.str(prefixOpt.getOrElse("") + name) map {
        case value => test.apidoc.apidoctest.v0.models.Status(value)
      }
    }

  }

  object User {

    def parserWithPrefix(prefix: String, sep: String = "_"): RowParser[test.apidoc.apidoctest.v0.models.User] = parser(prefixOpt = Some(s"$prefix$sep"))

    def parser(
      guid: String = "guid",
      status: String = "status",
      prefixOpt: Option[String] = None
    ): RowParser[test.apidoc.apidoctest.v0.models.User] = {
      SqlParser.get[_root_.java.util.UUID](prefixOpt.getOrElse("") + guid) ~
      test.apidoc.apidoctest.v0.anorm.parsers.Status.parser(prefixOpt.getOrElse("") + status) map {
        case guid ~ status => {
          test.apidoc.apidoctest.v0.models.User(
            guid = guid,
            status = status
          )
        }
      }
    }

  }

}