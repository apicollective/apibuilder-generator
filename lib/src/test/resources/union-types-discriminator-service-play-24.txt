/**
 * Generated by API Builder - https://www.apibuilder.io
 * Service version: 0.3.46
 */
package io.apibuilder.example.union.types.discriminator.v0.models {

  sealed trait User extends _root_.scala.Product with _root_.scala.Serializable

  /**
   * Defines the valid discriminator values for the type User
   */
  sealed trait UserDiscriminator extends _root_.scala.Product with _root_.scala.Serializable

  object UserDiscriminator {

    case object RegisteredUser extends UserDiscriminator { override def toString = "registered_user" }
    case object GuestUser extends UserDiscriminator { override def toString = "guest_user" }
    case object SystemUser extends UserDiscriminator { override def toString = "system_user" }
    case object String extends UserDiscriminator { override def toString = "string" }

    final case class UNDEFINED(override val toString: String) extends UserDiscriminator

    val all: scala.List[UserDiscriminator] = scala.List(RegisteredUser, GuestUser, SystemUser, String)

    private[this] val byName: Map[String, UserDiscriminator] = all.map(x => x.toString.toLowerCase -> x).toMap

    def apply(value: String): UserDiscriminator = fromString(value).getOrElse(UNDEFINED(value))

    def fromString(value: String): _root_.scala.Option[UserDiscriminator] = byName.get(value.toLowerCase)

  }

  /**
   * @param id Internal unique identifier for this user.
   */
  final case class GuestUser(
    id: String,
    email: _root_.scala.Option[String] = None
  ) extends User

  final case class RegisteredUser(
    id: String,
    email: String
  ) extends User

  /**
   * Provides future compatibility in clients - in the future, when a type is added
   * to the union User, it will need to be handled in the client code. This
   * implementation will deserialize these future types as an instance of this class.
   *
   * @param description Information about the type that we received that is undefined in this version of
   *        the client.
   */
  final case class UserUndefinedType(
    description: String
  ) extends User

  /**
   * Wrapper class to support the union types containing the datatype[string]
   */
  final case class UserString(
    value: String
  ) extends User

  sealed trait SystemUser extends User

  object SystemUser {

    case object System extends SystemUser { override def toString = "system" }
    case object Anonymous extends SystemUser { override def toString = "anonymous" }

    /**
     * UNDEFINED captures values that are sent either in error or
     * that were added by the server after this library was
     * generated. We want to make it easy and obvious for users of
     * this library to handle this case gracefully.
     *
     * We use all CAPS for the variable name to avoid collisions
     * with the camel cased values above.
     */
    final case class UNDEFINED(override val toString: String) extends SystemUser

    /**
     * all returns a list of all the valid, known values. We use
     * lower case to avoid collisions with the camel cased values
     * above.
     */
    val all: scala.List[SystemUser] = scala.List(System, Anonymous)

    private[this]
    val byName: Map[String, SystemUser] = all.map(x => x.toString.toLowerCase -> x).toMap

    def apply(value: String): SystemUser = fromString(value).getOrElse(UNDEFINED(value))

    def fromString(value: String): _root_.scala.Option[SystemUser] = byName.get(value.toLowerCase)

  }

}

package io.apibuilder.example.union.types.discriminator.v0.models {

  package object json {
    import play.api.libs.json.__
    import play.api.libs.json.JsString
    import play.api.libs.json.Writes
    import play.api.libs.functional.syntax._
    import io.apibuilder.example.union.types.discriminator.v0.models.json._

    private[v0] implicit val jsonReadsUUID = __.read[String].map { str =>
      _root_.java.util.UUID.fromString(str)
    }

    private[v0] implicit val jsonWritesUUID = new Writes[_root_.java.util.UUID] {
      def writes(x: _root_.java.util.UUID) = JsString(x.toString)
    }

    private[v0] implicit val jsonReadsJodaDateTime = __.read[String].map { str =>
      _root_.org.joda.time.format.ISODateTimeFormat.dateTimeParser.parseDateTime(str)
    }

    private[v0] implicit val jsonWritesJodaDateTime = new Writes[_root_.org.joda.time.DateTime] {
      def writes(x: _root_.org.joda.time.DateTime) = {
        JsString(_root_.org.joda.time.format.ISODateTimeFormat.dateTime.print(x))
      }
    }

    private[v0] implicit val jsonReadsJodaLocalDate = __.read[String].map { str =>
      _root_.org.joda.time.format.ISODateTimeFormat.dateTimeParser.parseLocalDate(str)
    }

    private[v0] implicit val jsonWritesJodaLocalDate = new Writes[_root_.org.joda.time.LocalDate] {
      def writes(x: _root_.org.joda.time.LocalDate) = {
        JsString(_root_.org.joda.time.format.ISODateTimeFormat.date.print(x))
      }
    }

    implicit val jsonReadsApidocExampleUnionTypesDiscriminatorSystemUser: play.api.libs.json.Reads[io.apibuilder.example.union.types.discriminator.v0.models.SystemUser] = new play.api.libs.json.Reads[io.apibuilder.example.union.types.discriminator.v0.models.SystemUser] {
      def reads(js: play.api.libs.json.JsValue): play.api.libs.json.JsResult[io.apibuilder.example.union.types.discriminator.v0.models.SystemUser] = {
        js match {
          case v: play.api.libs.json.JsString => play.api.libs.json.JsSuccess(io.apibuilder.example.union.types.discriminator.v0.models.SystemUser(v.value))
          case _ => {
            (js \ "value").validate[String] match {
              case play.api.libs.json.JsSuccess(v, _) => play.api.libs.json.JsSuccess(io.apibuilder.example.union.types.discriminator.v0.models.SystemUser(v))
              case err: play.api.libs.json.JsError =>
                (js \ "system_user").validate[String] match {
                  case play.api.libs.json.JsSuccess(v, _) => play.api.libs.json.JsSuccess(io.apibuilder.example.union.types.discriminator.v0.models.SystemUser(v))
                  case err: play.api.libs.json.JsError => err
                }
            }
          }
        }
      }
    }

    def jsonWritesApidocExampleUnionTypesDiscriminatorSystemUser(obj: io.apibuilder.example.union.types.discriminator.v0.models.SystemUser) = {
      play.api.libs.json.JsString(obj.toString)
    }

    def jsObjectSystemUser(obj: io.apibuilder.example.union.types.discriminator.v0.models.SystemUser) = {
      play.api.libs.json.Json.obj("discriminator" -> "system_user", "value" -> play.api.libs.json.JsString(obj.toString))
    }

    implicit def jsonWritesApidocExampleUnionTypesDiscriminatorSystemUser: play.api.libs.json.Writes[SystemUser] = {
      (obj: io.apibuilder.example.union.types.discriminator.v0.models.SystemUser) => {
        jsObjectSystemUser(obj)
      }
    }

    implicit def jsonReadsApidocExampleUnionTypesDiscriminatorGuestUser: play.api.libs.json.Reads[GuestUser] = {
      for {
        id <- (__ \ "id").read[String]
        email <- (__ \ "email").readNullable[String]
      } yield GuestUser(id, email)
    }

    def jsObjectGuestUser(obj: io.apibuilder.example.union.types.discriminator.v0.models.GuestUser): play.api.libs.json.JsObject = {
      play.api.libs.json.Json.obj(
        "id" -> play.api.libs.json.JsString(obj.id)
      ) ++ (obj.email match {
        case None => play.api.libs.json.Json.obj()
        case Some(x) => play.api.libs.json.Json.obj("email" -> play.api.libs.json.JsString(x))
      }) ++ play.api.libs.json.Json.obj("discriminator" -> "guest_user")
    }

    implicit def jsonWritesApidocExampleUnionTypesDiscriminatorGuestUser: play.api.libs.json.Writes[GuestUser] = {
      (obj: io.apibuilder.example.union.types.discriminator.v0.models.GuestUser) => {
        jsObjectGuestUser(obj)
      }
    }

    implicit def jsonReadsApidocExampleUnionTypesDiscriminatorRegisteredUser: play.api.libs.json.Reads[RegisteredUser] = {
      for {
        id <- (__ \ "id").read[String]
        email <- (__ \ "email").read[String]
      } yield RegisteredUser(id, email)
    }

    def jsObjectRegisteredUser(obj: io.apibuilder.example.union.types.discriminator.v0.models.RegisteredUser): play.api.libs.json.JsObject = {
      play.api.libs.json.Json.obj(
        "id" -> play.api.libs.json.JsString(obj.id),
        "email" -> play.api.libs.json.JsString(obj.email)
      ) ++ play.api.libs.json.Json.obj("discriminator" -> "registered_user")
    }

    implicit def jsonWritesApidocExampleUnionTypesDiscriminatorRegisteredUser: play.api.libs.json.Writes[RegisteredUser] = {
      (obj: io.apibuilder.example.union.types.discriminator.v0.models.RegisteredUser) => {
        jsObjectRegisteredUser(obj)
      }
    }

    implicit def jsonReadsApidocExampleUnionTypesDiscriminatorUserString: play.api.libs.json.Reads[UserString] = {
      (__ \ "value").read[String].map { x => new UserString(value = x) }
    }

    implicit def jsonReadsApidocExampleUnionTypesDiscriminatorUser: play.api.libs.json.Reads[User] = new play.api.libs.json.Reads[User] {
      def reads(js: play.api.libs.json.JsValue): play.api.libs.json.JsResult[User] = {
        (js \ "discriminator").asOpt[String].getOrElse("registered_user") match {
          case "registered_user" => js.validate[io.apibuilder.example.union.types.discriminator.v0.models.RegisteredUser]
          case "guest_user" => js.validate[io.apibuilder.example.union.types.discriminator.v0.models.GuestUser]
          case "system_user" => js.validate[io.apibuilder.example.union.types.discriminator.v0.models.SystemUser]
          case "string" => js.validate[io.apibuilder.example.union.types.discriminator.v0.models.UserString]
          case other => play.api.libs.json.JsSuccess(io.apibuilder.example.union.types.discriminator.v0.models.UserUndefinedType(other))
        }
      }
    }

    def jsObjectUser(obj: io.apibuilder.example.union.types.discriminator.v0.models.User): play.api.libs.json.JsObject = {
      obj match {
        case x: io.apibuilder.example.union.types.discriminator.v0.models.RegisteredUser => jsObjectRegisteredUser(x)
        case x: io.apibuilder.example.union.types.discriminator.v0.models.GuestUser => jsObjectGuestUser(x)
        case x: io.apibuilder.example.union.types.discriminator.v0.models.SystemUser => jsObjectSystemUser(x)
        case x: io.apibuilder.example.union.types.discriminator.v0.models.UserString => play.api.libs.json.Json.obj("discriminator" -> "string", "value" -> play.api.libs.json.JsString(x.value))
        case other => {
          sys.error(s"The type[${other.getClass.getName}] has no JSON writer")
        }
      }
    }

    implicit def jsonWritesApidocExampleUnionTypesDiscriminatorUser: play.api.libs.json.Writes[User] = {
      (obj: io.apibuilder.example.union.types.discriminator.v0.models.User) => {
        jsObjectUser(obj)
      }
    }
  }
}

package io.apibuilder.example.union.types.discriminator.v0 {

  object Bindables {

    import play.api.mvc.{PathBindable, QueryStringBindable}

    // import models directly for backwards compatibility with prior versions of the generator
    import Core._
    import Models._

    object Core {
      implicit def pathBindableDateTimeIso8601(implicit stringBinder: QueryStringBindable[String]): PathBindable[_root_.org.joda.time.DateTime] = ApibuilderPathBindable(ApibuilderTypes.dateTimeIso8601)
      implicit def queryStringBindableDateTimeIso8601(implicit stringBinder: QueryStringBindable[String]): QueryStringBindable[_root_.org.joda.time.DateTime] = ApibuilderQueryStringBindable(ApibuilderTypes.dateTimeIso8601)

      implicit def pathBindableDateIso8601(implicit stringBinder: QueryStringBindable[String]): PathBindable[_root_.org.joda.time.LocalDate] = ApibuilderPathBindable(ApibuilderTypes.dateIso8601)
      implicit def queryStringBindableDateIso8601(implicit stringBinder: QueryStringBindable[String]): QueryStringBindable[_root_.org.joda.time.LocalDate] = ApibuilderQueryStringBindable(ApibuilderTypes.dateIso8601)
    }

    object Models {
      import io.apibuilder.example.union.types.discriminator.v0.models._

      val systemUserConverter: ApibuilderTypeConverter[io.apibuilder.example.union.types.discriminator.v0.models.SystemUser] = new ApibuilderTypeConverter[io.apibuilder.example.union.types.discriminator.v0.models.SystemUser] {
        override def convert(value: String): io.apibuilder.example.union.types.discriminator.v0.models.SystemUser = io.apibuilder.example.union.types.discriminator.v0.models.SystemUser(value)
        override def convert(value: io.apibuilder.example.union.types.discriminator.v0.models.SystemUser): String = value.toString
        override def example: io.apibuilder.example.union.types.discriminator.v0.models.SystemUser = io.apibuilder.example.union.types.discriminator.v0.models.SystemUser.System
        override def validValues: Seq[io.apibuilder.example.union.types.discriminator.v0.models.SystemUser] = io.apibuilder.example.union.types.discriminator.v0.models.SystemUser.all
      }
      implicit def pathBindableSystemUser(implicit stringBinder: QueryStringBindable[String]): PathBindable[io.apibuilder.example.union.types.discriminator.v0.models.SystemUser] = ApibuilderPathBindable(systemUserConverter)
      implicit def queryStringBindableSystemUser(implicit stringBinder: QueryStringBindable[String]): QueryStringBindable[io.apibuilder.example.union.types.discriminator.v0.models.SystemUser] = ApibuilderQueryStringBindable(systemUserConverter)
    }

    trait ApibuilderTypeConverter[T] {

      def convert(value: String): T

      def convert(value: T): String

      def example: T

      def validValues: Seq[T] = Nil

      def errorMessage(key: String, value: String, ex: java.lang.Exception): String = {
        val base = s"Invalid value '$value' for parameter '$key'. "
        validValues.toList match {
          case Nil => base + "Ex: " + convert(example)
          case values => base + ". Valid values are: " + values.mkString("'", "', '", "'")
        }
      }
    }

    object ApibuilderTypes {
      val dateTimeIso8601: ApibuilderTypeConverter[_root_.org.joda.time.DateTime] = new ApibuilderTypeConverter[_root_.org.joda.time.DateTime] {
        override def convert(value: String): _root_.org.joda.time.DateTime = _root_.org.joda.time.format.ISODateTimeFormat.dateTimeParser.parseDateTime(value)
        override def convert(value: _root_.org.joda.time.DateTime): String = _root_.org.joda.time.format.ISODateTimeFormat.dateTime.print(value)
        override def example: _root_.org.joda.time.DateTime = _root_.org.joda.time.DateTime.now
      }

      val dateIso8601: ApibuilderTypeConverter[_root_.org.joda.time.LocalDate] = new ApibuilderTypeConverter[_root_.org.joda.time.LocalDate] {
        override def convert(value: String): _root_.org.joda.time.LocalDate = _root_.org.joda.time.format.ISODateTimeFormat.dateTimeParser.parseLocalDate(value)
        override def convert(value: _root_.org.joda.time.LocalDate): String = _root_.org.joda.time.format.ISODateTimeFormat.date.print(value)
        override def example: _root_.org.joda.time.LocalDate = _root_.org.joda.time.LocalDate.now
      }
    }

    final case class ApibuilderQueryStringBindable[T](
      converters: ApibuilderTypeConverter[T]
    ) extends QueryStringBindable[T] {

      override def bind(key: String, params: Map[String, Seq[String]]): _root_.scala.Option[_root_.scala.Either[String, T]] = {
        params.getOrElse(key, Nil).headOption.map { v =>
          try {
            Right(
              converters.convert(v)
            )
          } catch {
            case ex: java.lang.Exception => Left(
              converters.errorMessage(key, v, ex)
            )
          }
        }
      }

      override def unbind(key: String, value: T): String = {
        s"$key=${converters.convert(value)}"
      }
    }

    final case class ApibuilderPathBindable[T](
      converters: ApibuilderTypeConverter[T]
    ) extends PathBindable[T] {

      override def bind(key: String, value: String): _root_.scala.Either[String, T] = {
        try {
          Right(
            converters.convert(value)
          )
        } catch {
          case ex: java.lang.Exception => Left(
            converters.errorMessage(key, value, ex)
          )
        }
      }

      override def unbind(key: String, value: T): String = {
        converters.convert(value)
      }
    }

  }

}


package io.apibuilder.example.union.types.discriminator.v0 {

  object Constants {

    val Namespace = "io.apibuilder.example.union.types.discriminator.v0"
    val UserAgent = "apibuilder-play_2x_client-unknown"
    val Version = "0.3.46"
    val VersionMajor = 0

  }

  class Client(
    val baseUrl: String,
    auth: scala.Option[io.apibuilder.example.union.types.discriminator.v0.Authorization] = None,
    defaultHeaders: Seq[(String, String)] = Nil
  ) extends interfaces.Client {
    import io.apibuilder.example.union.types.discriminator.v0.models.json._

    private[this] val logger = play.api.Logger("io.apibuilder.example.union.types.discriminator.v0.Client")

    logger.info(s"Initializing io.apibuilder.example.union.types.discriminator.v0.Client for url $baseUrl")

    def users: Users = Users

    object Users extends Users {
      override def get(
        requestHeaders: Seq[(String, String)] = Nil
      )(implicit ec: scala.concurrent.ExecutionContext): scala.concurrent.Future[Seq[io.apibuilder.example.union.types.discriminator.v0.models.User]] = {
        _executeRequest("GET", s"/users", requestHeaders = requestHeaders).map {
          case r if r.status == 200 => _root_.io.apibuilder.example.union.types.discriminator.v0.Client.parseJson("Seq[io.apibuilder.example.union.types.discriminator.v0.models.User]", r, _.validate[Seq[io.apibuilder.example.union.types.discriminator.v0.models.User]])
          case r => throw io.apibuilder.example.union.types.discriminator.v0.errors.FailedRequest(r.status, s"Unsupported response code[${r.status}]. Expected: 200")
        }
      }

      override def getById(
        id: String,
        requestHeaders: Seq[(String, String)] = Nil
      )(implicit ec: scala.concurrent.ExecutionContext): scala.concurrent.Future[io.apibuilder.example.union.types.discriminator.v0.models.User] = {
        _executeRequest("GET", s"/users/${play.utils.UriEncoding.encodePathSegment(id, "UTF-8")}", requestHeaders = requestHeaders).map {
          case r if r.status == 200 => _root_.io.apibuilder.example.union.types.discriminator.v0.Client.parseJson("io.apibuilder.example.union.types.discriminator.v0.models.User", r, _.validate[io.apibuilder.example.union.types.discriminator.v0.models.User])
          case r if r.status == 404 => throw io.apibuilder.example.union.types.discriminator.v0.errors.UnitResponse(r.status)
          case r => throw io.apibuilder.example.union.types.discriminator.v0.errors.FailedRequest(r.status, s"Unsupported response code[${r.status}]. Expected: 200, 404")
        }
      }

      override def post(
        user: io.apibuilder.example.union.types.discriminator.v0.models.User,
        requestHeaders: Seq[(String, String)] = Nil
      )(implicit ec: scala.concurrent.ExecutionContext): scala.concurrent.Future[io.apibuilder.example.union.types.discriminator.v0.models.User] = {
        val payload = play.api.libs.json.Json.toJson(user)

        _executeRequest("POST", s"/users", body = Some(payload), requestHeaders = requestHeaders).map {
          case r if r.status == 201 => _root_.io.apibuilder.example.union.types.discriminator.v0.Client.parseJson("io.apibuilder.example.union.types.discriminator.v0.models.User", r, _.validate[io.apibuilder.example.union.types.discriminator.v0.models.User])
          case r => throw io.apibuilder.example.union.types.discriminator.v0.errors.FailedRequest(r.status, s"Unsupported response code[${r.status}]. Expected: 201")
        }
      }
    }

    def _requestHolder(path: String): play.api.libs.ws.WSRequest = {
      import play.api.Play.current

      val holder = play.api.libs.ws.WS.url(baseUrl + path).withHeaders(
        "User-Agent" -> Constants.UserAgent,
        "X-Apidoc-Version" -> Constants.Version,
        "X-Apidoc-Version-Major" -> Constants.VersionMajor.toString
      ).withHeaders(defaultHeaders : _*)
      auth.fold(holder) {
        case Authorization.Basic(username, password) => {
          holder.withAuth(username, password.getOrElse(""), play.api.libs.ws.WSAuthScheme.BASIC)
        }
        case a => sys.error("Invalid authorization scheme[" + a.getClass + "]")
      }
    }

    def _logRequest(method: String, req: play.api.libs.ws.WSRequest): play.api.libs.ws.WSRequest = {
      val queryComponents = for {
        (name, values) <- req.queryString
        value <- values
      } yield s"$name=$value"
      val url = s"${req.url}${queryComponents.mkString("?", "&", "")}"
      auth.fold(logger.info(s"curl -X $method '$url'")) { _ =>
        logger.info(s"curl -X $method -u '[REDACTED]:' '$url'")
      }
      req
    }

    def _executeRequest(
      method: String,
      path: String,
      queryParameters: Seq[(String, String)] = Nil,
      requestHeaders: Seq[(String, String)] = Nil,
      body: Option[play.api.libs.json.JsValue] = None
    ): scala.concurrent.Future[play.api.libs.ws.WSResponse] = {
      method.toUpperCase match {
        case "GET" => {
          _logRequest("GET", _requestHolder(path).withHeaders(requestHeaders:_*).withQueryString(queryParameters:_*)).get()
        }
        case "POST" => {
          _logRequest("POST", _requestHolder(path).withHeaders(_withJsonContentType(requestHeaders):_*).withQueryString(queryParameters:_*)).post(body.getOrElse(play.api.libs.json.Json.obj()))
        }
        case "PUT" => {
          _logRequest("PUT", _requestHolder(path).withHeaders(_withJsonContentType(requestHeaders):_*).withQueryString(queryParameters:_*)).put(body.getOrElse(play.api.libs.json.Json.obj()))
        }
        case "PATCH" => {
          _logRequest("PATCH", _requestHolder(path).withHeaders(requestHeaders:_*).withQueryString(queryParameters:_*)).patch(body.getOrElse(play.api.libs.json.Json.obj()))
        }
        case "DELETE" => {
          _logRequest("DELETE", _requestHolder(path).withHeaders(requestHeaders:_*).withQueryString(queryParameters:_*)).delete()
        }
         case "HEAD" => {
          _logRequest("HEAD", _requestHolder(path).withHeaders(requestHeaders:_*).withQueryString(queryParameters:_*)).head()
        }
         case "OPTIONS" => {
          _logRequest("OPTIONS", _requestHolder(path).withHeaders(requestHeaders:_*).withQueryString(queryParameters:_*)).options()
        }
        case _ => {
          _logRequest(method, _requestHolder(path).withHeaders(requestHeaders:_*).withQueryString(queryParameters:_*))
          sys.error("Unsupported method[%s]".format(method))
        }
      }
    }

    /**
     * Adds a Content-Type: application/json header unless the specified requestHeaders
     * already contain a Content-Type header
     */
    def _withJsonContentType(headers: Seq[(String, String)]): Seq[(String, String)] = {
      headers.find { _._1.toUpperCase == "CONTENT-TYPE" } match {
        case None => headers ++ Seq(("Content-Type" -> "application/json; charset=UTF-8"))
        case Some(_) => headers
      }
    }

  }

  object Client {

    def parseJson[T](
      className: String,
      r: play.api.libs.ws.WSResponse,
      f: (play.api.libs.json.JsValue => play.api.libs.json.JsResult[T])
    ): T = {
      f(play.api.libs.json.Json.parse(r.body)) match {
        case play.api.libs.json.JsSuccess(x, _) => x
        case play.api.libs.json.JsError(errors) => {
          throw io.apibuilder.example.union.types.discriminator.v0.errors.FailedRequest(r.status, s"Invalid json for class[" + className + "]: " + errors.mkString(" "))
        }
      }
    }

  }

  sealed trait Authorization extends _root_.scala.Product with _root_.scala.Serializable
  object Authorization {
    final case class Basic(username: String, password: Option[String] = None) extends Authorization
  }

  package interfaces {

    trait Client {
      def baseUrl: String
      def users: io.apibuilder.example.union.types.discriminator.v0.Users
    }

  }

  trait Users {
    def get(
      requestHeaders: Seq[(String, String)] = Nil
    )(implicit ec: scala.concurrent.ExecutionContext): scala.concurrent.Future[Seq[io.apibuilder.example.union.types.discriminator.v0.models.User]]

    def getById(
      id: String,
      requestHeaders: Seq[(String, String)] = Nil
    )(implicit ec: scala.concurrent.ExecutionContext): scala.concurrent.Future[io.apibuilder.example.union.types.discriminator.v0.models.User]

    def post(
      user: io.apibuilder.example.union.types.discriminator.v0.models.User,
      requestHeaders: Seq[(String, String)] = Nil
    )(implicit ec: scala.concurrent.ExecutionContext): scala.concurrent.Future[io.apibuilder.example.union.types.discriminator.v0.models.User]
  }

  package errors {

    import io.apibuilder.example.union.types.discriminator.v0.models.json._

    final case class UnitResponse(status: Int) extends Exception(s"HTTP $status")

    final case class FailedRequest(responseCode: Int, message: String, requestUri: Option[_root_.java.net.URI] = None) extends _root_.java.lang.Exception(s"HTTP $responseCode: $message")

  }

}