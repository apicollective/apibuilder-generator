implicit def convertMemberTypeToString(value: test.apidoc.apidoctest.v0.models.MemberType) = value.toString

implicit def convertRoleTypeToString(value: test.apidoc.apidoctest.v0.models.RoleType) = value.toString

implicit def jsonReadsApiDocTestUserType: play.api.libs.json.Reads[UserType] = {
  (
    (__ \ "member_type").read(jsonReadsApiDocTestMemberType).asInstanceOf[play.api.libs.json.Reads[UserType]]
    orElse
    (__ \ "role_type").read(jsonReadsApiDocTestRoleType).asInstanceOf[play.api.libs.json.Reads[UserType]]
    orElse
    play.api.libs.json.Reads(jsValue => play.api.libs.json.JsSuccess(test.apidoc.apidoctest.v0.models.UserTypeUndefinedType(jsValue.toString))).asInstanceOf[play.api.libs.json.Reads[UserType]]
  )
}

implicit def jsonWritesApiDocTestUserType: play.api.libs.json.Writes[UserType] = new play.api.libs.json.Writes[UserType] {
  def writes(obj: UserType) = obj match {
    case x: test.apidoc.apidoctest.v0.models.MemberType => play.api.libs.json.Json.obj("member_type" -> x)
    case x: test.apidoc.apidoctest.v0.models.RoleType => play.api.libs.json.Json.obj("role_type" -> x)
    case x: test.apidoc.apidoctest.v0.models.UserTypeUndefinedType => sys.error(s"The type[test.apidoc.apidoctest.v0.models.UserTypeUndefinedType] should never be serialized")
  }
}