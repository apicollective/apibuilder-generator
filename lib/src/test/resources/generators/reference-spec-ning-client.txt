/**
 * Generated by API Builder - https://www.apibuilder.io
 * Service version: 0.3.47
 */
package io.apibuilder.reference.api.v0.models {

  /**
   * A model with a lot of fields.
   */
  case class Big(
    f1: String,
    f2: String,
    f3: String,
    f4: String,
    f5: String,
    f6: String,
    f7: String,
    f8: String,
    f9: String,
    f10: String,
    f11: String,
    f12: String,
    f13: String,
    f14: String,
    f15: String,
    f16: String,
    f17: String,
    f18: String,
    f19: String,
    f20: String,
    f21: String
  )

  case class Echo(
    value: String
  )

  /**
   * Models an API error.
   */
  case class Error(
    code: String,
    message: String
  )

  /**
   * A group of users in an organization.
   */
  case class Group(
    members: Seq[io.apibuilder.reference.api.v0.models.User]
  )

  case class Member(
    guid: _root_.java.util.UUID,
    organization: io.apibuilder.reference.api.v0.models.Organization,
    user: io.apibuilder.reference.api.v0.models.User,
    role: String
  )

  case class Organization(
    guid: _root_.java.util.UUID,
    name: String
  )

  case class User(
    guid: _root_.java.util.UUID,
    email: String,
    active: Boolean,
    ageGroup: io.apibuilder.reference.api.v0.models.AgeGroup,
    tags: _root_.scala.Option[Map[String, String]] = None
  )

  case class UserList(
    users: Seq[io.apibuilder.reference.api.v0.models.User]
  )

  sealed trait AgeGroup extends _root_.scala.Product with _root_.scala.Serializable

  object AgeGroup {

    /**
     * under 18
     */
    case object Youth extends AgeGroup { override def toString = "Youth" }
    /**
     * 18 and over
     */
    case object Adult extends AgeGroup { override def toString = "Adult" }

    /**
     * UNDEFINED captures values that are sent either in error or
     * that were added by the server after this library was
     * generated. We want to make it easy and obvious for users of
     * this library to handle this case gracefully.
     *
     * We use all CAPS for the variable name to avoid collisions
     * with the camel cased values above.
     */
    case class UNDEFINED(override val toString: String) extends AgeGroup

    /**
     * all returns a list of all the valid, known values. We use
     * lower case to avoid collisions with the camel cased values
     * above.
     */
    val all: scala.List[AgeGroup] = scala.List(Youth, Adult)

    private[this]
    val byName: Map[String, AgeGroup] = all.map(x => x.toString.toLowerCase -> x).toMap

    def apply(value: String): AgeGroup = fromString(value).getOrElse(UNDEFINED(value))

    def fromString(value: String): _root_.scala.Option[AgeGroup] = byName.get(value.toLowerCase)

  }

}

package io.apibuilder.reference.api.v0.models {

  package object json {
    import play.api.libs.json.__
    import play.api.libs.json.JsString
    import play.api.libs.json.Writes
    import play.api.libs.functional.syntax._
    import io.apibuilder.reference.api.v0.models.json._

    private[v0] implicit val jsonReadsUUID = __.read[String].map(java.util.UUID.fromString)

    private[v0] implicit val jsonWritesUUID = new Writes[java.util.UUID] {
      def writes(x: java.util.UUID) = JsString(x.toString)
    }

    private[v0] implicit val jsonReadsJodaDateTime = __.read[String].map { str =>
      import org.joda.time.format.ISODateTimeFormat.dateTimeParser
      dateTimeParser.parseDateTime(str)
    }

    private[v0] implicit val jsonWritesJodaDateTime = new Writes[org.joda.time.DateTime] {
      def writes(x: org.joda.time.DateTime) = {
        import org.joda.time.format.ISODateTimeFormat.dateTime
        val str = dateTime.print(x)
        JsString(str)
      }
    }

    private[v0] implicit val jsonReadsJodaLocalDate = __.read[String].map { str =>
      import org.joda.time.format.ISODateTimeFormat.dateParser
      dateParser.parseLocalDate(str)
    }

    private[v0] implicit val jsonWritesJodaLocalDate = new Writes[org.joda.time.LocalDate] {
      def writes(x: org.joda.time.LocalDate) = {
        import org.joda.time.format.ISODateTimeFormat.date
        val str = date.print(x)
        JsString(str)
      }
    }

    implicit val jsonReadsApidocReferenceApiAgeGroup = new play.api.libs.json.Reads[io.apibuilder.reference.api.v0.models.AgeGroup] {
      def reads(js: play.api.libs.json.JsValue): play.api.libs.json.JsResult[io.apibuilder.reference.api.v0.models.AgeGroup] = {
        js match {
          case v: play.api.libs.json.JsString => play.api.libs.json.JsSuccess(io.apibuilder.reference.api.v0.models.AgeGroup(v.value))
          case _ => {
            (js \ "value").validate[String] match {
              case play.api.libs.json.JsSuccess(v, _) => play.api.libs.json.JsSuccess(io.apibuilder.reference.api.v0.models.AgeGroup(v))
              case err: play.api.libs.json.JsError => err
            }
          }
        }
      }
    }

    def jsonWritesApidocReferenceApiAgeGroup(obj: io.apibuilder.reference.api.v0.models.AgeGroup) = {
      play.api.libs.json.JsString(obj.toString)
    }

    def jsObjectAgeGroup(obj: io.apibuilder.reference.api.v0.models.AgeGroup) = {
      play.api.libs.json.Json.obj("value" -> play.api.libs.json.JsString(obj.toString))
    }

    implicit def jsonWritesApidocReferenceApiAgeGroup: play.api.libs.json.Writes[AgeGroup] = {
      new play.api.libs.json.Writes[io.apibuilder.reference.api.v0.models.AgeGroup] {
        def writes(obj: io.apibuilder.reference.api.v0.models.AgeGroup) = {
          jsonWritesApidocReferenceApiAgeGroup(obj)
        }
      }
    }

    implicit def jsonReadsApidocReferenceApiBig: play.api.libs.json.Reads[Big] = {
      (
        (__ \ "f1").read[String] and
        (__ \ "f2").read[String] and
        (__ \ "f3").read[String] and
        (__ \ "f4").read[String] and
        (__ \ "f5").read[String] and
        (__ \ "f6").read[String] and
        (__ \ "f7").read[String] and
        (__ \ "f8").read[String] and
        (__ \ "f9").read[String] and
        (__ \ "f10").read[String] and
        (__ \ "f11").read[String] and
        (__ \ "f12").read[String] and
        (__ \ "f13").read[String] and
        (__ \ "f14").read[String] and
        (__ \ "f15").read[String] and
        (__ \ "f16").read[String] and
        (__ \ "f17").read[String] and
        (__ \ "f18").read[String] and
        (__ \ "f19").read[String] and
        (__ \ "f20").read[String] and
        (__ \ "f21").read[String]
      )(Big.apply _)
    }

    def jsObjectBig(obj: io.apibuilder.reference.api.v0.models.Big): play.api.libs.json.JsObject = {
      play.api.libs.json.Json.obj(
        "f1" -> play.api.libs.json.JsString(obj.f1),
        "f2" -> play.api.libs.json.JsString(obj.f2),
        "f3" -> play.api.libs.json.JsString(obj.f3),
        "f4" -> play.api.libs.json.JsString(obj.f4),
        "f5" -> play.api.libs.json.JsString(obj.f5),
        "f6" -> play.api.libs.json.JsString(obj.f6),
        "f7" -> play.api.libs.json.JsString(obj.f7),
        "f8" -> play.api.libs.json.JsString(obj.f8),
        "f9" -> play.api.libs.json.JsString(obj.f9),
        "f10" -> play.api.libs.json.JsString(obj.f10),
        "f11" -> play.api.libs.json.JsString(obj.f11),
        "f12" -> play.api.libs.json.JsString(obj.f12),
        "f13" -> play.api.libs.json.JsString(obj.f13),
        "f14" -> play.api.libs.json.JsString(obj.f14),
        "f15" -> play.api.libs.json.JsString(obj.f15),
        "f16" -> play.api.libs.json.JsString(obj.f16),
        "f17" -> play.api.libs.json.JsString(obj.f17),
        "f18" -> play.api.libs.json.JsString(obj.f18),
        "f19" -> play.api.libs.json.JsString(obj.f19),
        "f20" -> play.api.libs.json.JsString(obj.f20),
        "f21" -> play.api.libs.json.JsString(obj.f21)
      )
    }

    implicit def jsonWritesApidocReferenceApiBig: play.api.libs.json.Writes[Big] = {
      new play.api.libs.json.Writes[io.apibuilder.reference.api.v0.models.Big] {
        def writes(obj: io.apibuilder.reference.api.v0.models.Big) = {
          jsObjectBig(obj)
        }
      }
    }

    implicit def jsonReadsApidocReferenceApiEcho: play.api.libs.json.Reads[Echo] = {
      (__ \ "value").read[String].map { x => new Echo(value = x) }
    }

    def jsObjectEcho(obj: io.apibuilder.reference.api.v0.models.Echo): play.api.libs.json.JsObject = {
      play.api.libs.json.Json.obj(
        "value" -> play.api.libs.json.JsString(obj.value)
      )
    }

    implicit def jsonWritesApidocReferenceApiEcho: play.api.libs.json.Writes[Echo] = {
      new play.api.libs.json.Writes[io.apibuilder.reference.api.v0.models.Echo] {
        def writes(obj: io.apibuilder.reference.api.v0.models.Echo) = {
          jsObjectEcho(obj)
        }
      }
    }

    implicit def jsonReadsApidocReferenceApiError: play.api.libs.json.Reads[Error] = {
      (
        (__ \ "code").read[String] and
        (__ \ "message").read[String]
      )(Error.apply _)
    }

    def jsObjectError(obj: io.apibuilder.reference.api.v0.models.Error): play.api.libs.json.JsObject = {
      play.api.libs.json.Json.obj(
        "code" -> play.api.libs.json.JsString(obj.code),
        "message" -> play.api.libs.json.JsString(obj.message)
      )
    }

    implicit def jsonWritesApidocReferenceApiError: play.api.libs.json.Writes[Error] = {
      new play.api.libs.json.Writes[io.apibuilder.reference.api.v0.models.Error] {
        def writes(obj: io.apibuilder.reference.api.v0.models.Error) = {
          jsObjectError(obj)
        }
      }
    }

    implicit def jsonReadsApidocReferenceApiGroup: play.api.libs.json.Reads[Group] = {
      (__ \ "members").read[Seq[io.apibuilder.reference.api.v0.models.User]].map { x => new Group(members = x) }
    }

    def jsObjectGroup(obj: io.apibuilder.reference.api.v0.models.Group): play.api.libs.json.JsObject = {
      play.api.libs.json.Json.obj(
        "members" -> play.api.libs.json.Json.toJson(obj.members)
      )
    }

    implicit def jsonWritesApidocReferenceApiGroup: play.api.libs.json.Writes[Group] = {
      new play.api.libs.json.Writes[io.apibuilder.reference.api.v0.models.Group] {
        def writes(obj: io.apibuilder.reference.api.v0.models.Group) = {
          jsObjectGroup(obj)
        }
      }
    }

    implicit def jsonReadsApidocReferenceApiMember: play.api.libs.json.Reads[Member] = {
      (
        (__ \ "guid").read[_root_.java.util.UUID] and
        (__ \ "organization").read[io.apibuilder.reference.api.v0.models.Organization] and
        (__ \ "user").read[io.apibuilder.reference.api.v0.models.User] and
        (__ \ "role").read[String]
      )(Member.apply _)
    }

    def jsObjectMember(obj: io.apibuilder.reference.api.v0.models.Member): play.api.libs.json.JsObject = {
      play.api.libs.json.Json.obj(
        "guid" -> play.api.libs.json.JsString(obj.guid.toString),
        "organization" -> jsObjectOrganization(obj.organization),
        "user" -> jsObjectUser(obj.user),
        "role" -> play.api.libs.json.JsString(obj.role)
      )
    }

    implicit def jsonWritesApidocReferenceApiMember: play.api.libs.json.Writes[Member] = {
      new play.api.libs.json.Writes[io.apibuilder.reference.api.v0.models.Member] {
        def writes(obj: io.apibuilder.reference.api.v0.models.Member) = {
          jsObjectMember(obj)
        }
      }
    }

    implicit def jsonReadsApidocReferenceApiOrganization: play.api.libs.json.Reads[Organization] = {
      (
        (__ \ "guid").read[_root_.java.util.UUID] and
        (__ \ "name").read[String]
      )(Organization.apply _)
    }

    def jsObjectOrganization(obj: io.apibuilder.reference.api.v0.models.Organization): play.api.libs.json.JsObject = {
      play.api.libs.json.Json.obj(
        "guid" -> play.api.libs.json.JsString(obj.guid.toString),
        "name" -> play.api.libs.json.JsString(obj.name)
      )
    }

    implicit def jsonWritesApidocReferenceApiOrganization: play.api.libs.json.Writes[Organization] = {
      new play.api.libs.json.Writes[io.apibuilder.reference.api.v0.models.Organization] {
        def writes(obj: io.apibuilder.reference.api.v0.models.Organization) = {
          jsObjectOrganization(obj)
        }
      }
    }

    implicit def jsonReadsApidocReferenceApiUser: play.api.libs.json.Reads[User] = {
      (
        (__ \ "guid").read[_root_.java.util.UUID] and
        (__ \ "email").read[String] and
        (__ \ "active").read[Boolean] and
        (__ \ "age_group").read[io.apibuilder.reference.api.v0.models.AgeGroup] and
        (__ \ "tags").readNullable[Map[String, String]]
      )(User.apply _)
    }

    def jsObjectUser(obj: io.apibuilder.reference.api.v0.models.User): play.api.libs.json.JsObject = {
      play.api.libs.json.Json.obj(
        "guid" -> play.api.libs.json.JsString(obj.guid.toString),
        "email" -> play.api.libs.json.JsString(obj.email),
        "active" -> play.api.libs.json.JsBoolean(obj.active),
        "age_group" -> play.api.libs.json.JsString(obj.ageGroup.toString)
      ) ++ (obj.tags match {
        case None => play.api.libs.json.Json.obj()
        case Some(x) => play.api.libs.json.Json.obj("tags" -> play.api.libs.json.Json.toJson(x))
      })
    }

    implicit def jsonWritesApidocReferenceApiUser: play.api.libs.json.Writes[User] = {
      new play.api.libs.json.Writes[io.apibuilder.reference.api.v0.models.User] {
        def writes(obj: io.apibuilder.reference.api.v0.models.User) = {
          jsObjectUser(obj)
        }
      }
    }

    implicit def jsonReadsApidocReferenceApiUserList: play.api.libs.json.Reads[UserList] = {
      (__ \ "users").read[Seq[io.apibuilder.reference.api.v0.models.User]].map { x => new UserList(users = x) }
    }

    def jsObjectUserList(obj: io.apibuilder.reference.api.v0.models.UserList): play.api.libs.json.JsObject = {
      play.api.libs.json.Json.obj(
        "users" -> play.api.libs.json.Json.toJson(obj.users)
      )
    }

    implicit def jsonWritesApidocReferenceApiUserList: play.api.libs.json.Writes[UserList] = {
      new play.api.libs.json.Writes[io.apibuilder.reference.api.v0.models.UserList] {
        def writes(obj: io.apibuilder.reference.api.v0.models.UserList) = {
          jsObjectUserList(obj)
        }
      }
    }
  }
}



package io.apibuilder.reference.api.v0 {
  import com.ning.http.client.{AsyncCompletionHandler, AsyncHttpClient, AsyncHttpClientConfig, Realm, Request, RequestBuilder, Response}

  object Constants {

    val BaseUrl = "http://localhost:9000"
    val Namespace = "io.apibuilder.reference.api.v0"
    val UserAgent = "apidoc:play_2x_client:unknown"
    val Version = "0.3.47"
    val VersionMajor = 0

  }

  class Client(
    val baseUrl: String = "http://localhost:9000",
    auth: scala.Option[io.apibuilder.reference.api.v0.Authorization] = None,
    defaultHeaders: Seq[(String, String)] = Nil,
    asyncHttpClient: AsyncHttpClient = Client.defaultAsyncHttpClient
  ) extends interfaces.Client {
    import org.slf4j.{Logger, LoggerFactory}
    import io.apibuilder.reference.api.v0.models.json._

    def closeAsyncHttpClient(): Unit = {
      asyncHttpClient.close()
    }

    val logger = LoggerFactory.getLogger(getClass)

    def echoes: Echoes = Echoes

    def groups: Groups = Groups

    def members: Members = Members

    def organizations: Organizations = Organizations

    def users: Users = Users

    object Echoes extends Echoes {
      override def get(
        foo: _root_.scala.Option[String] = None,
        optionalMessages: _root_.scala.Option[Seq[String]] = None,
        requiredMessages: Seq[String],
        requestHeaders: Seq[(String, String)] = Nil
      )(implicit ec: scala.concurrent.ExecutionContext): scala.concurrent.Future[Unit] = {
        val queryParameters = Seq(
          foo.map("foo" -> _)
        ).flatten ++
          optionalMessages.getOrElse(Nil).map("optional_messages" -> _) ++
          requiredMessages.map("required_messages" -> _)

        _executeRequest("GET", s"/echoes", queryParameters = queryParameters, requestHeaders = requestHeaders).map {
          case r if r.getStatusCode == 204 => ()
          case r => throw io.apibuilder.reference.api.v0.errors.FailedRequest(r.getStatusCode, s"Unsupported response code[${r.getStatusCode}]. Expected: 204", requestUri = Some(r.getUri))
        }
      }

      override def getArraysOnly(
        optionalMessages: _root_.scala.Option[Seq[String]] = None,
        requiredMessages: Seq[String],
        requestHeaders: Seq[(String, String)] = Nil
      )(implicit ec: scala.concurrent.ExecutionContext): scala.concurrent.Future[Unit] = {
        val queryParameters = optionalMessages.getOrElse(Nil).map("optional_messages" -> _) ++
          requiredMessages.map("required_messages" -> _)

        _executeRequest("GET", s"/echoes/arrays-only", queryParameters = queryParameters, requestHeaders = requestHeaders).map {
          case r if r.getStatusCode == 204 => ()
          case r => throw io.apibuilder.reference.api.v0.errors.FailedRequest(r.getStatusCode, s"Unsupported response code[${r.getStatusCode}]. Expected: 204", requestUri = Some(r.getUri))
        }
      }
    }

    object Groups extends Groups {
      override def getByOrganization(
        organization: _root_.java.util.UUID,
        requestHeaders: Seq[(String, String)] = Nil
      )(implicit ec: scala.concurrent.ExecutionContext): scala.concurrent.Future[Map[String, Seq[io.apibuilder.reference.api.v0.models.User]]] = {
        _executeRequest("GET", s"/groups/${organization}", requestHeaders = requestHeaders).map {
          case r if r.getStatusCode == 200 => _root_.io.apibuilder.reference.api.v0.Client.parseJson("Map[String, Seq[io.apibuilder.reference.api.v0.models.User]]", r, _.validate[Map[String, Seq[io.apibuilder.reference.api.v0.models.User]]])
          case r => throw io.apibuilder.reference.api.v0.errors.FailedRequest(r.getStatusCode, s"Unsupported response code[${r.getStatusCode}]. Expected: 200", requestUri = Some(r.getUri))
        }
      }
    }

    object Members extends Members {
      override def post(
        guid: _root_.java.util.UUID,
        organization: _root_.java.util.UUID,
        user: _root_.java.util.UUID,
        role: String,
        requestHeaders: Seq[(String, String)] = Nil
      )(implicit ec: scala.concurrent.ExecutionContext): scala.concurrent.Future[io.apibuilder.reference.api.v0.models.Member] = {
        val payload = play.api.libs.json.Json.obj(
          "guid" -> play.api.libs.json.Json.toJson(guid),
          "organization" -> play.api.libs.json.Json.toJson(organization),
          "user" -> play.api.libs.json.Json.toJson(user),
          "role" -> play.api.libs.json.Json.toJson(role)
        )

        _executeRequest("POST", s"/members", body = Some(payload), requestHeaders = requestHeaders).map {
          case r if r.getStatusCode == 201 => _root_.io.apibuilder.reference.api.v0.Client.parseJson("io.apibuilder.reference.api.v0.models.Member", r, _.validate[io.apibuilder.reference.api.v0.models.Member])
          case r if r.getStatusCode == 409 => throw io.apibuilder.reference.api.v0.errors.ErrorsResponse(r)
          case r => throw io.apibuilder.reference.api.v0.errors.FailedRequest(r.getStatusCode, s"Unsupported response code[${r.getStatusCode}]. Expected: 201, 409", requestUri = Some(r.getUri))
        }
      }

      override def get(
        guid: _root_.scala.Option[_root_.java.util.UUID] = None,
        organizationGuid: _root_.scala.Option[_root_.java.util.UUID] = None,
        userGuid: _root_.scala.Option[_root_.java.util.UUID] = None,
        role: _root_.scala.Option[String] = None,
        requestHeaders: Seq[(String, String)] = Nil
      )(implicit ec: scala.concurrent.ExecutionContext): scala.concurrent.Future[Seq[io.apibuilder.reference.api.v0.models.Member]] = {
        val queryParameters = Seq(
          guid.map("guid" -> _.toString),
          organizationGuid.map("organization_guid" -> _.toString),
          userGuid.map("user_guid" -> _.toString),
          role.map("role" -> _)
        ).flatten

        _executeRequest("GET", s"/members", queryParameters = queryParameters, requestHeaders = requestHeaders).map {
          case r if r.getStatusCode == 200 => _root_.io.apibuilder.reference.api.v0.Client.parseJson("Seq[io.apibuilder.reference.api.v0.models.Member]", r, _.validate[Seq[io.apibuilder.reference.api.v0.models.Member]])
          case r => throw io.apibuilder.reference.api.v0.errors.FailedRequest(r.getStatusCode, s"Unsupported response code[${r.getStatusCode}]. Expected: 200", requestUri = Some(r.getUri))
        }
      }

      override def getByOrganization(
        organization: _root_.java.util.UUID,
        requestHeaders: Seq[(String, String)] = Nil
      )(implicit ec: scala.concurrent.ExecutionContext): scala.concurrent.Future[Seq[io.apibuilder.reference.api.v0.models.Member]] = {
        _executeRequest("GET", s"/members/${organization}", requestHeaders = requestHeaders).map {
          case r if r.getStatusCode == 200 => _root_.io.apibuilder.reference.api.v0.Client.parseJson("Seq[io.apibuilder.reference.api.v0.models.Member]", r, _.validate[Seq[io.apibuilder.reference.api.v0.models.Member]])
          case r => throw io.apibuilder.reference.api.v0.errors.FailedRequest(r.getStatusCode, s"Unsupported response code[${r.getStatusCode}]. Expected: 200", requestUri = Some(r.getUri))
        }
      }

      override def postMembersBulkByOrganization(
        organization: _root_.java.util.UUID,
        members: Seq[io.apibuilder.reference.api.v0.models.Member],
        requestHeaders: Seq[(String, String)] = Nil
      )(implicit ec: scala.concurrent.ExecutionContext): scala.concurrent.Future[Seq[io.apibuilder.reference.api.v0.models.Member]] = {
        val payload = play.api.libs.json.Json.toJson(members)

        _executeRequest("POST", s"/members/${organization}/members_bulk", body = Some(payload), requestHeaders = requestHeaders).map {
          case r if r.getStatusCode == 200 => _root_.io.apibuilder.reference.api.v0.Client.parseJson("Seq[io.apibuilder.reference.api.v0.models.Member]", r, _.validate[Seq[io.apibuilder.reference.api.v0.models.Member]])
          case r => throw io.apibuilder.reference.api.v0.errors.FailedRequest(r.getStatusCode, s"Unsupported response code[${r.getStatusCode}]. Expected: 200", requestUri = Some(r.getUri))
        }
      }
    }

    object Organizations extends Organizations {
      override def post(
        organization: io.apibuilder.reference.api.v0.models.Organization,
        requestHeaders: Seq[(String, String)] = Nil
      )(implicit ec: scala.concurrent.ExecutionContext): scala.concurrent.Future[io.apibuilder.reference.api.v0.models.Organization] = {
        val payload = play.api.libs.json.Json.obj(
          "organization" -> play.api.libs.json.Json.toJson(organization)
        )

        _executeRequest("POST", s"/organizations", body = Some(payload), requestHeaders = requestHeaders).map {
          case r if r.getStatusCode == 201 => _root_.io.apibuilder.reference.api.v0.Client.parseJson("io.apibuilder.reference.api.v0.models.Organization", r, _.validate[io.apibuilder.reference.api.v0.models.Organization])
          case r if r.getStatusCode == 409 => throw io.apibuilder.reference.api.v0.errors.ErrorsResponse(r)
          case r => throw io.apibuilder.reference.api.v0.errors.FailedRequest(r.getStatusCode, s"Unsupported response code[${r.getStatusCode}]. Expected: 201, 409", requestUri = Some(r.getUri))
        }
      }

      override def get(
        guid: _root_.scala.Option[_root_.java.util.UUID] = None,
        name: _root_.scala.Option[String] = None,
        requestHeaders: Seq[(String, String)] = Nil
      )(implicit ec: scala.concurrent.ExecutionContext): scala.concurrent.Future[Seq[io.apibuilder.reference.api.v0.models.Organization]] = {
        val queryParameters = Seq(
          guid.map("guid" -> _.toString),
          name.map("name" -> _)
        ).flatten

        _executeRequest("GET", s"/organizations", queryParameters = queryParameters, requestHeaders = requestHeaders).map {
          case r if r.getStatusCode == 200 => _root_.io.apibuilder.reference.api.v0.Client.parseJson("Seq[io.apibuilder.reference.api.v0.models.Organization]", r, _.validate[Seq[io.apibuilder.reference.api.v0.models.Organization]])
          case r => throw io.apibuilder.reference.api.v0.errors.FailedRequest(r.getStatusCode, s"Unsupported response code[${r.getStatusCode}]. Expected: 200", requestUri = Some(r.getUri))
        }
      }

      override def getByGuid(
        guid: _root_.java.util.UUID,
        requestHeaders: Seq[(String, String)] = Nil
      )(implicit ec: scala.concurrent.ExecutionContext): scala.concurrent.Future[io.apibuilder.reference.api.v0.models.Organization] = {
        _executeRequest("GET", s"/organizations/${guid}", requestHeaders = requestHeaders).map {
          case r if r.getStatusCode == 200 => _root_.io.apibuilder.reference.api.v0.Client.parseJson("io.apibuilder.reference.api.v0.models.Organization", r, _.validate[io.apibuilder.reference.api.v0.models.Organization])
          case r => throw io.apibuilder.reference.api.v0.errors.FailedRequest(r.getStatusCode, s"Unsupported response code[${r.getStatusCode}]. Expected: 200", requestUri = Some(r.getUri))
        }
      }
    }

    object Users extends Users {
      override def post(
        guid: _root_.java.util.UUID,
        email: String,
        active: Boolean,
        requestHeaders: Seq[(String, String)] = Nil
      )(implicit ec: scala.concurrent.ExecutionContext): scala.concurrent.Future[io.apibuilder.reference.api.v0.models.User] = {
        val payload = play.api.libs.json.Json.obj(
          "guid" -> play.api.libs.json.Json.toJson(guid),
          "email" -> play.api.libs.json.Json.toJson(email),
          "active" -> play.api.libs.json.Json.toJson(active)
        )

        _executeRequest("POST", s"/users", body = Some(payload), requestHeaders = requestHeaders).map {
          case r if r.getStatusCode == 201 => _root_.io.apibuilder.reference.api.v0.Client.parseJson("io.apibuilder.reference.api.v0.models.User", r, _.validate[io.apibuilder.reference.api.v0.models.User])
          case r if r.getStatusCode == 409 => throw io.apibuilder.reference.api.v0.errors.ErrorsResponse(r)
          case r => throw io.apibuilder.reference.api.v0.errors.FailedRequest(r.getStatusCode, s"Unsupported response code[${r.getStatusCode}]. Expected: 201, 409", requestUri = Some(r.getUri))
        }
      }

      override def get(
        guid: _root_.scala.Option[_root_.java.util.UUID] = None,
        organizationGuids: _root_.scala.Option[Seq[Long]] = None,
        ageGroup: _root_.scala.Option[io.apibuilder.reference.api.v0.models.AgeGroup] = None,
        email: _root_.scala.Option[String] = None,
        active: Boolean = true,
        requestHeaders: Seq[(String, String)] = Nil
      )(implicit ec: scala.concurrent.ExecutionContext): scala.concurrent.Future[Seq[io.apibuilder.reference.api.v0.models.User]] = {
        val queryParameters = Seq(
          guid.map("guid" -> _.toString),
          ageGroup.map("age_group" -> _.toString),
          email.map("email" -> _),
          Some("active" -> active.toString)
        ).flatten ++
          organizationGuids.getOrElse(Nil).map("organization_guids" -> _.toString)

        _executeRequest("GET", s"/users", queryParameters = queryParameters, requestHeaders = requestHeaders).map {
          case r if r.getStatusCode == 200 => _root_.io.apibuilder.reference.api.v0.Client.parseJson("Seq[io.apibuilder.reference.api.v0.models.User]", r, _.validate[Seq[io.apibuilder.reference.api.v0.models.User]])
          case r => throw io.apibuilder.reference.api.v0.errors.FailedRequest(r.getStatusCode, s"Unsupported response code[${r.getStatusCode}]. Expected: 200", requestUri = Some(r.getUri))
        }
      }

      override def getByAgeGroup(
        ageGroup: io.apibuilder.reference.api.v0.models.AgeGroup,
        requestHeaders: Seq[(String, String)] = Nil
      )(implicit ec: scala.concurrent.ExecutionContext): scala.concurrent.Future[Seq[io.apibuilder.reference.api.v0.models.User]] = {
        _executeRequest("GET", s"/users/${_root_.io.apibuilder.reference.api.v0.PathSegment.encode(ageGroup.toString, "UTF-8")}", requestHeaders = requestHeaders).map {
          case r if r.getStatusCode == 200 => _root_.io.apibuilder.reference.api.v0.Client.parseJson("Seq[io.apibuilder.reference.api.v0.models.User]", r, _.validate[Seq[io.apibuilder.reference.api.v0.models.User]])
          case r => throw io.apibuilder.reference.api.v0.errors.FailedRequest(r.getStatusCode, s"Unsupported response code[${r.getStatusCode}]. Expected: 200", requestUri = Some(r.getUri))
        }
      }

      override def postNoop(
        requestHeaders: Seq[(String, String)] = Nil
      )(implicit ec: scala.concurrent.ExecutionContext): scala.concurrent.Future[Unit] = {
        _executeRequest("POST", s"/users/noop", requestHeaders = requestHeaders).map {
          case r if r.getStatusCode == 200 => ()
          case r => throw io.apibuilder.reference.api.v0.errors.FailedRequest(r.getStatusCode, s"Unsupported response code[${r.getStatusCode}]. Expected: 200", requestUri = Some(r.getUri))
        }
      }
    }

    def _logRequest(request: Request): Unit = {
      logger.info("_logRequest: " + request)
    }

    def _requestBuilder(method: String, path: String, requestHeaders: Seq[(String, String)]): RequestBuilder = {
      val builder = new RequestBuilder(method)
        .setUrl(baseUrl + path)
        .addHeader("User-Agent", Constants.UserAgent)
        .addHeader("X-Apidoc-Version", Constants.Version)
        .addHeader("X-Apidoc-Version-Major", Constants.VersionMajor.toString)

      defaultHeaders.foreach { h => builder.addHeader(h._1, h._2) }
      requestHeaders.foreach { h => builder.addHeader(h._1, h._2) }

      auth.fold(builder) {
        case Authorization.Basic(username, passwordOpt) => {
          builder.setRealm(
            new Realm.RealmBuilder()
              .setPrincipal(username)
              .setPassword(passwordOpt.getOrElse(""))
              .setUsePreemptiveAuth(true)
              .setScheme(Realm.AuthScheme.BASIC)
              .build()
          )
        }
        case a => sys.error("Invalid authorization scheme[" + a.getClass + "]")
      }
    }

    def _executeRequest(
      method: String,
      path: String,
      queryParameters: Seq[(String, String)] = Nil,
      requestHeaders: Seq[(String, String)] = Nil,
      body: Option[play.api.libs.json.JsValue] = None
    )(implicit ec: scala.concurrent.ExecutionContext): scala.concurrent.Future[com.ning.http.client.Response] = {
      val allHeaders = body match {
        case None => requestHeaders
        case Some(_) => _withJsonContentType(requestHeaders)
      }

      val request = _requestBuilder(method, path, allHeaders)

      queryParameters.foreach { pair =>
        request.addQueryParameter(pair._1, pair._2)
      }

      val requestWithParamsAndBody = body.fold(request) { b =>
        val serialized = play.api.libs.json.Json.stringify(b)
        request.setBody(serialized)
      }

      val finalRequest = requestWithParamsAndBody.build()
      _logRequest(finalRequest)

      val result = scala.concurrent.Promise[com.ning.http.client.Response]()
      asyncHttpClient.executeRequest(finalRequest,
        new AsyncCompletionHandler[Unit]() {
          override def onCompleted(r: com.ning.http.client.Response) = result.success(r)
          override def onThrowable(t: Throwable) = result.failure(t)
        }
      )
      result.future
    }

    /**
     * Adds a Content-Type: application/json header unless the specified requestHeaders
     * already contain a Content-Type header
     */
    def _withJsonContentType(headers: Seq[(String, String)]): Seq[(String, String)] = {
      headers.find { _._1.toUpperCase == "CONTENT-TYPE" } match {
        case None => headers ++ Seq(("Content-Type" -> "application/json; charset=UTF-8"))
        case Some(_) => headers
      }
    }

  }

  object Client {

    private lazy val defaultAsyncHttpClient = {
      new AsyncHttpClient(
        new AsyncHttpClientConfig.Builder()
          .setExecutorService(java.util.concurrent.Executors.newCachedThreadPool())
          .build()
      )
    }

    def parseJson[T](
      className: String,
      r: _root_.com.ning.http.client.Response,
      f: (play.api.libs.json.JsValue => play.api.libs.json.JsResult[T])
    ): T = {
      f(play.api.libs.json.Json.parse(r.getResponseBody("UTF-8"))) match {
        case play.api.libs.json.JsSuccess(x, _) => x
        case play.api.libs.json.JsError(errors) => {
          throw io.apibuilder.reference.api.v0.errors.FailedRequest(r.getStatusCode, s"Invalid json for class[" + className + "]: " + errors.mkString(" "), requestUri = Some(r.getUri))
        }
      }
    }

  }

  sealed trait Authorization extends _root_.scala.Product with _root_.scala.Serializable
  object Authorization {
    case class Basic(username: String, password: Option[String] = None) extends Authorization
  }

  package interfaces {

    trait Client {
      def baseUrl: String
      def echoes: io.apibuilder.reference.api.v0.Echoes
      def groups: io.apibuilder.reference.api.v0.Groups
      def members: io.apibuilder.reference.api.v0.Members
      def organizations: io.apibuilder.reference.api.v0.Organizations
      def users: io.apibuilder.reference.api.v0.Users
    }

  }

  trait Echoes {
    def get(
      foo: _root_.scala.Option[String] = None,
      optionalMessages: _root_.scala.Option[Seq[String]] = None,
      requiredMessages: Seq[String],
      requestHeaders: Seq[(String, String)] = Nil
    )(implicit ec: scala.concurrent.ExecutionContext): scala.concurrent.Future[Unit]

    def getArraysOnly(
      optionalMessages: _root_.scala.Option[Seq[String]] = None,
      requiredMessages: Seq[String],
      requestHeaders: Seq[(String, String)] = Nil
    )(implicit ec: scala.concurrent.ExecutionContext): scala.concurrent.Future[Unit]
  }

  trait Groups {
    def getByOrganization(
      organization: _root_.java.util.UUID,
      requestHeaders: Seq[(String, String)] = Nil
    )(implicit ec: scala.concurrent.ExecutionContext): scala.concurrent.Future[Map[String, Seq[io.apibuilder.reference.api.v0.models.User]]]
  }

  trait Members {
    def post(
      guid: _root_.java.util.UUID,
      organization: _root_.java.util.UUID,
      user: _root_.java.util.UUID,
      role: String,
      requestHeaders: Seq[(String, String)] = Nil
    )(implicit ec: scala.concurrent.ExecutionContext): scala.concurrent.Future[io.apibuilder.reference.api.v0.models.Member]

    def get(
      guid: _root_.scala.Option[_root_.java.util.UUID] = None,
      organizationGuid: _root_.scala.Option[_root_.java.util.UUID] = None,
      userGuid: _root_.scala.Option[_root_.java.util.UUID] = None,
      role: _root_.scala.Option[String] = None,
      requestHeaders: Seq[(String, String)] = Nil
    )(implicit ec: scala.concurrent.ExecutionContext): scala.concurrent.Future[Seq[io.apibuilder.reference.api.v0.models.Member]]

    def getByOrganization(
      organization: _root_.java.util.UUID,
      requestHeaders: Seq[(String, String)] = Nil
    )(implicit ec: scala.concurrent.ExecutionContext): scala.concurrent.Future[Seq[io.apibuilder.reference.api.v0.models.Member]]

    def postMembersBulkByOrganization(
      organization: _root_.java.util.UUID,
      members: Seq[io.apibuilder.reference.api.v0.models.Member],
      requestHeaders: Seq[(String, String)] = Nil
    )(implicit ec: scala.concurrent.ExecutionContext): scala.concurrent.Future[Seq[io.apibuilder.reference.api.v0.models.Member]]
  }

  trait Organizations {
    def post(
      organization: io.apibuilder.reference.api.v0.models.Organization,
      requestHeaders: Seq[(String, String)] = Nil
    )(implicit ec: scala.concurrent.ExecutionContext): scala.concurrent.Future[io.apibuilder.reference.api.v0.models.Organization]

    def get(
      guid: _root_.scala.Option[_root_.java.util.UUID] = None,
      name: _root_.scala.Option[String] = None,
      requestHeaders: Seq[(String, String)] = Nil
    )(implicit ec: scala.concurrent.ExecutionContext): scala.concurrent.Future[Seq[io.apibuilder.reference.api.v0.models.Organization]]

    def getByGuid(
      guid: _root_.java.util.UUID,
      requestHeaders: Seq[(String, String)] = Nil
    )(implicit ec: scala.concurrent.ExecutionContext): scala.concurrent.Future[io.apibuilder.reference.api.v0.models.Organization]
  }

  trait Users {
    def post(
      guid: _root_.java.util.UUID,
      email: String,
      active: Boolean,
      requestHeaders: Seq[(String, String)] = Nil
    )(implicit ec: scala.concurrent.ExecutionContext): scala.concurrent.Future[io.apibuilder.reference.api.v0.models.User]

    /**
     * @param organizationGuids Limits users to the specified organizations.
     * @param ageGroup Limit to users in this age group
     */
    def get(
      guid: _root_.scala.Option[_root_.java.util.UUID] = None,
      organizationGuids: _root_.scala.Option[Seq[Long]] = None,
      ageGroup: _root_.scala.Option[io.apibuilder.reference.api.v0.models.AgeGroup] = None,
      email: _root_.scala.Option[String] = None,
      active: Boolean = true,
      requestHeaders: Seq[(String, String)] = Nil
    )(implicit ec: scala.concurrent.ExecutionContext): scala.concurrent.Future[Seq[io.apibuilder.reference.api.v0.models.User]]

    def getByAgeGroup(
      ageGroup: io.apibuilder.reference.api.v0.models.AgeGroup,
      requestHeaders: Seq[(String, String)] = Nil
    )(implicit ec: scala.concurrent.ExecutionContext): scala.concurrent.Future[Seq[io.apibuilder.reference.api.v0.models.User]]

    def postNoop(
      requestHeaders: Seq[(String, String)] = Nil
    )(implicit ec: scala.concurrent.ExecutionContext): scala.concurrent.Future[Unit]
  }

  package errors {

    import io.apibuilder.reference.api.v0.models.json._

    case class ErrorsResponse(
      response: _root_.com.ning.http.client.Response,
      message: Option[String] = None
    ) extends Exception(message.getOrElse(response.getStatusCode + ": " + response.getResponseBody("UTF-8"))){
      lazy val errors = _root_.io.apibuilder.reference.api.v0.Client.parseJson("Seq[io.apibuilder.reference.api.v0.models.Error]", response, _.validate[Seq[io.apibuilder.reference.api.v0.models.Error]])
    }

    case class FailedRequest(responseCode: Int, message: String, requestUri: Option[_root_.java.net.URI] = None) extends _root_.java.lang.Exception(s"HTTP $responseCode: $message")

  }

  object PathSegment {
    // See https://github.com/playframework/playframework/blob/2.3.x/framework/src/play/src/main/scala/play/utils/UriEncoding.scala
    def encode(s: String, inputCharset: String): String = {
      val in = s.getBytes(inputCharset)
      val out = new java.io.ByteArrayOutputStream()
      for (b <- in) {
        val allowed = segmentChars.get(b & 0xFF)
        if (allowed) {
          out.write(b)
        } else {
          out.write('%')
          out.write(upperHex((b >> 4) & 0xF))
          out.write(upperHex(b & 0xF))
        }
      }
      out.toString("US-ASCII")
    }

    private def upperHex(x: Int): Int = {
      // Assume 0 <= x < 16
      if (x < 10) (x + '0') else (x - 10 + 'A')
    }

    private[this] val segmentChars: java.util.BitSet = membershipTable(pchar)

    private def pchar: Seq[Char] = {
      val alphaDigit = for ((min, max) <- Seq(('a', 'z'), ('A', 'Z'), ('0', '9')); c <- min to max) yield c
      val unreserved = alphaDigit ++ Seq('-', '.', '_', '~')
      val subDelims = Seq('!', '$', '&', '\'', '(', ')', '*', '+', ',', ';', '=')
      unreserved ++ subDelims ++ Seq(':', '@')
    }

    private def membershipTable(chars: Seq[Char]): java.util.BitSet = {
      val bits = new java.util.BitSet(256)
      for (c <- chars) { bits.set(c.toInt) }
      bits
    }
  }
}