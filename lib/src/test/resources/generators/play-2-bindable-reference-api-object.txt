object Bindables {

  import play.api.mvc.{PathBindable, QueryStringBindable}

  // import models directly for backwards compatibility with prior versions of the generator
  import Core._
  import Models._

  object Core {
    implicit val pathBindableDateTimeIso8601: PathBindable[_root_.org.joda.time.DateTime] = ApibuilderPathBindable(ApibuilderTypes.dateTimeIso8601)
    implicit val queryStringBindableDateTimeIso8601: QueryStringBindable[_root_.org.joda.time.DateTime] = ApibuilderQueryStringBindable(ApibuilderTypes.dateTimeIso8601)

    implicit val pathBindableDateIso8601: PathBindable[_root_.org.joda.time.LocalDate] = ApibuilderPathBindable(ApibuilderTypes.dateIso8601)
    implicit val queryStringBindableDateIso8601: QueryStringBindable[_root_.org.joda.time.LocalDate] = ApibuilderQueryStringBindable(ApibuilderTypes.dateIso8601)
  }

  object Models {
    import io.apibuilder.reference.api.v0.models._

    val ageGroupConverter: ApibuilderTypeConverter[io.apibuilder.reference.api.v0.models.AgeGroup] = new ApibuilderTypeConverter[io.apibuilder.reference.api.v0.models.AgeGroup] {
      override def convert(value: String): io.apibuilder.reference.api.v0.models.AgeGroup = io.apibuilder.reference.api.v0.models.AgeGroup(value)
      override def convert(value: io.apibuilder.reference.api.v0.models.AgeGroup): String = value.toString
      override def example: io.apibuilder.reference.api.v0.models.AgeGroup = io.apibuilder.reference.api.v0.models.AgeGroup.Youth
      override def validValues: Seq[io.apibuilder.reference.api.v0.models.AgeGroup] = io.apibuilder.reference.api.v0.models.AgeGroup.all
    }
    implicit val pathBindableAgeGroup: PathBindable[io.apibuilder.reference.api.v0.models.AgeGroup] = ApibuilderPathBindable(ageGroupConverter)
    implicit val queryStringBindableAgeGroup: QueryStringBindable[io.apibuilder.reference.api.v0.models.AgeGroup] = ApibuilderQueryStringBindable(ageGroupConverter)
  }

  trait ApibuilderTypeConverter[T] {

    def convert(value: String): T

    def convert(value: T): String

    def example: T

    def validValues: Seq[T] = Nil

    def errorMessage(key: String, value: String, ex: java.lang.Exception): String = {
      val base = s"Invalid value '$value' for parameter '$key'. "
      validValues.toList match {
        case Nil => base + "Ex: " + convert(example)
        case values => base + ". Valid values are: " + values.mkString("'", "', '", "'")
      }
    }
  }

  object ApibuilderTypes {
    import org.joda.time.{format, DateTime, LocalDate}

    val dateTimeIso8601: ApibuilderTypeConverter[DateTime] = new ApibuilderTypeConverter[DateTime] {
      override def convert(value: String): DateTime = format.ISODateTimeFormat.dateTimeParser.parseDateTime(value)
      override def convert(value: DateTime): String = format.ISODateTimeFormat.dateTime.print(value)
      override def example: DateTime = DateTime.now
    }

    val dateIso8601: ApibuilderTypeConverter[LocalDate] = new ApibuilderTypeConverter[LocalDate] {
      override def convert(value: String): LocalDate = format.ISODateTimeFormat.yearMonthDay.parseLocalDate(value)
      override def convert(value: LocalDate): String = value.toString
      override def example: LocalDate = LocalDate.now
    }

  }

  case class ApibuilderQueryStringBindable[T](
    converters: ApibuilderTypeConverter[T]
  ) extends QueryStringBindable[T] {

    override def bind(key: String, params: Map[String, Seq[String]]): _root_.scala.Option[_root_.scala.Either[String, T]] = {
      params.getOrElse(key, Nil).headOption.map { v =>
        try {
          Right(
            converters.convert(v)
          )
        } catch {
          case ex: java.lang.Exception => Left(
            converters.errorMessage(key, v, ex)
          )
        }
      }
    }

    override def unbind(key: String, value: T): String = {
      converters.convert(value)
    }
  }

  case class ApibuilderPathBindable[T](
    converters: ApibuilderTypeConverter[T]
  ) extends PathBindable[T] {

    override def bind(key: String, value: String): _root_.scala.Either[String, T] = {
      try {
        Right(
          converters.convert(value)
        )
      } catch {
        case ex: java.lang.Exception => Left(
          converters.errorMessage(key, value, ex)
        )
      }
    }

    override def unbind(key: String, value: T): String = {
      converters.convert(value)
    }
  }

}