/**
 * Generated by apidoc - http://www.apidoc.me
 * Service version: 0.0.1-dev
 */
package com.bryzek.apidoc.reference.api.v0.models {

  /**
   * A model with a lot of fields.
   */
  case class Big(
    f1: String,
    f2: String,
    f3: String,
    f4: String,
    f5: String,
    f6: String,
    f7: String,
    f8: String,
    f9: String,
    f10: String,
    f11: String,
    f12: String,
    f13: String,
    f14: String,
    f15: String,
    f16: String,
    f17: String,
    f18: String,
    f19: String,
    f20: String,
    f21: String
  )

  case class Echo(
    value: String
  )

  /**
   * Models an API error.
   */
  case class Error(
    code: String,
    message: String
  )

  /**
   * A group of users in an organization.
   */
  case class Group(
    members: Seq[com.bryzek.apidoc.reference.api.v0.models.User]
  )

  case class Member(
    guid: _root_.java.util.UUID,
    organization: com.bryzek.apidoc.reference.api.v0.models.Organization,
    user: com.bryzek.apidoc.reference.api.v0.models.User,
    role: String
  )

  case class Organization(
    guid: _root_.java.util.UUID,
    name: String
  )

  case class User(
    guid: _root_.java.util.UUID,
    email: String,
    active: Boolean,
    ageGroup: com.bryzek.apidoc.reference.api.v0.models.AgeGroup,
    tags: _root_.scala.Option[Map[String, String]] = None
  )

  case class UserList(
    users: Seq[com.bryzek.apidoc.reference.api.v0.models.User]
  )

  sealed trait AgeGroup

  object AgeGroup {

    /**
     * under 18
     */
    case object Youth extends AgeGroup { override def toString = "Youth" }
    /**
     * 18 and over
     */
    case object Adult extends AgeGroup { override def toString = "Adult" }

    /**
     * UNDEFINED captures values that are sent either in error or
     * that were added by the server after this library was
     * generated. We want to make it easy and obvious for users of
     * this library to handle this case gracefully.
     *
     * We use all CAPS for the variable name to avoid collisions
     * with the camel cased values above.
     */
    case class UNDEFINED(override val toString: String) extends AgeGroup

    /**
     * all returns a list of all the valid, known values. We use
     * lower case to avoid collisions with the camel cased values
     * above.
     */
    val all = Seq(Youth, Adult)

    private[this]
    val byName = all.map(x => x.toString.toLowerCase -> x).toMap

    def apply(value: String): AgeGroup = fromString(value).getOrElse(UNDEFINED(value))

    def fromString(value: String): _root_.scala.Option[AgeGroup] = byName.get(value.toLowerCase)

  }

}

package com.bryzek.apidoc.reference.api.v0.models {

  package object json {
    import scala.language.implicitConversions
    import play.api.libs.json.__
    import play.api.libs.json.JsString
    import play.api.libs.json.Writes
    import play.api.libs.functional.syntax._
    import com.bryzek.apidoc.reference.api.v0.models.json._

    private[v0] implicit val jsonReadsUUID = __.read[String].map(java.util.UUID.fromString)

    private[v0] implicit val jsonWritesUUID = new Writes[java.util.UUID] {
      def writes(x: java.util.UUID) = JsString(x.toString)
    }

    private[v0] implicit val jsonReadsJodaDateTime = __.read[String].map { str =>
      import org.joda.time.format.ISODateTimeFormat.dateTimeParser
      dateTimeParser.parseDateTime(str)
    }

    private[v0] implicit val jsonWritesJodaDateTime = new Writes[org.joda.time.DateTime] {
      def writes(x: org.joda.time.DateTime) = {
        import org.joda.time.format.ISODateTimeFormat.dateTime
        val str = dateTime.print(x)
        JsString(str)
      }
    }

    implicit val jsonReadsApidocReferenceApiAgeGroup = __.read[String].map(AgeGroup.apply)

    implicit def convertAgeGroupToString(value: com.bryzek.apidoc.reference.api.v0.models.AgeGroup) = value.toString

    implicit def jsonReadsApidocReferenceApiBig: play.api.libs.json.Reads[Big] = {
      (
        (__ \ "f1").read[String] and
        (__ \ "f2").read[String] and
        (__ \ "f3").read[String] and
        (__ \ "f4").read[String] and
        (__ \ "f5").read[String] and
        (__ \ "f6").read[String] and
        (__ \ "f7").read[String] and
        (__ \ "f8").read[String] and
        (__ \ "f9").read[String] and
        (__ \ "f10").read[String] and
        (__ \ "f11").read[String] and
        (__ \ "f12").read[String] and
        (__ \ "f13").read[String] and
        (__ \ "f14").read[String] and
        (__ \ "f15").read[String] and
        (__ \ "f16").read[String] and
        (__ \ "f17").read[String] and
        (__ \ "f18").read[String] and
        (__ \ "f19").read[String] and
        (__ \ "f20").read[String] and
        (__ \ "f21").read[String]
      )(Big.apply _)
    }

    implicit def jsonWritesApidocReferenceApiBig: play.api.libs.json.Writes[Big] = {
      (
        (__ \ "f1").write[String] and
        (__ \ "f2").write[String] and
        (__ \ "f3").write[String] and
        (__ \ "f4").write[String] and
        (__ \ "f5").write[String] and
        (__ \ "f6").write[String] and
        (__ \ "f7").write[String] and
        (__ \ "f8").write[String] and
        (__ \ "f9").write[String] and
        (__ \ "f10").write[String] and
        (__ \ "f11").write[String] and
        (__ \ "f12").write[String] and
        (__ \ "f13").write[String] and
        (__ \ "f14").write[String] and
        (__ \ "f15").write[String] and
        (__ \ "f16").write[String] and
        (__ \ "f17").write[String] and
        (__ \ "f18").write[String] and
        (__ \ "f19").write[String] and
        (__ \ "f20").write[String] and
        (__ \ "f21").write[String]
      )(unlift(Big.unapply _))
    }

    implicit def jsonReadsApidocReferenceApiEcho: play.api.libs.json.Reads[Echo] = {
      (__ \ "value").read[String].map { x => new Echo(value = x) }
    }

    implicit def jsonWritesApidocReferenceApiEcho: play.api.libs.json.Writes[Echo] = new play.api.libs.json.Writes[Echo] {
      def writes(x: Echo) = play.api.libs.json.Json.obj(
        "value" -> play.api.libs.json.Json.toJson(x.value)
      )
    }

    implicit def jsonReadsApidocReferenceApiError: play.api.libs.json.Reads[Error] = {
      (
        (__ \ "code").read[String] and
        (__ \ "message").read[String]
      )(Error.apply _)
    }

    implicit def jsonWritesApidocReferenceApiError: play.api.libs.json.Writes[Error] = {
      (
        (__ \ "code").write[String] and
        (__ \ "message").write[String]
      )(unlift(Error.unapply _))
    }

    implicit def jsonReadsApidocReferenceApiGroup: play.api.libs.json.Reads[Group] = {
      (__ \ "members").read[Seq[com.bryzek.apidoc.reference.api.v0.models.User]].map { x => new Group(members = x) }
    }

    implicit def jsonWritesApidocReferenceApiGroup: play.api.libs.json.Writes[Group] = new play.api.libs.json.Writes[Group] {
      def writes(x: Group) = play.api.libs.json.Json.obj(
        "members" -> play.api.libs.json.Json.toJson(x.members)
      )
    }

    implicit def jsonReadsApidocReferenceApiMember: play.api.libs.json.Reads[Member] = {
      (
        (__ \ "guid").read[_root_.java.util.UUID] and
        (__ \ "organization").read[com.bryzek.apidoc.reference.api.v0.models.Organization] and
        (__ \ "user").read[com.bryzek.apidoc.reference.api.v0.models.User] and
        (__ \ "role").read[String]
      )(Member.apply _)
    }

    implicit def jsonWritesApidocReferenceApiMember: play.api.libs.json.Writes[Member] = {
      (
        (__ \ "guid").write[_root_.java.util.UUID] and
        (__ \ "organization").write[com.bryzek.apidoc.reference.api.v0.models.Organization] and
        (__ \ "user").write[com.bryzek.apidoc.reference.api.v0.models.User] and
        (__ \ "role").write[String]
      )(unlift(Member.unapply _))
    }

    implicit def jsonReadsApidocReferenceApiOrganization: play.api.libs.json.Reads[Organization] = {
      (
        (__ \ "guid").read[_root_.java.util.UUID] and
        (__ \ "name").read[String]
      )(Organization.apply _)
    }

    implicit def jsonWritesApidocReferenceApiOrganization: play.api.libs.json.Writes[Organization] = {
      (
        (__ \ "guid").write[_root_.java.util.UUID] and
        (__ \ "name").write[String]
      )(unlift(Organization.unapply _))
    }

    implicit def jsonReadsApidocReferenceApiUser: play.api.libs.json.Reads[User] = {
      (
        (__ \ "guid").read[_root_.java.util.UUID] and
        (__ \ "email").read[String] and
        (__ \ "active").read[Boolean] and
        (__ \ "age_group").read[com.bryzek.apidoc.reference.api.v0.models.AgeGroup] and
        (__ \ "tags").readNullable[Map[String, String]]
      )(User.apply _)
    }

    implicit def jsonWritesApidocReferenceApiUser: play.api.libs.json.Writes[User] = {
      (
        (__ \ "guid").write[_root_.java.util.UUID] and
        (__ \ "email").write[String] and
        (__ \ "active").write[Boolean] and
        (__ \ "age_group").write[com.bryzek.apidoc.reference.api.v0.models.AgeGroup] and
        (__ \ "tags").writeNullable[Map[String, String]]
      )(unlift(User.unapply _))
    }

    implicit def jsonReadsApidocReferenceApiUserList: play.api.libs.json.Reads[UserList] = {
      (__ \ "users").read[Seq[com.bryzek.apidoc.reference.api.v0.models.User]].map { x => new UserList(users = x) }
    }

    implicit def jsonWritesApidocReferenceApiUserList: play.api.libs.json.Writes[UserList] = new play.api.libs.json.Writes[UserList] {
      def writes(x: UserList) = play.api.libs.json.Json.obj(
        "users" -> play.api.libs.json.Json.toJson(x.users)
      )
    }
  }
}

package com.bryzek.apidoc.reference.api.v0 {

  object Bindables {

    import play.api.mvc.{PathBindable, QueryStringBindable}
    import org.joda.time.{DateTime, LocalDate}
    import org.joda.time.format.ISODateTimeFormat
    import com.bryzek.apidoc.reference.api.v0.models._

    // Type: date-time-iso8601
    implicit val pathBindableTypeDateTimeIso8601 = new PathBindable.Parsing[org.joda.time.DateTime](
      ISODateTimeFormat.dateTimeParser.parseDateTime(_), _.toString, (key: String, e: Exception) => s"Error parsing date time $key. Example: 2014-04-29T11:56:52Z"
    )

    implicit val queryStringBindableTypeDateTimeIso8601 = new QueryStringBindable.Parsing[org.joda.time.DateTime](
      ISODateTimeFormat.dateTimeParser.parseDateTime(_), _.toString, (key: String, e: Exception) => s"Error parsing date time $key. Example: 2014-04-29T11:56:52Z"
    )

    // Type: date-iso8601
    implicit val pathBindableTypeDateIso8601 = new PathBindable.Parsing[org.joda.time.LocalDate](
      ISODateTimeFormat.yearMonthDay.parseLocalDate(_), _.toString, (key: String, e: Exception) => s"Error parsing date $key. Example: 2014-04-29"
    )

    implicit val queryStringBindableTypeDateIso8601 = new QueryStringBindable.Parsing[org.joda.time.LocalDate](
      ISODateTimeFormat.yearMonthDay.parseLocalDate(_), _.toString, (key: String, e: Exception) => s"Error parsing date $key. Example: 2014-04-29"
    )

    // Enum: AgeGroup
    private[this] val enumAgeGroupNotFound = (key: String, e: Exception) => s"Unrecognized $key, should be one of ${com.bryzek.apidoc.reference.api.v0.models.AgeGroup.all.mkString(", ")}"

    implicit val pathBindableEnumAgeGroup = new PathBindable.Parsing[com.bryzek.apidoc.reference.api.v0.models.AgeGroup] (
      AgeGroup.fromString(_).get, _.toString, enumAgeGroupNotFound
    )

    implicit val queryStringBindableEnumAgeGroup = new QueryStringBindable.Parsing[com.bryzek.apidoc.reference.api.v0.models.AgeGroup](
      AgeGroup.fromString(_).get, _.toString, enumAgeGroupNotFound
    )

  }

}


package com.bryzek.apidoc.reference.api.v0 {

  object Constants {

    val UserAgent = "apidoc:play_2x_client:unknown"
    val Version = "0.0.1-dev"
    val VersionMajor = 0

  }

  class Client(
    apiUrl: String,
    auth: scala.Option[com.bryzek.apidoc.reference.api.v0.Authorization] = None,
    defaultHeaders: Seq[(String, String)] = Nil
  ) {
    import com.bryzek.apidoc.reference.api.v0.models.json._

    private[this] val logger = play.api.Logger("com.bryzek.apidoc.reference.api.v0.Client")

    logger.info(s"Initializing com.bryzek.apidoc.reference.api.v0.Client for url $apiUrl")

    def echoes: Echoes = Echoes

    def groups: Groups = Groups

    def members: Members = Members

    def organizations: Organizations = Organizations

    def users: Users = Users

    object Echoes extends Echoes {
      override def get(
        foo: _root_.scala.Option[String] = None,
        optionalMessages: _root_.scala.Option[Seq[String]] = None,
        requiredMessages: Seq[String]
      )(implicit ec: scala.concurrent.ExecutionContext): scala.concurrent.Future[Unit] = {
        val queryParameters = Seq(
          foo.map("foo" -> _)
        ).flatten ++
          optionalMessages.getOrElse(Nil).map("optional_messages" -> _) ++
          requiredMessages.map("required_messages" -> _)

        _executeRequest("GET", s"/echoes", queryParameters = queryParameters).map {
          case r if r.status == 204 => ()
          case r => throw new com.bryzek.apidoc.reference.api.v0.errors.FailedRequest(r.status, s"Unsupported response code[${r.status}]. Expected: 204")
        }
      }

      override def getArraysOnly(
        optionalMessages: _root_.scala.Option[Seq[String]] = None,
        requiredMessages: Seq[String]
      )(implicit ec: scala.concurrent.ExecutionContext): scala.concurrent.Future[Unit] = {
        val queryParameters = optionalMessages.getOrElse(Nil).map("optional_messages" -> _) ++
          requiredMessages.map("required_messages" -> _)

        _executeRequest("GET", s"/echoes/arrays-only", queryParameters = queryParameters).map {
          case r if r.status == 204 => ()
          case r => throw new com.bryzek.apidoc.reference.api.v0.errors.FailedRequest(r.status, s"Unsupported response code[${r.status}]. Expected: 204")
        }
      }
    }

    object Groups extends Groups {
      override def getByOrganization(
        organization: _root_.java.util.UUID
      )(implicit ec: scala.concurrent.ExecutionContext): scala.concurrent.Future[Map[String, Seq[com.bryzek.apidoc.reference.api.v0.models.User]]] = {
        _executeRequest("GET", s"/groups/${organization}").map {
          case r if r.status == 200 => _root_.com.bryzek.apidoc.reference.api.v0.Client.parseJson("Map[String, Seq[com.bryzek.apidoc.reference.api.v0.models.User]]", r, _.validate[Map[String, Seq[com.bryzek.apidoc.reference.api.v0.models.User]]])
          case r => throw new com.bryzek.apidoc.reference.api.v0.errors.FailedRequest(r.status, s"Unsupported response code[${r.status}]. Expected: 200")
        }
      }
    }

    object Members extends Members {
      override def post(
        guid: _root_.java.util.UUID,
        organization: _root_.java.util.UUID,
        user: _root_.java.util.UUID,
        role: String
      )(implicit ec: scala.concurrent.ExecutionContext): scala.concurrent.Future[com.bryzek.apidoc.reference.api.v0.models.Member] = {
        val payload = play.api.libs.json.Json.obj(
          "guid" -> play.api.libs.json.Json.toJson(guid),
          "organization" -> play.api.libs.json.Json.toJson(organization),
          "user" -> play.api.libs.json.Json.toJson(user),
          "role" -> play.api.libs.json.Json.toJson(role)
        )

        _executeRequest("POST", s"/members", body = Some(payload)).map {
          case r if r.status == 201 => _root_.com.bryzek.apidoc.reference.api.v0.Client.parseJson("com.bryzek.apidoc.reference.api.v0.models.Member", r, _.validate[com.bryzek.apidoc.reference.api.v0.models.Member])
          case r if r.status == 409 => throw new com.bryzek.apidoc.reference.api.v0.errors.ErrorsResponse(r)
          case r => throw new com.bryzek.apidoc.reference.api.v0.errors.FailedRequest(r.status, s"Unsupported response code[${r.status}]. Expected: 201, 409")
        }
      }

      override def get(
        guid: _root_.scala.Option[_root_.java.util.UUID] = None,
        organizationGuid: _root_.scala.Option[_root_.java.util.UUID] = None,
        userGuid: _root_.scala.Option[_root_.java.util.UUID] = None,
        role: _root_.scala.Option[String] = None
      )(implicit ec: scala.concurrent.ExecutionContext): scala.concurrent.Future[Seq[com.bryzek.apidoc.reference.api.v0.models.Member]] = {
        val queryParameters = Seq(
          guid.map("guid" -> _.toString),
          organizationGuid.map("organization_guid" -> _.toString),
          userGuid.map("user_guid" -> _.toString),
          role.map("role" -> _)
        ).flatten

        _executeRequest("GET", s"/members", queryParameters = queryParameters).map {
          case r if r.status == 200 => _root_.com.bryzek.apidoc.reference.api.v0.Client.parseJson("Seq[com.bryzek.apidoc.reference.api.v0.models.Member]", r, _.validate[Seq[com.bryzek.apidoc.reference.api.v0.models.Member]])
          case r => throw new com.bryzek.apidoc.reference.api.v0.errors.FailedRequest(r.status, s"Unsupported response code[${r.status}]. Expected: 200")
        }
      }

      override def getByOrganization(
        organization: _root_.java.util.UUID
      )(implicit ec: scala.concurrent.ExecutionContext): scala.concurrent.Future[Seq[com.bryzek.apidoc.reference.api.v0.models.Member]] = {
        _executeRequest("GET", s"/members/${organization}").map {
          case r if r.status == 200 => _root_.com.bryzek.apidoc.reference.api.v0.Client.parseJson("Seq[com.bryzek.apidoc.reference.api.v0.models.Member]", r, _.validate[Seq[com.bryzek.apidoc.reference.api.v0.models.Member]])
          case r => throw new com.bryzek.apidoc.reference.api.v0.errors.FailedRequest(r.status, s"Unsupported response code[${r.status}]. Expected: 200")
        }
      }

      override def postMembersBulkByOrganization(
        organization: _root_.java.util.UUID,
        members: Seq[com.bryzek.apidoc.reference.api.v0.models.Member]
      )(implicit ec: scala.concurrent.ExecutionContext): scala.concurrent.Future[Seq[com.bryzek.apidoc.reference.api.v0.models.Member]] = {
        val payload = play.api.libs.json.Json.toJson(members)

        _executeRequest("POST", s"/members/${organization}/members_bulk", body = Some(payload)).map {
          case r if r.status == 200 => _root_.com.bryzek.apidoc.reference.api.v0.Client.parseJson("Seq[com.bryzek.apidoc.reference.api.v0.models.Member]", r, _.validate[Seq[com.bryzek.apidoc.reference.api.v0.models.Member]])
          case r => throw new com.bryzek.apidoc.reference.api.v0.errors.FailedRequest(r.status, s"Unsupported response code[${r.status}]. Expected: 200")
        }
      }

      override def postMembersMapByOrganization(
        organization: _root_.java.util.UUID,
        members: Map[String, com.bryzek.apidoc.reference.api.v0.models.Member]
      )(implicit ec: scala.concurrent.ExecutionContext): scala.concurrent.Future[Seq[com.bryzek.apidoc.reference.api.v0.models.Member]] = {
        val payload = play.api.libs.json.Json.toJson(members)

        _executeRequest("POST", s"/members/${organization}/members_map", body = Some(payload)).map {
          case r if r.status == 200 => _root_.com.bryzek.apidoc.reference.api.v0.Client.parseJson("Seq[com.bryzek.apidoc.reference.api.v0.models.Member]", r, _.validate[Seq[com.bryzek.apidoc.reference.api.v0.models.Member]])
          case r => throw new com.bryzek.apidoc.reference.api.v0.errors.FailedRequest(r.status, s"Unsupported response code[${r.status}]. Expected: 200")
        }
      }
    }

    object Organizations extends Organizations {
      override def post(
        organization: com.bryzek.apidoc.reference.api.v0.models.Organization
      )(implicit ec: scala.concurrent.ExecutionContext): scala.concurrent.Future[com.bryzek.apidoc.reference.api.v0.models.Organization] = {
        val payload = play.api.libs.json.Json.obj(
          "organization" -> play.api.libs.json.Json.toJson(organization)
        )

        _executeRequest("POST", s"/organizations", body = Some(payload)).map {
          case r if r.status == 201 => _root_.com.bryzek.apidoc.reference.api.v0.Client.parseJson("com.bryzek.apidoc.reference.api.v0.models.Organization", r, _.validate[com.bryzek.apidoc.reference.api.v0.models.Organization])
          case r if r.status == 409 => throw new com.bryzek.apidoc.reference.api.v0.errors.ErrorsResponse(r)
          case r => throw new com.bryzek.apidoc.reference.api.v0.errors.FailedRequest(r.status, s"Unsupported response code[${r.status}]. Expected: 201, 409")
        }
      }

      override def get(
        guid: _root_.scala.Option[_root_.java.util.UUID] = None,
        name: _root_.scala.Option[String] = None
      )(implicit ec: scala.concurrent.ExecutionContext): scala.concurrent.Future[Seq[com.bryzek.apidoc.reference.api.v0.models.Organization]] = {
        val queryParameters = Seq(
          guid.map("guid" -> _.toString),
          name.map("name" -> _)
        ).flatten

        _executeRequest("GET", s"/organizations", queryParameters = queryParameters).map {
          case r if r.status == 200 => _root_.com.bryzek.apidoc.reference.api.v0.Client.parseJson("Seq[com.bryzek.apidoc.reference.api.v0.models.Organization]", r, _.validate[Seq[com.bryzek.apidoc.reference.api.v0.models.Organization]])
          case r => throw new com.bryzek.apidoc.reference.api.v0.errors.FailedRequest(r.status, s"Unsupported response code[${r.status}]. Expected: 200")
        }
      }

      override def getByGuid(
        guid: _root_.java.util.UUID
      )(implicit ec: scala.concurrent.ExecutionContext): scala.concurrent.Future[com.bryzek.apidoc.reference.api.v0.models.Organization] = {
        _executeRequest("GET", s"/${guid}").map {
          case r if r.status == 200 => _root_.com.bryzek.apidoc.reference.api.v0.Client.parseJson("com.bryzek.apidoc.reference.api.v0.models.Organization", r, _.validate[com.bryzek.apidoc.reference.api.v0.models.Organization])
          case r => throw new com.bryzek.apidoc.reference.api.v0.errors.FailedRequest(r.status, s"Unsupported response code[${r.status}]. Expected: 200")
        }
      }
    }

    object Users extends Users {
      override def post(
        guid: _root_.java.util.UUID,
        email: String,
        active: Boolean
      )(implicit ec: scala.concurrent.ExecutionContext): scala.concurrent.Future[com.bryzek.apidoc.reference.api.v0.models.User] = {
        val payload = play.api.libs.json.Json.obj(
          "guid" -> play.api.libs.json.Json.toJson(guid),
          "email" -> play.api.libs.json.Json.toJson(email),
          "active" -> play.api.libs.json.Json.toJson(active)
        )

        _executeRequest("POST", s"/users", body = Some(payload)).map {
          case r if r.status == 201 => _root_.com.bryzek.apidoc.reference.api.v0.Client.parseJson("com.bryzek.apidoc.reference.api.v0.models.User", r, _.validate[com.bryzek.apidoc.reference.api.v0.models.User])
          case r if r.status == 409 => throw new com.bryzek.apidoc.reference.api.v0.errors.ErrorsResponse(r)
          case r => throw new com.bryzek.apidoc.reference.api.v0.errors.FailedRequest(r.status, s"Unsupported response code[${r.status}]. Expected: 201, 409")
        }
      }

      override def get(
        guid: _root_.scala.Option[_root_.java.util.UUID] = None,
        organizationGuids: _root_.scala.Option[Seq[Long]] = None,
        ageGroup: _root_.scala.Option[com.bryzek.apidoc.reference.api.v0.models.AgeGroup] = None,
        email: _root_.scala.Option[String] = None,
        active: Boolean = true
      )(implicit ec: scala.concurrent.ExecutionContext): scala.concurrent.Future[Seq[com.bryzek.apidoc.reference.api.v0.models.User]] = {
        val queryParameters = Seq(
          guid.map("guid" -> _.toString),
          ageGroup.map("age_group" -> _.toString),
          email.map("email" -> _),
          Some("active" -> active.toString)
        ).flatten ++
          organizationGuids.getOrElse(Nil).map("organization_guids" -> _.toString)

        _executeRequest("GET", s"/users", queryParameters = queryParameters).map {
          case r if r.status == 200 => _root_.com.bryzek.apidoc.reference.api.v0.Client.parseJson("Seq[com.bryzek.apidoc.reference.api.v0.models.User]", r, _.validate[Seq[com.bryzek.apidoc.reference.api.v0.models.User]])
          case r => throw new com.bryzek.apidoc.reference.api.v0.errors.FailedRequest(r.status, s"Unsupported response code[${r.status}]. Expected: 200")
        }
      }

      override def getByAgeGroup(
        ageGroup: com.bryzek.apidoc.reference.api.v0.models.AgeGroup
      )(implicit ec: scala.concurrent.ExecutionContext): scala.concurrent.Future[Seq[com.bryzek.apidoc.reference.api.v0.models.User]] = {
        _executeRequest("GET", s"/users/${play.utils.UriEncoding.encodePathSegment(ageGroup.toString, "UTF-8")}").map {
          case r if r.status == 200 => _root_.com.bryzek.apidoc.reference.api.v0.Client.parseJson("Seq[com.bryzek.apidoc.reference.api.v0.models.User]", r, _.validate[Seq[com.bryzek.apidoc.reference.api.v0.models.User]])
          case r => throw new com.bryzek.apidoc.reference.api.v0.errors.FailedRequest(r.status, s"Unsupported response code[${r.status}]. Expected: 200")
        }
      }

      override def postNoop()(implicit ec: scala.concurrent.ExecutionContext): scala.concurrent.Future[Unit] = {
        _executeRequest("POST", s"/users/noop").map {
          case r if r.status == 200 => ()
          case r => throw new com.bryzek.apidoc.reference.api.v0.errors.FailedRequest(r.status, s"Unsupported response code[${r.status}]. Expected: 200")
        }
      }
    }

    def _requestHolder(path: String): play.api.libs.ws.WSRequestHolder = {
      import play.api.Play.current

      val holder = play.api.libs.ws.WS.url(apiUrl + path).withHeaders(
        "User-Agent" -> Constants.UserAgent,
        "X-Apidoc-Version" -> Constants.Version,
        "X-Apidoc-Version-Major" -> Constants.VersionMajor.toString
      ).withHeaders(defaultHeaders : _*)
      auth.fold(holder) {
        case Authorization.Basic(username, password) => {
          holder.withAuth(username, password.getOrElse(""), play.api.libs.ws.WSAuthScheme.BASIC)
        }
        case a => sys.error("Invalid authorization scheme[" + a.getClass + "]")
      }
    }

    def _logRequest(method: String, req: play.api.libs.ws.WSRequestHolder)(implicit ec: scala.concurrent.ExecutionContext): play.api.libs.ws.WSRequestHolder = {
      val queryComponents = for {
        (name, values) <- req.queryString
        value <- values
      } yield s"$name=$value"
      val url = s"${req.url}${queryComponents.mkString("?", "&", "")}"
      auth.fold(logger.info(s"curl -X $method $url")) { _ =>
        logger.info(s"curl -X $method -u '[REDACTED]:' $url")
      }
      req
    }

    def _executeRequest(
      method: String,
      path: String,
      queryParameters: Seq[(String, String)] = Seq.empty,
      body: Option[play.api.libs.json.JsValue] = None
    )(implicit ec: scala.concurrent.ExecutionContext): scala.concurrent.Future[play.api.libs.ws.WSResponse] = {
      method.toUpperCase match {
        case "GET" => {
          _logRequest("GET", _requestHolder(path).withQueryString(queryParameters:_*)).get()
        }
        case "POST" => {
          _logRequest("POST", _requestHolder(path).withQueryString(queryParameters:_*).withHeaders("Content-Type" -> "application/json; charset=UTF-8")).post(body.getOrElse(play.api.libs.json.Json.obj()))
        }
        case "PUT" => {
          _logRequest("PUT", _requestHolder(path).withQueryString(queryParameters:_*).withHeaders("Content-Type" -> "application/json; charset=UTF-8")).put(body.getOrElse(play.api.libs.json.Json.obj()))
        }
        case "PATCH" => {
          _logRequest("PATCH", _requestHolder(path).withQueryString(queryParameters:_*)).patch(body.getOrElse(play.api.libs.json.Json.obj()))
        }
        case "DELETE" => {
          _logRequest("DELETE", _requestHolder(path).withQueryString(queryParameters:_*)).delete()
        }
         case "HEAD" => {
          _logRequest("HEAD", _requestHolder(path).withQueryString(queryParameters:_*)).head()
        }
         case "OPTIONS" => {
          _logRequest("OPTIONS", _requestHolder(path).withQueryString(queryParameters:_*)).options()
        }
        case _ => {
          _logRequest(method, _requestHolder(path).withQueryString(queryParameters:_*))
          sys.error("Unsupported method[%s]".format(method))
        }
      }
    }

  }

  object Client {

    def parseJson[T](
      className: String,
      r: play.api.libs.ws.WSResponse,
      f: (play.api.libs.json.JsValue => play.api.libs.json.JsResult[T])
    ): T = {
      f(play.api.libs.json.Json.parse(r.body)) match {
        case play.api.libs.json.JsSuccess(x, _) => x
        case play.api.libs.json.JsError(errors) => {
          throw new com.bryzek.apidoc.reference.api.v0.errors.FailedRequest(r.status, s"Invalid json for class[" + className + "]: " + errors.mkString(" "))
        }
      }
    }

  }

  sealed trait Authorization
  object Authorization {
    case class Basic(username: String, password: Option[String] = None) extends Authorization
  }

  trait Echoes {
    def get(
      foo: _root_.scala.Option[String] = None,
      optionalMessages: _root_.scala.Option[Seq[String]] = None,
      requiredMessages: Seq[String]
    )(implicit ec: scala.concurrent.ExecutionContext): scala.concurrent.Future[Unit]

    def getArraysOnly(
      optionalMessages: _root_.scala.Option[Seq[String]] = None,
      requiredMessages: Seq[String]
    )(implicit ec: scala.concurrent.ExecutionContext): scala.concurrent.Future[Unit]
  }

  trait Groups {
    def getByOrganization(
      organization: _root_.java.util.UUID
    )(implicit ec: scala.concurrent.ExecutionContext): scala.concurrent.Future[Map[String, Seq[com.bryzek.apidoc.reference.api.v0.models.User]]]
  }

  trait Members {
    def post(
      guid: _root_.java.util.UUID,
      organization: _root_.java.util.UUID,
      user: _root_.java.util.UUID,
      role: String
    )(implicit ec: scala.concurrent.ExecutionContext): scala.concurrent.Future[com.bryzek.apidoc.reference.api.v0.models.Member]

    def get(
      guid: _root_.scala.Option[_root_.java.util.UUID] = None,
      organizationGuid: _root_.scala.Option[_root_.java.util.UUID] = None,
      userGuid: _root_.scala.Option[_root_.java.util.UUID] = None,
      role: _root_.scala.Option[String] = None
    )(implicit ec: scala.concurrent.ExecutionContext): scala.concurrent.Future[Seq[com.bryzek.apidoc.reference.api.v0.models.Member]]

    def getByOrganization(
      organization: _root_.java.util.UUID
    )(implicit ec: scala.concurrent.ExecutionContext): scala.concurrent.Future[Seq[com.bryzek.apidoc.reference.api.v0.models.Member]]

    def postMembersBulkByOrganization(
      organization: _root_.java.util.UUID,
      members: Seq[com.bryzek.apidoc.reference.api.v0.models.Member]
    )(implicit ec: scala.concurrent.ExecutionContext): scala.concurrent.Future[Seq[com.bryzek.apidoc.reference.api.v0.models.Member]]

    def postMembersMapByOrganization(
      organization: _root_.java.util.UUID,
      members: Map[String, com.bryzek.apidoc.reference.api.v0.models.Member]
    )(implicit ec: scala.concurrent.ExecutionContext): scala.concurrent.Future[Seq[com.bryzek.apidoc.reference.api.v0.models.Member]]
  }

  trait Organizations {
    def post(
      organization: com.bryzek.apidoc.reference.api.v0.models.Organization
    )(implicit ec: scala.concurrent.ExecutionContext): scala.concurrent.Future[com.bryzek.apidoc.reference.api.v0.models.Organization]

    def get(
      guid: _root_.scala.Option[_root_.java.util.UUID] = None,
      name: _root_.scala.Option[String] = None
    )(implicit ec: scala.concurrent.ExecutionContext): scala.concurrent.Future[Seq[com.bryzek.apidoc.reference.api.v0.models.Organization]]

    def getByGuid(
      guid: _root_.java.util.UUID
    )(implicit ec: scala.concurrent.ExecutionContext): scala.concurrent.Future[com.bryzek.apidoc.reference.api.v0.models.Organization]
  }

  trait Users {
    def post(
      guid: _root_.java.util.UUID,
      email: String,
      active: Boolean
    )(implicit ec: scala.concurrent.ExecutionContext): scala.concurrent.Future[com.bryzek.apidoc.reference.api.v0.models.User]

    def get(
      guid: _root_.scala.Option[_root_.java.util.UUID] = None,
      organizationGuids: _root_.scala.Option[Seq[Long]] = None,
      ageGroup: _root_.scala.Option[com.bryzek.apidoc.reference.api.v0.models.AgeGroup] = None,
      email: _root_.scala.Option[String] = None,
      active: Boolean = true
    )(implicit ec: scala.concurrent.ExecutionContext): scala.concurrent.Future[Seq[com.bryzek.apidoc.reference.api.v0.models.User]]

    def getByAgeGroup(
      ageGroup: com.bryzek.apidoc.reference.api.v0.models.AgeGroup
    )(implicit ec: scala.concurrent.ExecutionContext): scala.concurrent.Future[Seq[com.bryzek.apidoc.reference.api.v0.models.User]]

    def postNoop()(implicit ec: scala.concurrent.ExecutionContext): scala.concurrent.Future[Unit]
  }

  package errors {

    import com.bryzek.apidoc.reference.api.v0.models.json._

    case class ErrorsResponse(
      response: play.api.libs.ws.WSResponse,
      message: Option[String] = None
    ) extends Exception(message.getOrElse(response.status + ": " + response.body)){
      lazy val errors = _root_.com.bryzek.apidoc.reference.api.v0.Client.parseJson("Seq[com.bryzek.apidoc.reference.api.v0.models.Error]", response, _.validate[Seq[com.bryzek.apidoc.reference.api.v0.models.Error]])
    }

    case class FailedRequest(responseCode: Int, message: String, requestUri: Option[_root_.java.net.URI] = None) extends Exception(s"HTTP $responseCode: $message")

  }

}