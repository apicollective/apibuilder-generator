/**
 * Generated by API Builder - https://www.apibuilder.io
 * Service version: 0.0.1-dev
 */
package apibuilder.models {

  case class Array(
    boolean: Seq[Boolean],
    dateiso8601: Seq[_root_.org.joda.time.LocalDate],
    datetimeiso8601: Seq[_root_.org.joda.time.DateTime],
    decimal: Seq[BigDecimal],
    double: Seq[Double],
    integer: Seq[Int],
    json: Seq[_root_.play.api.libs.json.JsValue],
    long: Seq[Long],
    `object`: Seq[_root_.play.api.libs.json.JsObject],
    string: Seq[String],
    uuid: Seq[_root_.java.util.UUID]
  )

  case class Optarray(
    boolean: _root_.scala.Option[Seq[Boolean]] = None,
    dateiso8601: _root_.scala.Option[Seq[_root_.org.joda.time.LocalDate]] = None,
    datetimeiso8601: _root_.scala.Option[Seq[_root_.org.joda.time.DateTime]] = None,
    decimal: _root_.scala.Option[Seq[BigDecimal]] = None,
    double: _root_.scala.Option[Seq[Double]] = None,
    integer: _root_.scala.Option[Seq[Int]] = None,
    json: _root_.scala.Option[Seq[_root_.play.api.libs.json.JsValue]] = None,
    long: _root_.scala.Option[Seq[Long]] = None,
    `object`: _root_.scala.Option[Seq[_root_.play.api.libs.json.JsObject]] = None,
    string: _root_.scala.Option[Seq[String]] = None,
    uuid: _root_.scala.Option[Seq[_root_.java.util.UUID]] = None
  )

  case class Optional(
    boolean: _root_.scala.Option[Boolean] = None,
    dateiso8601: _root_.scala.Option[_root_.org.joda.time.LocalDate] = None,
    datetimeiso8601: _root_.scala.Option[_root_.org.joda.time.DateTime] = None,
    decimal: _root_.scala.Option[BigDecimal] = None,
    double: _root_.scala.Option[Double] = None,
    integer: _root_.scala.Option[Int] = None,
    json: _root_.scala.Option[_root_.play.api.libs.json.JsValue] = None,
    long: _root_.scala.Option[Long] = None,
    `object`: _root_.scala.Option[_root_.play.api.libs.json.JsObject] = None,
    string: _root_.scala.Option[String] = None,
    uuid: _root_.scala.Option[_root_.java.util.UUID] = None
  )

  case class Required(
    boolean: Boolean,
    dateiso8601: _root_.org.joda.time.LocalDate,
    datetimeiso8601: _root_.org.joda.time.DateTime,
    decimal: BigDecimal,
    double: Double,
    integer: Int,
    json: _root_.play.api.libs.json.JsValue,
    long: Long,
    `object`: _root_.play.api.libs.json.JsObject,
    string: String,
    uuid: _root_.java.util.UUID
  )

}

package apibuilder.models {

  package object json {
    import play.api.libs.json.__
    import play.api.libs.json.JsString
    import play.api.libs.json.Writes
    import play.api.libs.functional.syntax._
    import apibuilder.models.json._

    private[apibuilder] implicit val jsonReadsUUID = __.read[String].map(java.util.UUID.fromString)

    private[apibuilder] implicit val jsonWritesUUID = new Writes[java.util.UUID] {
      def writes(x: java.util.UUID) = JsString(x.toString)
    }

    private[apibuilder] implicit val jsonReadsJodaDateTime = __.read[String].map { str =>
      import org.joda.time.format.ISODateTimeFormat.dateTimeParser
      dateTimeParser.parseDateTime(str)
    }

    private[apibuilder] implicit val jsonWritesJodaDateTime = new Writes[org.joda.time.DateTime] {
      def writes(x: org.joda.time.DateTime) = {
        import org.joda.time.format.ISODateTimeFormat.dateTime
        val str = dateTime.print(x)
        JsString(str)
      }
    }

    private[apibuilder] implicit val jsonReadsJodaLocalDate = __.read[String].map { str =>
      import org.joda.time.format.ISODateTimeFormat.dateParser
      dateParser.parseLocalDate(str)
    }

    private[apibuilder] implicit val jsonWritesJodaLocalDate = new Writes[org.joda.time.LocalDate] {
      def writes(x: org.joda.time.LocalDate) = {
        import org.joda.time.format.ISODateTimeFormat.date
        val str = date.print(x)
        JsString(str)
      }
    }

    implicit def jsonReadsBuiltInTypesArray: play.api.libs.json.Reads[Array] = {
      (
        (__ \ "boolean").read[Seq[Boolean]] and
        (__ \ "dateiso8601").read[Seq[_root_.org.joda.time.LocalDate]] and
        (__ \ "datetimeiso8601").read[Seq[_root_.org.joda.time.DateTime]] and
        (__ \ "decimal").read[Seq[BigDecimal]] and
        (__ \ "double").read[Seq[Double]] and
        (__ \ "integer").read[Seq[Int]] and
        (__ \ "json").read[Seq[_root_.play.api.libs.json.JsValue]] and
        (__ \ "long").read[Seq[Long]] and
        (__ \ "object").read[Seq[_root_.play.api.libs.json.JsObject]] and
        (__ \ "string").read[Seq[String]] and
        (__ \ "uuid").read[Seq[_root_.java.util.UUID]]
      )(Array.apply _)
    }

    def jsObjectArray(obj: apibuilder.models.Array): play.api.libs.json.JsObject = {
      play.api.libs.json.Json.obj(
        "boolean" -> play.api.libs.json.Json.toJson(obj.boolean),
        "dateiso8601" -> play.api.libs.json.Json.toJson(obj.dateiso8601),
        "datetimeiso8601" -> play.api.libs.json.Json.toJson(obj.datetimeiso8601),
        "decimal" -> play.api.libs.json.Json.toJson(obj.decimal),
        "double" -> play.api.libs.json.Json.toJson(obj.double),
        "integer" -> play.api.libs.json.Json.toJson(obj.integer),
        "json" -> play.api.libs.json.Json.toJson(obj.json),
        "long" -> play.api.libs.json.Json.toJson(obj.long),
        "object" -> play.api.libs.json.Json.toJson(obj.`object`),
        "string" -> play.api.libs.json.Json.toJson(obj.string),
        "uuid" -> play.api.libs.json.Json.toJson(obj.uuid)
      )
    }

    implicit def jsonWritesBuiltInTypesArray: play.api.libs.json.Writes[Array] = {
      new play.api.libs.json.Writes[apibuilder.models.Array] {
        def writes(obj: apibuilder.models.Array) = {
          jsObjectArray(obj)
        }
      }
    }

    implicit def jsonReadsBuiltInTypesOptarray: play.api.libs.json.Reads[Optarray] = {
      (
        (__ \ "boolean").readNullable[Seq[Boolean]] and
        (__ \ "dateiso8601").readNullable[Seq[_root_.org.joda.time.LocalDate]] and
        (__ \ "datetimeiso8601").readNullable[Seq[_root_.org.joda.time.DateTime]] and
        (__ \ "decimal").readNullable[Seq[BigDecimal]] and
        (__ \ "double").readNullable[Seq[Double]] and
        (__ \ "integer").readNullable[Seq[Int]] and
        (__ \ "json").readNullable[Seq[_root_.play.api.libs.json.JsValue]] and
        (__ \ "long").readNullable[Seq[Long]] and
        (__ \ "object").readNullable[Seq[_root_.play.api.libs.json.JsObject]] and
        (__ \ "string").readNullable[Seq[String]] and
        (__ \ "uuid").readNullable[Seq[_root_.java.util.UUID]]
      )(Optarray.apply _)
    }

    def jsObjectOptarray(obj: apibuilder.models.Optarray): play.api.libs.json.JsObject = {
      (obj.boolean match {
        case None => play.api.libs.json.Json.obj()
        case Some(x) => play.api.libs.json.Json.obj("boolean" -> play.api.libs.json.Json.toJson(x))
      }) ++
      (obj.dateiso8601 match {
        case None => play.api.libs.json.Json.obj()
        case Some(x) => play.api.libs.json.Json.obj("dateiso8601" -> play.api.libs.json.Json.toJson(x))
      }) ++
      (obj.datetimeiso8601 match {
        case None => play.api.libs.json.Json.obj()
        case Some(x) => play.api.libs.json.Json.obj("datetimeiso8601" -> play.api.libs.json.Json.toJson(x))
      }) ++
      (obj.decimal match {
        case None => play.api.libs.json.Json.obj()
        case Some(x) => play.api.libs.json.Json.obj("decimal" -> play.api.libs.json.Json.toJson(x))
      }) ++
      (obj.double match {
        case None => play.api.libs.json.Json.obj()
        case Some(x) => play.api.libs.json.Json.obj("double" -> play.api.libs.json.Json.toJson(x))
      }) ++
      (obj.integer match {
        case None => play.api.libs.json.Json.obj()
        case Some(x) => play.api.libs.json.Json.obj("integer" -> play.api.libs.json.Json.toJson(x))
      }) ++
      (obj.json match {
        case None => play.api.libs.json.Json.obj()
        case Some(x) => play.api.libs.json.Json.obj("json" -> play.api.libs.json.Json.toJson(x))
      }) ++
      (obj.long match {
        case None => play.api.libs.json.Json.obj()
        case Some(x) => play.api.libs.json.Json.obj("long" -> play.api.libs.json.Json.toJson(x))
      }) ++
      (obj.`object` match {
        case None => play.api.libs.json.Json.obj()
        case Some(x) => play.api.libs.json.Json.obj("object" -> play.api.libs.json.Json.toJson(x))
      }) ++
      (obj.string match {
        case None => play.api.libs.json.Json.obj()
        case Some(x) => play.api.libs.json.Json.obj("string" -> play.api.libs.json.Json.toJson(x))
      }) ++
      (obj.uuid match {
        case None => play.api.libs.json.Json.obj()
        case Some(x) => play.api.libs.json.Json.obj("uuid" -> play.api.libs.json.Json.toJson(x))
      })
    }

    implicit def jsonWritesBuiltInTypesOptarray: play.api.libs.json.Writes[Optarray] = {
      new play.api.libs.json.Writes[apibuilder.models.Optarray] {
        def writes(obj: apibuilder.models.Optarray) = {
          jsObjectOptarray(obj)
        }
      }
    }

    implicit def jsonReadsBuiltInTypesOptional: play.api.libs.json.Reads[Optional] = {
      (
        (__ \ "boolean").readNullable[Boolean] and
        (__ \ "dateiso8601").readNullable[_root_.org.joda.time.LocalDate] and
        (__ \ "datetimeiso8601").readNullable[_root_.org.joda.time.DateTime] and
        (__ \ "decimal").readNullable[BigDecimal] and
        (__ \ "double").readNullable[Double] and
        (__ \ "integer").readNullable[Int] and
        (__ \ "json").readNullable[_root_.play.api.libs.json.JsValue] and
        (__ \ "long").readNullable[Long] and
        (__ \ "object").readNullable[_root_.play.api.libs.json.JsObject] and
        (__ \ "string").readNullable[String] and
        (__ \ "uuid").readNullable[_root_.java.util.UUID]
      )(Optional.apply _)
    }

    def jsObjectOptional(obj: apibuilder.models.Optional): play.api.libs.json.JsObject = {
      (obj.boolean match {
        case None => play.api.libs.json.Json.obj()
        case Some(x) => play.api.libs.json.Json.obj("boolean" -> play.api.libs.json.JsBoolean(x))
      }) ++
      (obj.dateiso8601 match {
        case None => play.api.libs.json.Json.obj()
        case Some(x) => play.api.libs.json.Json.obj("dateiso8601" -> play.api.libs.json.JsString(x.toString))
      }) ++
      (obj.datetimeiso8601 match {
        case None => play.api.libs.json.Json.obj()
        case Some(x) => play.api.libs.json.Json.obj("datetimeiso8601" -> play.api.libs.json.JsString(_root_.org.joda.time.format.ISODateTimeFormat.dateTime.print(x)))
      }) ++
      (obj.decimal match {
        case None => play.api.libs.json.Json.obj()
        case Some(x) => play.api.libs.json.Json.obj("decimal" -> play.api.libs.json.JsNumber(x))
      }) ++
      (obj.double match {
        case None => play.api.libs.json.Json.obj()
        case Some(x) => play.api.libs.json.Json.obj("double" -> play.api.libs.json.JsNumber(x))
      }) ++
      (obj.integer match {
        case None => play.api.libs.json.Json.obj()
        case Some(x) => play.api.libs.json.Json.obj("integer" -> play.api.libs.json.JsNumber(x))
      }) ++
      (obj.json match {
        case None => play.api.libs.json.Json.obj()
        case Some(x) => play.api.libs.json.Json.obj("json" -> x)
      }) ++
      (obj.long match {
        case None => play.api.libs.json.Json.obj()
        case Some(x) => play.api.libs.json.Json.obj("long" -> play.api.libs.json.JsNumber(x))
      }) ++
      (obj.`object` match {
        case None => play.api.libs.json.Json.obj()
        case Some(x) => play.api.libs.json.Json.obj("object" -> x)
      }) ++
      (obj.string match {
        case None => play.api.libs.json.Json.obj()
        case Some(x) => play.api.libs.json.Json.obj("string" -> play.api.libs.json.JsString(x))
      }) ++
      (obj.uuid match {
        case None => play.api.libs.json.Json.obj()
        case Some(x) => play.api.libs.json.Json.obj("uuid" -> play.api.libs.json.JsString(x.toString))
      })
    }

    implicit def jsonWritesBuiltInTypesOptional: play.api.libs.json.Writes[Optional] = {
      new play.api.libs.json.Writes[apibuilder.models.Optional] {
        def writes(obj: apibuilder.models.Optional) = {
          jsObjectOptional(obj)
        }
      }
    }

    implicit def jsonReadsBuiltInTypesRequired: play.api.libs.json.Reads[Required] = {
      (
        (__ \ "boolean").read[Boolean] and
        (__ \ "dateiso8601").read[_root_.org.joda.time.LocalDate] and
        (__ \ "datetimeiso8601").read[_root_.org.joda.time.DateTime] and
        (__ \ "decimal").read[BigDecimal] and
        (__ \ "double").read[Double] and
        (__ \ "integer").read[Int] and
        (__ \ "json").read[_root_.play.api.libs.json.JsValue] and
        (__ \ "long").read[Long] and
        (__ \ "object").read[_root_.play.api.libs.json.JsObject] and
        (__ \ "string").read[String] and
        (__ \ "uuid").read[_root_.java.util.UUID]
      )(Required.apply _)
    }

    def jsObjectRequired(obj: apibuilder.models.Required): play.api.libs.json.JsObject = {
      play.api.libs.json.Json.obj(
        "boolean" -> play.api.libs.json.JsBoolean(obj.boolean),
        "dateiso8601" -> play.api.libs.json.JsString(obj.dateiso8601.toString),
        "datetimeiso8601" -> play.api.libs.json.JsString(_root_.org.joda.time.format.ISODateTimeFormat.dateTime.print(obj.datetimeiso8601)),
        "decimal" -> play.api.libs.json.JsNumber(obj.decimal),
        "double" -> play.api.libs.json.JsNumber(obj.double),
        "integer" -> play.api.libs.json.JsNumber(obj.integer),
        "json" -> obj.json,
        "long" -> play.api.libs.json.JsNumber(obj.long),
        "object" -> obj.`object`,
        "string" -> play.api.libs.json.JsString(obj.string),
        "uuid" -> play.api.libs.json.JsString(obj.uuid.toString)
      )
    }

    implicit def jsonWritesBuiltInTypesRequired: play.api.libs.json.Writes[Required] = {
      new play.api.libs.json.Writes[apibuilder.models.Required] {
        def writes(obj: apibuilder.models.Required) = {
          jsObjectRequired(obj)
        }
      }
    }
  }
}

package apibuilder {

  object Bindables {

    import play.api.mvc.{PathBindable, QueryStringBindable}
    import org.joda.time.{DateTime, LocalDate}
    import org.joda.time.format.ISODateTimeFormat
    import apibuilder.models._

    // Type: date-time-iso8601
    implicit val pathBindableTypeDateTimeIso8601 = new PathBindable.Parsing[org.joda.time.DateTime](
      ISODateTimeFormat.dateTimeParser.parseDateTime(_), _.toString, (key: String, e: _root_.java.lang.Exception) => s"Error parsing date time $key. Example: 2014-04-29T11:56:52Z"
    )

    implicit val queryStringBindableTypeDateTimeIso8601 = new QueryStringBindable.Parsing[org.joda.time.DateTime](
      ISODateTimeFormat.dateTimeParser.parseDateTime(_), _.toString, (key: String, e: _root_.java.lang.Exception) => s"Error parsing date time $key. Example: 2014-04-29T11:56:52Z"
    )

    // Type: date-iso8601
    implicit val pathBindableTypeDateIso8601 = new PathBindable.Parsing[org.joda.time.LocalDate](
      ISODateTimeFormat.yearMonthDay.parseLocalDate(_), _.toString, (key: String, e: _root_.java.lang.Exception) => s"Error parsing date $key. Example: 2014-04-29"
    )

    implicit val queryStringBindableTypeDateIso8601 = new QueryStringBindable.Parsing[org.joda.time.LocalDate](
      ISODateTimeFormat.yearMonthDay.parseLocalDate(_), _.toString, (key: String, e: _root_.java.lang.Exception) => s"Error parsing date $key. Example: 2014-04-29"
    )



  }

}


package apibuilder {

  object Constants {

    val Namespace = "apibuilder"
    val UserAgent = "apidoc:play_2x_client:unknown"
    val Version = "0.0.1-dev"
    val VersionMajor = 0

  }

  class Client(
    val baseUrl: String,
    auth: scala.Option[apibuilder.Authorization] = None,
    defaultHeaders: Seq[(String, String)] = Nil
  ) extends interfaces.Client {
    import apibuilder.models.json._

    private[this] val logger = play.api.Logger("apibuilder.Client")

    logger.info(s"Initializing apibuilder.Client for url $baseUrl")

    def arrays: Arrays = Arrays

    def optarrays: Optarrays = Optarrays

    def optionals: Optionals = Optionals

    def requireds: Requireds = Requireds

    object Arrays extends Arrays {
      override def get(
        requestHeaders: Seq[(String, String)] = Nil
      )(implicit ec: scala.concurrent.ExecutionContext): scala.concurrent.Future[apibuilder.models.Array] = {
        _executeRequest("GET", s"/arrays", requestHeaders = requestHeaders).map {
          case r if r.status == 200 => _root_.apibuilder.Client.parseJson("apibuilder.models.Array", r, _.validate[apibuilder.models.Array])
          case r => throw apibuilder.errors.FailedRequest(r.status, s"Unsupported response code[${r.status}]. Expected: 200")
        }
      }
    }

    object Optarrays extends Optarrays {
      override def get(
        requestHeaders: Seq[(String, String)] = Nil
      )(implicit ec: scala.concurrent.ExecutionContext): scala.concurrent.Future[apibuilder.models.Optarray] = {
        _executeRequest("GET", s"/optarrays", requestHeaders = requestHeaders).map {
          case r if r.status == 200 => _root_.apibuilder.Client.parseJson("apibuilder.models.Optarray", r, _.validate[apibuilder.models.Optarray])
          case r => throw apibuilder.errors.FailedRequest(r.status, s"Unsupported response code[${r.status}]. Expected: 200")
        }
      }
    }

    object Optionals extends Optionals {
      override def get(
        requestHeaders: Seq[(String, String)] = Nil
      )(implicit ec: scala.concurrent.ExecutionContext): scala.concurrent.Future[apibuilder.models.Optional] = {
        _executeRequest("GET", s"/optionals", requestHeaders = requestHeaders).map {
          case r if r.status == 200 => _root_.apibuilder.Client.parseJson("apibuilder.models.Optional", r, _.validate[apibuilder.models.Optional])
          case r => throw apibuilder.errors.FailedRequest(r.status, s"Unsupported response code[${r.status}]. Expected: 200")
        }
      }
    }

    object Requireds extends Requireds {
      override def get(
        requestHeaders: Seq[(String, String)] = Nil
      )(implicit ec: scala.concurrent.ExecutionContext): scala.concurrent.Future[apibuilder.models.Required] = {
        _executeRequest("GET", s"/requireds", requestHeaders = requestHeaders).map {
          case r if r.status == 200 => _root_.apibuilder.Client.parseJson("apibuilder.models.Required", r, _.validate[apibuilder.models.Required])
          case r => throw apibuilder.errors.FailedRequest(r.status, s"Unsupported response code[${r.status}]. Expected: 200")
        }
      }
    }

    def _requestHolder(path: String): play.api.libs.ws.WSRequestHolder = {
      import play.api.Play.current

      val holder = play.api.libs.ws.WS.url(baseUrl + path).withHeaders(
        "User-Agent" -> Constants.UserAgent,
        "X-Apidoc-Version" -> Constants.Version,
        "X-Apidoc-Version-Major" -> Constants.VersionMajor.toString
      ).withHeaders(defaultHeaders : _*)
      auth.fold(holder) {
        case Authorization.Basic(username, password) => {
          holder.withAuth(username, password.getOrElse(""), play.api.libs.ws.WSAuthScheme.BASIC)
        }
        case a => sys.error("Invalid authorization scheme[" + a.getClass + "]")
      }
    }

    def _logRequest(method: String, req: play.api.libs.ws.WSRequestHolder)(implicit ec: scala.concurrent.ExecutionContext): play.api.libs.ws.WSRequestHolder = {
      val queryComponents = for {
        (name, values) <- req.queryString
        value <- values
      } yield s"$name=$value"
      val url = s"${req.url}${queryComponents.mkString("?", "&", "")}"
      auth.fold(logger.info(s"curl -X $method $url")) { _ =>
        logger.info(s"curl -X $method -u '[REDACTED]:' $url")
      }
      req
    }

    def _executeRequest(
      method: String,
      path: String,
      queryParameters: Seq[(String, String)] = Nil,
      requestHeaders: Seq[(String, String)] = Nil,
      body: Option[play.api.libs.json.JsValue] = None
    )(implicit ec: scala.concurrent.ExecutionContext): scala.concurrent.Future[play.api.libs.ws.WSResponse] = {
      method.toUpperCase match {
        case "GET" => {
          _logRequest("GET", _requestHolder(path).withHeaders(requestHeaders:_*).withQueryString(queryParameters:_*)).get()
        }
        case "POST" => {
          _logRequest("POST", _requestHolder(path).withHeaders(_withJsonContentType(requestHeaders):_*).withQueryString(queryParameters:_*)).post(body.getOrElse(play.api.libs.json.Json.obj()))
        }
        case "PUT" => {
          _logRequest("PUT", _requestHolder(path).withHeaders(_withJsonContentType(requestHeaders):_*).withQueryString(queryParameters:_*)).put(body.getOrElse(play.api.libs.json.Json.obj()))
        }
        case "PATCH" => {
          _logRequest("PATCH", _requestHolder(path).withHeaders(requestHeaders:_*).withQueryString(queryParameters:_*)).patch(body.getOrElse(play.api.libs.json.Json.obj()))
        }
        case "DELETE" => {
          _logRequest("DELETE", _requestHolder(path).withHeaders(requestHeaders:_*).withQueryString(queryParameters:_*)).delete()
        }
         case "HEAD" => {
          _logRequest("HEAD", _requestHolder(path).withHeaders(requestHeaders:_*).withQueryString(queryParameters:_*)).head()
        }
         case "OPTIONS" => {
          _logRequest("OPTIONS", _requestHolder(path).withHeaders(requestHeaders:_*).withQueryString(queryParameters:_*)).options()
        }
        case _ => {
          _logRequest(method, _requestHolder(path).withHeaders(requestHeaders:_*).withQueryString(queryParameters:_*))
          sys.error("Unsupported method[%s]".format(method))
        }
      }
    }

    /**
     * Adds a Content-Type: application/json header unless the specified requestHeaders
     * already contain a Content-Type header
     */
    def _withJsonContentType(headers: Seq[(String, String)]): Seq[(String, String)] = {
      headers.find { _._1.toUpperCase == "CONTENT-TYPE" } match {
        case None => headers ++ Seq(("Content-Type" -> "application/json; charset=UTF-8"))
        case Some(_) => headers
      }
    }

  }

  object Client {

    def parseJson[T](
      className: String,
      r: play.api.libs.ws.WSResponse,
      f: (play.api.libs.json.JsValue => play.api.libs.json.JsResult[T])
    ): T = {
      f(play.api.libs.json.Json.parse(r.body)) match {
        case play.api.libs.json.JsSuccess(x, _) => x
        case play.api.libs.json.JsError(errors) => {
          throw apibuilder.errors.FailedRequest(r.status, s"Invalid json for class[" + className + "]: " + errors.mkString(" "))
        }
      }
    }

  }

  sealed trait Authorization extends _root_.scala.Product with _root_.scala.Serializable
  object Authorization {
    case class Basic(username: String, password: Option[String] = None) extends Authorization
  }

  package interfaces {

    trait Client {
      def baseUrl: String
      def arrays: apibuilder.Arrays
      def optarrays: apibuilder.Optarrays
      def optionals: apibuilder.Optionals
      def requireds: apibuilder.Requireds
    }

  }

  trait Arrays {
    def get(
      requestHeaders: Seq[(String, String)] = Nil
    )(implicit ec: scala.concurrent.ExecutionContext): scala.concurrent.Future[apibuilder.models.Array]
  }

  trait Optarrays {
    def get(
      requestHeaders: Seq[(String, String)] = Nil
    )(implicit ec: scala.concurrent.ExecutionContext): scala.concurrent.Future[apibuilder.models.Optarray]
  }

  trait Optionals {
    def get(
      requestHeaders: Seq[(String, String)] = Nil
    )(implicit ec: scala.concurrent.ExecutionContext): scala.concurrent.Future[apibuilder.models.Optional]
  }

  trait Requireds {
    def get(
      requestHeaders: Seq[(String, String)] = Nil
    )(implicit ec: scala.concurrent.ExecutionContext): scala.concurrent.Future[apibuilder.models.Required]
  }

  package errors {

    case class FailedRequest(responseCode: Int, message: String, requestUri: Option[_root_.java.net.URI] = None) extends _root_.java.lang.Exception(s"HTTP $responseCode: $message")

  }

}
