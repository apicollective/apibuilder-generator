package errors {

  import io.apibuilder.common.v0.models.json._
  import io.apibuilder.generator.v0.models.json._
  import io.apibuilder.spec.v0.models.json._

  final case class ErrorsResponse(
    response: play.api.libs.ws.WSResponse,
    message: Option[String] = None
  ) extends Exception(message.getOrElse(s"${response.status}: ${response.body}")) {
    lazy val errors = _root_.test.apidoc.Client.parseJson("Seq[io.apibuilder.generator.v0.models.Error]", response, _.validate[Seq[io.apibuilder.generator.v0.models.Error]])
  }

  final case class UnitResponse(status: Int) extends Exception(s"HTTP $status")

  final case class FailedRequest(responseCode: Int, message: String, requestUri: Option[_root_.java.net.URI] = None) extends _root_.java.lang.Exception(s"HTTP $responseCode: $message")

}