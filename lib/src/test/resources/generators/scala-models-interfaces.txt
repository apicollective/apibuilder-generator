/**
 * Generated by API Builder - https://www.apibuilder.io
 * Service version: 0.0.1-dev
 */
package apibuilder.models {

  trait Shape {
    def area: Double
    def numSides: Int
    @deprecated("unused") def description: String
  }
  sealed trait Vehicle extends _root_.scala.Product with _root_.scala.Serializable {
    def fuelType: apibuilder.models.FuelType
    def weight: Double
    def maxSpeed: Double

  }
  final case class Apple(
    @deprecated("unused") colour: String
  )

  final case class Car(
    override val fuelType: apibuilder.models.FuelType,
    override val weight: Double,
    @deprecated("unused") override val maxSpeed: Double,
    make: String,
    model: String
  ) extends Vehicle

  final case class Circle(
    override val area: Double,
    override val numSides: Int,
    @deprecated("unused") override val description: String,
    radius: Double
  ) extends Shape

  final case class Ship(
    override val fuelType: apibuilder.models.FuelType,
    override val weight: Double,
    @deprecated("unused") override val maxSpeed: Double,
    manufacturer: String,
    @deprecated("unused") model: String
  ) extends Vehicle

  final case class Square(
    override val area: Double,
    override val numSides: Int,
    @deprecated("unused") override val description: String,
    length: Double
  ) extends Shape

  /**
   * Provides future compatibility in clients - in the future, when a type is added
   * to the union Vehicle, it will need to be handled in the client code. This
   * implementation will deserialize these future types as an instance of this class.
   *
   * @param description Information about the type that we received that is undefined in this version of
   *        the client.
   */

  final case class VehicleUndefinedType(
    description: String
  ) extends Vehicle {
    override def fuelType: apibuilder.models.FuelType = ???
    override def weight: Double = ???
    override def maxSpeed: Double = ???
  }
  sealed trait FuelType extends _root_.scala.Product with _root_.scala.Serializable

  object FuelType {

    case object Petrol extends FuelType { override def toString = "petrol" }
    case object Diesel extends FuelType { override def toString = "diesel" }
    /**
     * UNDEFINED captures values that are sent either in error or
     * that were added by the server after this library was
     * generated. We want to make it easy and obvious for users of
     * this library to handle this case gracefully.
     *
     * We use all CAPS for the variable name to avoid collisions
     * with the camel cased values above.
     */
    final case class UNDEFINED(override val toString: String) extends FuelType

    /**
     * all returns a list of all the valid, known values. We use
     * lower case to avoid collisions with the camel cased values
     * above.
     */
    val all: scala.List[FuelType] = scala.List(Petrol, Diesel)

    private[this]
    val byName: Map[String, FuelType] = all.map(x => x.toString.toLowerCase -> x).toMap

    def apply(value: String): FuelType = fromString(value).getOrElse(UNDEFINED(value))

    def fromString(value: String): _root_.scala.Option[FuelType] = byName.get(value.toLowerCase)

  }

}