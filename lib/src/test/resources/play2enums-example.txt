sealed trait AgeGroup extends _root_.scala.Product with _root_.scala.Serializable

object AgeGroup {

  case object Twenties extends AgeGroup { override def toString = "twenties" }
  case object Thirties extends AgeGroup { override def toString = "thirties" }

  /**
   * UNDEFINED captures values that are sent either in error or
   * that were added by the server after this library was
   * generated. We want to make it easy and obvious for users of
   * this library to handle this case gracefully.
   *
   * We use all CAPS for the variable name to avoid collisions
   * with the camel cased values above.
   */
  case class UNDEFINED(override val toString: String) extends AgeGroup

  /**
   * all returns a list of all the valid, known values. We use
   * lower case to avoid collisions with the camel cased values
   * above.
   */
  val all: scala.List[AgeGroup] = scala.List(Twenties, Thirties)

  private[this]
  val byName: Map[String, AgeGroup] = all.map(x => x.toString.toLowerCase -> x).toMap

  def apply(value: String)(implicit onUndefined: String => Unit = _ => {}): AgeGroup = fromString(value).getOrElse {
  	onUndefined(value)
  	UNDEFINED(value)
  }

  def fromString(value: String): _root_.scala.Option[AgeGroup] = byName.get(value.toLowerCase)

}

sealed trait Genre extends _root_.scala.Product with _root_.scala.Serializable

object Genre {

  case object Classical extends Genre { override def toString = "Classical" }
  case object Jazz extends Genre { override def toString = "Jazz" }

  /**
   * UNDEFINED captures values that are sent either in error or
   * that were added by the server after this library was
   * generated. We want to make it easy and obvious for users of
   * this library to handle this case gracefully.
   *
   * We use all CAPS for the variable name to avoid collisions
   * with the camel cased values above.
   */
  case class UNDEFINED(override val toString: String) extends Genre

  /**
   * all returns a list of all the valid, known values. We use
   * lower case to avoid collisions with the camel cased values
   * above.
   */
  val all: scala.List[Genre] = scala.List(Classical, Jazz)

  private[this]
  val byName: Map[String, Genre] = all.map(x => x.toString.toLowerCase -> x).toMap

  def apply(value: String)(implicit onUndefined: String => Unit = _ => {}): Genre = fromString(value).getOrElse {
  	onUndefined(value)
  	UNDEFINED(value)
  }

  def fromString(value: String): _root_.scala.Option[Genre] = byName.get(value.toLowerCase)

}