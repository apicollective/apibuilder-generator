/**
 * Generated by API Builder - https://www.apibuilder.io
 * Service version: 0.0.1-dev
 */
package io.gregor.time.types.v0.server

import org.http4s.circe.decodeUri
import org.http4s.circe.encodeUri
import org.http4s.dsl.{io => _, _}
import org.http4s.implicits._
import cats.effect._
import cats.implicits._
import io.gregor.time.types.v0.models.json._

private[server] trait Matchers[F[_]] extends Http4sDsl[F] {

  implicit lazy val queryParamDecodeBigDecimal: org.http4s.QueryParamDecoder[BigDecimal] =
    org.http4s.QueryParamDecoder.fromUnsafeCast[BigDecimal](p => BigDecimal(p.value))("BigDecimal")

  implicit lazy val queryParamDecodeOffsetDateTime: org.http4s.QueryParamDecoder[_root_.java.time.OffsetDateTime] =
    org.http4s.QueryParamDecoder.fromUnsafeCast[_root_.java.time.OffsetDateTime](p => _root_.java.time.OffsetDateTime.parse(p.value))("_root_.java.time.OffsetDateTime")

  implicit lazy val queryParamDecodeLocalDate: org.http4s.QueryParamDecoder[_root_.java.time.LocalDate] =
    org.http4s.QueryParamDecoder.fromUnsafeCast[_root_.java.time.LocalDate](p => _root_.java.time.LocalDate.parse(p.value))("_root_.java.time.LocalDate")

  implicit lazy val queryParamDecodeUUID: org.http4s.QueryParamDecoder[_root_.java.util.UUID] =
    org.http4s.QueryParamDecoder.fromUnsafeCast[_root_.java.util.UUID](p => _root_.java.util.UUID.fromString(p.value))("_root_.java.util.UUID")


  object ApiVersion {
    val ApiVersionMajor = {
      "X-Apidoc-Version-Major".ci
    }

    def apply(req: org.http4s.Message[F]): Boolean = req.headers.get(ApiVersionMajor) match {
      case Some(v) if v.value == "0" => true
      case _ => false
    }
  }

  object LocalDateVal {
    def unapply(s: String): Option[_root_.java.time.LocalDate] = scala.util.Try(_root_.java.time.LocalDate.parse(s)).toOption
  }

  object OffsetDateTimeVal {
    def unapply(s: String): Option[_root_.java.time.OffsetDateTime] = scala.util.Try(_root_.java.time.OffsetDateTime.parse(s)).toOption
  }

  object QueryDateLocalDateMatcher extends QueryParamDecoderMatcher[_root_.java.time.LocalDate]("query_date")

  object QueryTimeOffsetDateTimeMatcher extends QueryParamDecoderMatcher[_root_.java.time.OffsetDateTime]("query_time")
}

trait DateTimeModelRoutes[F[_]] extends Matchers[F] {

  implicit def circeJsonDecoder[A](implicit decoder: _root_.io.circe.Decoder[A], sync: Sync[F]) = org.http4s.circe.jsonOf[F, A]
  implicit def circeJsonEncoder[A](implicit encoder: _root_.io.circe.Encoder[A], sync: Sync[F]) = org.http4s.circe.jsonEncoderOf[F, A]

  sealed trait PostByPathDateAndPathTimeResponse

  object PostByPathDateAndPathTimeResponse {
    case class HTTP200(value: io.gregor.time.types.v0.models.DateTimeModel, headers: Seq[org.http4s.Header] = Nil) extends PostByPathDateAndPathTimeResponse
    case class UndocumentedResponse(response: F[org.http4s.Response[F]]) extends PostByPathDateAndPathTimeResponse
  }

  def postByPathDateAndPathTime(
    _req: org.http4s.Request[F],
    pathDate: _root_.java.time.LocalDate,
    pathTime: _root_.java.time.OffsetDateTime,
    queryDate: _root_.java.time.LocalDate,
    queryTime: _root_.java.time.OffsetDateTime,
    body: => org.http4s.DecodeResult[F, io.gregor.time.types.v0.models.DateTimeModel]
  ): F[PostByPathDateAndPathTimeResponse]

  def apiVersionMatch(req: org.http4s.Message[F]): Boolean = ApiVersion(req)

  def service()(implicit sync: Sync[F]) = org.http4s.HttpRoutes.of[F] {
    case _req @ POST -> Root / "date_time_models" / LocalDateVal(pathDate) / OffsetDateTimeVal(pathTime) :? QueryDateLocalDateMatcher(queryDate) +& QueryTimeOffsetDateTimeMatcher(queryTime) if apiVersionMatch(_req) =>
      postByPathDateAndPathTime(_req, pathDate, pathTime, queryDate, queryTime, _req.attemptAs[io.gregor.time.types.v0.models.DateTimeModel]).flatMap {
        case PostByPathDateAndPathTimeResponse.HTTP200(value, headers) => Ok(value, headers: _*)
        case PostByPathDateAndPathTimeResponse.UndocumentedResponse(response) => response
      }
    case _req @ POST -> Root / "date_time_models" / LocalDateVal(pathDate) / OffsetDateTimeVal(pathTime) :? QueryDateLocalDateMatcher(queryDate) +& QueryTimeOffsetDateTimeMatcher(queryTime) if !_req.headers.get(ApiVersion.ApiVersionMajor).isDefined =>
      BadRequest(s"Missing required request header: ${ApiVersion.ApiVersionMajor}.")
  }
}