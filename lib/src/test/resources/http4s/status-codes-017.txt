package me.gheine.status.codes.v0.server

import org.http4s.dsl._

import me.gheine.status.codes.v0.models.json._

private[server] object Matchers {

  implicit lazy val bigDecimalDateQueryParamDecoder: org.http4s.QueryParamDecoder[BigDecimal] =
    org.http4s.QueryParamDecoder.fromUnsafeCast[BigDecimal](p => BigDecimal(p.value))("BigDecimal")

  implicit lazy val instantQueryParamDecoder: org.http4s.QueryParamDecoder[java.time.Instant] =
    org.http4s.QueryParamDecoder.fromUnsafeCast[java.time.Instant](p => java.time.Instant.parse(p.value))("java.time.Instant")

  implicit lazy val localDateQueryParamDecoder: org.http4s.QueryParamDecoder[java.time.LocalDate] =
    org.http4s.QueryParamDecoder.fromUnsafeCast[java.time.LocalDate](p => java.time.LocalDate.parse(p.value))("java.time.LocalDate")

  implicit lazy val uuidQueryParamDecoder: org.http4s.QueryParamDecoder[java.util.UUID] =
    org.http4s.QueryParamDecoder.fromUnsafeCast[java.util.UUID](p => java.util.UUID.fromString(p.value))("java.util.UUID")


  object ApiVersion {
    val ApiVersionMajor = {
      "X-Apidoc-Version-Major".ci
    }

    def apply(req: org.http4s.Message): Boolean = req.headers.get(ApiVersionMajor) match {
      case Some(v) if v.value == "0" => true
      case _ => false
    }
  }


}

trait FooRoutes {

  import Matchers._

  implicit def circeJsonDecoder[A](implicit decoder: _root_.io.circe.Decoder[A]) = org.http4s.circe.jsonOf[A]
  implicit def circeJsonEncoder[A](implicit encoder: _root_.io.circe.Encoder[A]) = org.http4s.circe.jsonEncoderOf[A]

  sealed trait Get200Response

  object Get200Response {
    case class HTTP200(value: String, headers: Seq[org.http4s.Header] = Nil) extends Get200Response
    case class HTTP401(challenge: org.http4s.Challenge, challenges: Seq[org.http4s.Challenge] = Nil, headers: Seq[org.http4s.Header] = Nil) extends Get200Response
    case class UndocumentedResponse(response: fs2.Task[org.http4s.Response]) extends Get200Response
  }

  def get200(
    _req: org.http4s.Request
  ): fs2.Task[Get200Response]

  sealed trait Get205Response

  object Get205Response {
    case class HTTP205(headers: Seq[org.http4s.Header] = Nil) extends Get205Response
    case class UndocumentedResponse(response: fs2.Task[org.http4s.Response]) extends Get205Response
  }

  def get205(
    _req: org.http4s.Request
  ): fs2.Task[Get205Response]

  sealed trait Get300Response

  object Get300Response {
    case class HTTP300(location: org.http4s.Uri, headers: Seq[org.http4s.Header] = Nil) extends Get300Response
    case class UndocumentedResponse(response: fs2.Task[org.http4s.Response]) extends Get300Response
  }

  def get300(
    _req: org.http4s.Request
  ): fs2.Task[Get300Response]

  sealed trait Get401Response

  object Get401Response {
    case class HTTP401(value: String, challenge: org.http4s.Challenge, challenges: Seq[org.http4s.Challenge] = Nil, headers: Seq[org.http4s.Header] = Nil) extends Get401Response
    case class UndocumentedResponse(response: fs2.Task[org.http4s.Response]) extends Get401Response
  }

  def get401(
    _req: org.http4s.Request
  ): fs2.Task[Get401Response]

  def apiVersionMatch(req: org.http4s.Message): Boolean = ApiVersion(req)

  def service() = org.http4s.HttpService {
    case _req @ GET -> Root / "foos" / "200" if apiVersionMatch(_req) =>
      get200(_req).flatMap {
        case Get200Response.HTTP200(value, headers) => Ok(value).putHeaders(headers: _*)
        case Get200Response.HTTP401(challenge, challenges, headers) => Unauthorized(challenge, challenges: _*).putHeaders(headers: _*)
        case Get200Response.UndocumentedResponse(response) => response
      }
    case _req @ GET -> Root / "foos" / "200" if !_req.headers.get(ApiVersion.ApiVersionMajor).isDefined =>
      BadRequest(s"Missing required request header: ${ApiVersion.ApiVersionMajor}.")

    case _req @ GET -> Root / "foos" / "205" if apiVersionMatch(_req) =>
      get205(_req).flatMap {
        case Get205Response.HTTP205(headers) => ResetContent().putHeaders(headers: _*)
        case Get205Response.UndocumentedResponse(response) => response
      }
    case _req @ GET -> Root / "foos" / "205" if !_req.headers.get(ApiVersion.ApiVersionMajor).isDefined =>
      BadRequest(s"Missing required request header: ${ApiVersion.ApiVersionMajor}.")

    case _req @ GET -> Root / "foos" / "300" if apiVersionMatch(_req) =>
      get300(_req).flatMap {
        case Get300Response.HTTP300(location, headers) => MultipleChoices(location).putHeaders(headers: _*)
        case Get300Response.UndocumentedResponse(response) => response
      }
    case _req @ GET -> Root / "foos" / "300" if !_req.headers.get(ApiVersion.ApiVersionMajor).isDefined =>
      BadRequest(s"Missing required request header: ${ApiVersion.ApiVersionMajor}.")

    case _req @ GET -> Root / "foos" / "401" if apiVersionMatch(_req) =>
      get401(_req).flatMap {
        case Get401Response.HTTP401(value, challenge, challenges, headers) => Unauthorized(challenge, challenges: _*).putHeaders(headers: _*)
        case Get401Response.UndocumentedResponse(response) => response
      }
    case _req @ GET -> Root / "foos" / "401" if !_req.headers.get(ApiVersion.ApiVersionMajor).isDefined =>
      BadRequest(s"Missing required request header: ${ApiVersion.ApiVersionMajor}.")
  }
}