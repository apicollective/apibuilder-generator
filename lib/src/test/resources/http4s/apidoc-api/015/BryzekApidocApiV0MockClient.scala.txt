/**
 * Generated by API Builder - https://www.apibuilder.io
 * Service version: 0.11.17
 */
package io.apibuilder.api.v0.mock {

  trait Client extends io.apibuilder.api.v0.interfaces.Client {

    val baseUrl: org.http4s.Uri = org.http4s.Uri.unsafeFromString("http://mock.localhost")

    override def applications: io.apibuilder.api.v0.Applications = MockApplicationsImpl
    override def attributes: io.apibuilder.api.v0.Attributes = MockAttributesImpl
    override def changes: io.apibuilder.api.v0.Changes = MockChangesImpl
    override def code: io.apibuilder.api.v0.Code = MockCodeImpl
    override def healthchecks: io.apibuilder.api.v0.Healthchecks = MockHealthchecksImpl
    override def domains: io.apibuilder.api.v0.Domains = MockDomainsImpl
    override def emailVerificationConfirmationForms: io.apibuilder.api.v0.EmailVerificationConfirmationForms = MockEmailVerificationConfirmationFormsImpl
    override def generatorServices: io.apibuilder.api.v0.GeneratorServices = MockGeneratorServicesImpl
    override def generatorWithServices: io.apibuilder.api.v0.GeneratorWithServices = MockGeneratorWithServicesImpl
    override def items: io.apibuilder.api.v0.Items = MockItemsImpl
    override def memberships: io.apibuilder.api.v0.Memberships = MockMembershipsImpl
    override def membershipRequests: io.apibuilder.api.v0.MembershipRequests = MockMembershipRequestsImpl
    override def organizations: io.apibuilder.api.v0.Organizations = MockOrganizationsImpl
    override def passwordResets: io.apibuilder.api.v0.PasswordResets = MockPasswordResetsImpl
    override def passwordResetRequests: io.apibuilder.api.v0.PasswordResetRequests = MockPasswordResetRequestsImpl
    override def subscriptions: io.apibuilder.api.v0.Subscriptions = MockSubscriptionsImpl
    override def tokens: io.apibuilder.api.v0.Tokens = MockTokensImpl
    override def users: io.apibuilder.api.v0.Users = MockUsersImpl
    override def validations: io.apibuilder.api.v0.Validations = MockValidationsImpl
    override def versions: io.apibuilder.api.v0.Versions = MockVersionsImpl
    override def watches: io.apibuilder.api.v0.Watches = MockWatchesImpl

  }

  object MockApplicationsImpl extends MockApplications

  trait MockApplications extends io.apibuilder.api.v0.Applications {

    /**
     * Search all applications. Results are always paginated.
     * 
     * @param orgKey The organization key for which to search applications
     * @param name The name of an application. Case in-sensitive. Exact match
     * @param guid The guid of an application. Exact match
     * @param key The key of an application. Case in-sensitive. Exact match
     * @param hasVersion If true, we return applications that have at least one version. If false, we
     *        return applications that have no versions in the system
     * @param limit The number of records to return
     * @param offset Used to paginate. First page of results is 0.
     */
    def get(
      orgKey: String,
      name: _root_.scala.Option[String] = None,
      guid: _root_.scala.Option[_root_.java.util.UUID] = None,
      key: _root_.scala.Option[String] = None,
      hasVersion: _root_.scala.Option[Boolean] = None,
      limit: Long = 25L,
      offset: Long = 0L,
      requestHeaders: Seq[(String, String)] = Nil
    ): scalaz.concurrent.Task[Seq[io.apibuilder.api.v0.models.Application]] = scalaz.concurrent.Task.now {
      Nil
    }

    /**
     * Create an application.
     */
    def post(
      orgKey: String,
      applicationForm: io.apibuilder.api.v0.models.ApplicationForm,
      requestHeaders: Seq[(String, String)] = Nil
    ): scalaz.concurrent.Task[io.apibuilder.api.v0.models.Application] = scalaz.concurrent.Task.now {
      io.apibuilder.api.v0.mock.Factories.makeApplication()
    }

    /**
     * Updates an application.
     */
    def putByApplicationKey(
      orgKey: String,
      applicationKey: String,
      applicationForm: io.apibuilder.api.v0.models.ApplicationForm,
      requestHeaders: Seq[(String, String)] = Nil
    ): scalaz.concurrent.Task[io.apibuilder.api.v0.models.Application] = scalaz.concurrent.Task.now {
      io.apibuilder.api.v0.mock.Factories.makeApplication()
    }

    /**
     * Deletes a specific application and its associated versions.
     */
    def deleteByApplicationKey(
      orgKey: String,
      applicationKey: String,
      requestHeaders: Seq[(String, String)] = Nil
    ): scalaz.concurrent.Task[Unit] = scalaz.concurrent.Task.now {
      // unit type
    }

    /**
     * Moves application to a new organization.
     */
    def postMoveByApplicationKey(
      orgKey: String,
      applicationKey: String,
      moveForm: io.apibuilder.api.v0.models.MoveForm,
      requestHeaders: Seq[(String, String)] = Nil
    ): scalaz.concurrent.Task[io.apibuilder.api.v0.models.Application] = scalaz.concurrent.Task.now {
      io.apibuilder.api.v0.mock.Factories.makeApplication()
    }

  }

  object MockAttributesImpl extends MockAttributes

  trait MockAttributes extends io.apibuilder.api.v0.Attributes {

    /**
     * Search all attributes. Results are always paginated.
     * 
     * @param guid Find the watch with this guid.
     * @param name Find attributes with this name. Case in-sensitive. Exact match
     * @param limit The number of records to return
     * @param offset Used to paginate. First page of results is 0.
     */
    def get(
      guid: _root_.scala.Option[_root_.java.util.UUID] = None,
      name: _root_.scala.Option[String] = None,
      limit: Long = 25L,
      offset: Long = 0L,
      requestHeaders: Seq[(String, String)] = Nil
    ): scalaz.concurrent.Task[Seq[io.apibuilder.api.v0.models.Attribute]] = scalaz.concurrent.Task.now {
      Nil
    }

    /**
     * Returns the attribute with this name.
     */
    def getByName(
      name: String,
      requestHeaders: Seq[(String, String)] = Nil
    ): scalaz.concurrent.Task[io.apibuilder.api.v0.models.Attribute] = scalaz.concurrent.Task.now {
      io.apibuilder.api.v0.mock.Factories.makeAttribute()
    }

    /**
     * Create a new attribute.
     */
    def post(
      attributeForm: io.apibuilder.api.v0.models.AttributeForm,
      requestHeaders: Seq[(String, String)] = Nil
    ): scalaz.concurrent.Task[io.apibuilder.api.v0.models.Attribute] = scalaz.concurrent.Task.now {
      io.apibuilder.api.v0.mock.Factories.makeAttribute()
    }

    /**
     * Deletes the attribute with this name. Only the user who created an attribute can
     * delete it.
     */
    def deleteByName(
      name: String,
      requestHeaders: Seq[(String, String)] = Nil
    ): scalaz.concurrent.Task[Unit] = scalaz.concurrent.Task.now {
      // unit type
    }

  }

  object MockChangesImpl extends MockChanges

  trait MockChanges extends io.apibuilder.api.v0.Changes {

    /**
     * @param orgKey Filter changes to those made for the organization with this key.
     * @param applicationKey Filter changes to those made for the application with this key.
     * @param limit The number of records to return
     * @param offset Used to paginate. First page of results is 0.
     */
    def get(
      orgKey: _root_.scala.Option[String] = None,
      applicationKey: _root_.scala.Option[String] = None,
      limit: Long = 25L,
      offset: Long = 0L,
      requestHeaders: Seq[(String, String)] = Nil
    ): scalaz.concurrent.Task[Seq[io.apibuilder.api.v0.models.Change]] = scalaz.concurrent.Task.now {
      Nil
    }

  }

  object MockCodeImpl extends MockCode

  trait MockCode extends io.apibuilder.api.v0.Code {

    /**
     * Generate code for a specific version of an application.
     * 
     * @param orgKey The organization key for which to generate code
     * @param applicationKey The application key for which to generate code
     * @param version The version of this application. Can be 'latest'
     * @param generatorKey The key of the generator to invoke
     */
    def get(
      orgKey: String,
      applicationKey: String,
      version: String,
      generatorKey: String,
      requestHeaders: Seq[(String, String)] = Nil
    ): scalaz.concurrent.Task[io.apibuilder.api.v0.models.Code] = scalaz.concurrent.Task.now {
      io.apibuilder.api.v0.mock.Factories.makeCode()
    }

  }

  object MockHealthchecksImpl extends MockHealthchecks

  trait MockHealthchecks extends io.apibuilder.api.v0.Healthchecks {

    def getHealthcheck(
      requestHeaders: Seq[(String, String)] = Nil
    ): scalaz.concurrent.Task[io.apibuilder.generator.v0.models.Healthcheck] = scalaz.concurrent.Task.now {
      io.apibuilder.generator.v0.mock.Factories.makeHealthcheck()
    }

    def getMigrate(
      requestHeaders: Seq[(String, String)] = Nil
    ): scalaz.concurrent.Task[Map[String, String]] = scalaz.concurrent.Task.now {
      Map()
    }

  }

  object MockDomainsImpl extends MockDomains

  trait MockDomains extends io.apibuilder.api.v0.Domains {

    /**
     * Add a domain to this organization
     */
    def post(
      orgKey: String,
      domain: io.apibuilder.api.v0.models.Domain,
      requestHeaders: Seq[(String, String)] = Nil
    ): scalaz.concurrent.Task[io.apibuilder.api.v0.models.Domain] = scalaz.concurrent.Task.now {
      io.apibuilder.api.v0.mock.Factories.makeDomain()
    }

    /**
     * Remove this domain from this organization
     */
    def deleteByName(
      orgKey: String,
      name: String,
      requestHeaders: Seq[(String, String)] = Nil
    ): scalaz.concurrent.Task[Unit] = scalaz.concurrent.Task.now {
      // unit type
    }

  }

  object MockEmailVerificationConfirmationFormsImpl extends MockEmailVerificationConfirmationForms

  trait MockEmailVerificationConfirmationForms extends io.apibuilder.api.v0.EmailVerificationConfirmationForms {

    /**
     * Validate an email address using a token.
     */
    def post(
      emailVerificationConfirmationForm: io.apibuilder.api.v0.models.EmailVerificationConfirmationForm,
      requestHeaders: Seq[(String, String)] = Nil
    ): scalaz.concurrent.Task[Unit] = scalaz.concurrent.Task.now {
      // unit type
    }

  }

  object MockGeneratorServicesImpl extends MockGeneratorServices

  trait MockGeneratorServices extends io.apibuilder.api.v0.GeneratorServices {

    /**
     * List all generator services
     * 
     * @param limit The number of records to return
     * @param offset Used to paginate. First page of results is 0.
     */
    def get(
      guid: _root_.scala.Option[_root_.java.util.UUID] = None,
      uri: _root_.scala.Option[String] = None,
      generatorKey: _root_.scala.Option[String] = None,
      limit: Long = 100L,
      offset: Long = 0L,
      requestHeaders: Seq[(String, String)] = Nil
    ): scalaz.concurrent.Task[Seq[io.apibuilder.api.v0.models.GeneratorService]] = scalaz.concurrent.Task.now {
      Nil
    }

    def getByGuid(
      guid: _root_.java.util.UUID,
      requestHeaders: Seq[(String, String)] = Nil
    ): scalaz.concurrent.Task[io.apibuilder.api.v0.models.GeneratorService] = scalaz.concurrent.Task.now {
      io.apibuilder.api.v0.mock.Factories.makeGeneratorService()
    }

    def post(
      generatorServiceForm: io.apibuilder.api.v0.models.GeneratorServiceForm,
      requestHeaders: Seq[(String, String)] = Nil
    ): scalaz.concurrent.Task[io.apibuilder.api.v0.models.GeneratorService] = scalaz.concurrent.Task.now {
      io.apibuilder.api.v0.mock.Factories.makeGeneratorService()
    }

    /**
     * Deletes a generator service.
     */
    def deleteByGuid(
      guid: _root_.java.util.UUID,
      requestHeaders: Seq[(String, String)] = Nil
    ): scalaz.concurrent.Task[Unit] = scalaz.concurrent.Task.now {
      // unit type
    }

  }

  object MockGeneratorWithServicesImpl extends MockGeneratorWithServices

  trait MockGeneratorWithServices extends io.apibuilder.api.v0.GeneratorWithServices {

    /**
     * List all available generators
     * 
     * @param guid Filter to generator with this guid
     * @param serviceGuid Filter to generator from this service
     * @param serviceUri Filter to generator from this service URI
     * @param attributeName Filter to generators that use this attribute
     * @param key Filter to generator with this key
     * @param limit The number of records to return
     * @param offset Used to paginate. First page of results is 0.
     */
    def get(
      guid: _root_.scala.Option[_root_.java.util.UUID] = None,
      serviceGuid: _root_.scala.Option[_root_.java.util.UUID] = None,
      serviceUri: _root_.scala.Option[String] = None,
      attributeName: _root_.scala.Option[String] = None,
      key: _root_.scala.Option[String] = None,
      limit: Long = 100L,
      offset: Long = 0L,
      requestHeaders: Seq[(String, String)] = Nil
    ): scalaz.concurrent.Task[Seq[io.apibuilder.api.v0.models.GeneratorWithService]] = scalaz.concurrent.Task.now {
      Nil
    }

    def getByKey(
      key: String,
      requestHeaders: Seq[(String, String)] = Nil
    ): scalaz.concurrent.Task[io.apibuilder.api.v0.models.GeneratorWithService] = scalaz.concurrent.Task.now {
      io.apibuilder.api.v0.mock.Factories.makeGeneratorWithService()
    }

  }

  object MockItemsImpl extends MockItems

  trait MockItems extends io.apibuilder.api.v0.Items {

    /**
     * @param q The search query. At the moment, we do case insensitive exact match search.
     * @param limit The number of records to return
     * @param offset Used to paginate. First page of results is 0.
     */
    def get(
      q: _root_.scala.Option[String] = None,
      limit: Long = 25L,
      offset: Long = 0L,
      requestHeaders: Seq[(String, String)] = Nil
    ): scalaz.concurrent.Task[Seq[io.apibuilder.api.v0.models.Item]] = scalaz.concurrent.Task.now {
      Nil
    }

    def getByGuid(
      guid: _root_.java.util.UUID,
      requestHeaders: Seq[(String, String)] = Nil
    ): scalaz.concurrent.Task[io.apibuilder.api.v0.models.Item] = scalaz.concurrent.Task.now {
      io.apibuilder.api.v0.mock.Factories.makeItem()
    }

  }

  object MockMembershipsImpl extends MockMemberships

  trait MockMemberships extends io.apibuilder.api.v0.Memberships {

    /**
     * Search all memberships. Results are always paginated.
     * 
     * @param limit The number of records to return
     * @param offset Used to paginate. First page of results is 0.
     */
    def get(
      orgGuid: _root_.scala.Option[_root_.java.util.UUID] = None,
      orgKey: _root_.scala.Option[String] = None,
      userGuid: _root_.scala.Option[_root_.java.util.UUID] = None,
      role: _root_.scala.Option[String] = None,
      limit: Long = 25L,
      offset: Long = 0L,
      requestHeaders: Seq[(String, String)] = Nil
    ): scalaz.concurrent.Task[Seq[io.apibuilder.api.v0.models.Membership]] = scalaz.concurrent.Task.now {
      Nil
    }

    def getByGuid(
      guid: _root_.java.util.UUID,
      requestHeaders: Seq[(String, String)] = Nil
    ): scalaz.concurrent.Task[io.apibuilder.api.v0.models.Membership] = scalaz.concurrent.Task.now {
      io.apibuilder.api.v0.mock.Factories.makeMembership()
    }

    def deleteByGuid(
      guid: _root_.java.util.UUID,
      requestHeaders: Seq[(String, String)] = Nil
    ): scalaz.concurrent.Task[Unit] = scalaz.concurrent.Task.now {
      // unit type
    }

  }

  object MockMembershipRequestsImpl extends MockMembershipRequests

  trait MockMembershipRequests extends io.apibuilder.api.v0.MembershipRequests {

    /**
     * Search all membership requests. Results are always paginated.
     * 
     * @param limit The number of records to return
     * @param offset Used to paginate. First page of results is 0.
     */
    def get(
      orgGuid: _root_.scala.Option[_root_.java.util.UUID] = None,
      orgKey: _root_.scala.Option[String] = None,
      userGuid: _root_.scala.Option[_root_.java.util.UUID] = None,
      role: _root_.scala.Option[String] = None,
      limit: Long = 25L,
      offset: Long = 0L,
      requestHeaders: Seq[(String, String)] = Nil
    ): scalaz.concurrent.Task[Seq[io.apibuilder.api.v0.models.MembershipRequest]] = scalaz.concurrent.Task.now {
      Nil
    }

    /**
     * Create a membership request
     */
    def post(
      orgGuid: _root_.java.util.UUID,
      userGuid: _root_.java.util.UUID,
      role: String,
      requestHeaders: Seq[(String, String)] = Nil
    ): scalaz.concurrent.Task[io.apibuilder.api.v0.models.MembershipRequest] = scalaz.concurrent.Task.now {
      io.apibuilder.api.v0.mock.Factories.makeMembershipRequest()
    }

    /**
     * Accepts this membership request. User will become a member of the specified
     * organization.
     */
    def postAcceptByGuid(
      guid: _root_.java.util.UUID,
      requestHeaders: Seq[(String, String)] = Nil
    ): scalaz.concurrent.Task[Unit] = scalaz.concurrent.Task.now {
      // unit type
    }

    /**
     * Declines this membership request. User will NOT become a member of the specified
     * organization.
     */
    def postDeclineByGuid(
      guid: _root_.java.util.UUID,
      requestHeaders: Seq[(String, String)] = Nil
    ): scalaz.concurrent.Task[Unit] = scalaz.concurrent.Task.now {
      // unit type
    }

  }

  object MockOrganizationsImpl extends MockOrganizations

  trait MockOrganizations extends io.apibuilder.api.v0.Organizations {

    /**
     * Search all organizations. Results are always paginated.
     * 
     * @param guid Finds the organization with this guid, if any
     * @param userGuid If specified, restricts to organizations that this user is specifically a member
     *        of (e.g. will exclude public organizations with which the user does not have a
     *        direct membership).
     * @param key Find organizations with this key. Case in-sensitive. Exact match
     * @param name Find organizations with this name. Case in-sensitive. Exact match
     * @param namespace Find organizations with this namespace. Case in-sensitive. Exact match
     * @param limit The number of records to return
     * @param offset Used to paginate. First page of results is 0.
     */
    def get(
      guid: _root_.scala.Option[_root_.java.util.UUID] = None,
      userGuid: _root_.scala.Option[_root_.java.util.UUID] = None,
      key: _root_.scala.Option[String] = None,
      name: _root_.scala.Option[String] = None,
      namespace: _root_.scala.Option[String] = None,
      limit: Long = 25L,
      offset: Long = 0L,
      requestHeaders: Seq[(String, String)] = Nil
    ): scalaz.concurrent.Task[Seq[io.apibuilder.api.v0.models.Organization]] = scalaz.concurrent.Task.now {
      Nil
    }

    /**
     * Returns the organization with this key.
     */
    def getByKey(
      key: String,
      requestHeaders: Seq[(String, String)] = Nil
    ): scalaz.concurrent.Task[io.apibuilder.api.v0.models.Organization] = scalaz.concurrent.Task.now {
      io.apibuilder.api.v0.mock.Factories.makeOrganization()
    }

    /**
     * Create a new organization.
     */
    def post(
      organizationForm: io.apibuilder.api.v0.models.OrganizationForm,
      requestHeaders: Seq[(String, String)] = Nil
    ): scalaz.concurrent.Task[io.apibuilder.api.v0.models.Organization] = scalaz.concurrent.Task.now {
      io.apibuilder.api.v0.mock.Factories.makeOrganization()
    }

    /**
     * Update an organization.
     */
    def putByKey(
      key: String,
      organizationForm: io.apibuilder.api.v0.models.OrganizationForm,
      requestHeaders: Seq[(String, String)] = Nil
    ): scalaz.concurrent.Task[io.apibuilder.api.v0.models.Organization] = scalaz.concurrent.Task.now {
      io.apibuilder.api.v0.mock.Factories.makeOrganization()
    }

    /**
     * Deletes an organization and all of its associated applications.
     */
    def deleteByKey(
      key: String,
      requestHeaders: Seq[(String, String)] = Nil
    ): scalaz.concurrent.Task[Unit] = scalaz.concurrent.Task.now {
      // unit type
    }

    /**
     * Returns all attribute values for this organization. Results are always
     * paginated.
     * 
     * @param name Find the values for the attribute with this name.
     * @param limit The number of records to return
     * @param offset Used to paginate. First page of results is 0.
     */
    def getAttributesByKey(
      key: String,
      name: _root_.scala.Option[String] = None,
      limit: Long = 25L,
      offset: Long = 0L,
      requestHeaders: Seq[(String, String)] = Nil
    ): scalaz.concurrent.Task[Seq[io.apibuilder.api.v0.models.AttributeValue]] = scalaz.concurrent.Task.now {
      Nil
    }

    /**
     * Returns the attribute value with this name.
     */
    def getAttributesByKeyAndName(
      key: String,
      name: String,
      requestHeaders: Seq[(String, String)] = Nil
    ): scalaz.concurrent.Task[io.apibuilder.api.v0.models.AttributeValue] = scalaz.concurrent.Task.now {
      io.apibuilder.api.v0.mock.Factories.makeAttributeValue()
    }

    /**
     * Create or update a new attribute value.
     */
    def putAttributesByKeyAndName(
      key: String,
      name: String,
      attributeValueForm: io.apibuilder.api.v0.models.AttributeValueForm,
      requestHeaders: Seq[(String, String)] = Nil
    ): scalaz.concurrent.Task[io.apibuilder.api.v0.models.AttributeValue] = scalaz.concurrent.Task.now {
      io.apibuilder.api.v0.mock.Factories.makeAttributeValue()
    }

    /**
     * Deletes the attribute value with the specified name. Only the user who created
     * an attribute value can delete it.
     */
    def deleteAttributesByKeyAndName(
      key: String,
      name: String,
      requestHeaders: Seq[(String, String)] = Nil
    ): scalaz.concurrent.Task[Unit] = scalaz.concurrent.Task.now {
      // unit type
    }

  }

  object MockPasswordResetsImpl extends MockPasswordResets

  trait MockPasswordResets extends io.apibuilder.api.v0.PasswordResets {

    /**
     * Change the password for this token. If the token is invalid, has been used, or
     * otherwise no longer can be applied, errors will be returned as 409s. A 204
     * represents that the user has successfully changed their password.
     */
    def post(
      passwordReset: io.apibuilder.api.v0.models.PasswordReset,
      requestHeaders: Seq[(String, String)] = Nil
    ): scalaz.concurrent.Task[io.apibuilder.api.v0.models.PasswordResetSuccess] = scalaz.concurrent.Task.now {
      io.apibuilder.api.v0.mock.Factories.makePasswordResetSuccess()
    }

  }

  object MockPasswordResetRequestsImpl extends MockPasswordResetRequests

  trait MockPasswordResetRequests extends io.apibuilder.api.v0.PasswordResetRequests {

    /**
     * Create a new password reset. This will send the user an email with a link to
     * reset their password.
     */
    def post(
      passwordResetRequest: io.apibuilder.api.v0.models.PasswordResetRequest,
      requestHeaders: Seq[(String, String)] = Nil
    ): scalaz.concurrent.Task[Unit] = scalaz.concurrent.Task.now {
      // unit type
    }

  }

  object MockSubscriptionsImpl extends MockSubscriptions

  trait MockSubscriptions extends io.apibuilder.api.v0.Subscriptions {

    /**
     * Search subscriptions. Always paginated.
     * 
     * @param guid Find the subscription with this guid.
     * @param organizationKey Find subscriptions for this organization.
     * @param userGuid Find subscriptions for this user.
     * @param publication Find subscriptions for this publication.
     * @param limit The number of records to return
     * @param offset Used to paginate. First page of results is 0.
     */
    def get(
      guid: _root_.scala.Option[_root_.java.util.UUID] = None,
      organizationKey: _root_.scala.Option[String] = None,
      userGuid: _root_.scala.Option[_root_.java.util.UUID] = None,
      publication: _root_.scala.Option[io.apibuilder.api.v0.models.Publication] = None,
      limit: Long = 25L,
      offset: Long = 0L,
      requestHeaders: Seq[(String, String)] = Nil
    ): scalaz.concurrent.Task[Seq[io.apibuilder.api.v0.models.Subscription]] = scalaz.concurrent.Task.now {
      Nil
    }

    /**
     * Returns information about a specific subscription.
     */
    def getByGuid(
      guid: _root_.java.util.UUID,
      requestHeaders: Seq[(String, String)] = Nil
    ): scalaz.concurrent.Task[io.apibuilder.api.v0.models.Subscription] = scalaz.concurrent.Task.now {
      io.apibuilder.api.v0.mock.Factories.makeSubscription()
    }

    /**
     * Create a new subscription.
     */
    def post(
      subscriptionForm: io.apibuilder.api.v0.models.SubscriptionForm,
      requestHeaders: Seq[(String, String)] = Nil
    ): scalaz.concurrent.Task[io.apibuilder.api.v0.models.Subscription] = scalaz.concurrent.Task.now {
      io.apibuilder.api.v0.mock.Factories.makeSubscription()
    }

    def deleteByGuid(
      guid: _root_.java.util.UUID,
      requestHeaders: Seq[(String, String)] = Nil
    ): scalaz.concurrent.Task[Unit] = scalaz.concurrent.Task.now {
      // unit type
    }

  }

  object MockTokensImpl extends MockTokens

  trait MockTokens extends io.apibuilder.api.v0.Tokens {

    /**
     * @param limit The number of records to return
     * @param offset Used to paginate. First page of results is 0.
     */
    def getUsersByUserGuid(
      userGuid: _root_.java.util.UUID,
      guid: _root_.scala.Option[_root_.java.util.UUID] = None,
      limit: Long = 25L,
      offset: Long = 0L,
      requestHeaders: Seq[(String, String)] = Nil
    ): scalaz.concurrent.Task[Seq[io.apibuilder.api.v0.models.Token]] = scalaz.concurrent.Task.now {
      Nil
    }

    /**
     * Used to fetch the clear text token.
     */
    def getCleartextByGuid(
      guid: _root_.java.util.UUID,
      requestHeaders: Seq[(String, String)] = Nil
    ): scalaz.concurrent.Task[io.apibuilder.api.v0.models.CleartextToken] = scalaz.concurrent.Task.now {
      io.apibuilder.api.v0.mock.Factories.makeCleartextToken()
    }

    /**
     * Create a new API token for this user
     */
    def post(
      tokenForm: io.apibuilder.api.v0.models.TokenForm,
      requestHeaders: Seq[(String, String)] = Nil
    ): scalaz.concurrent.Task[io.apibuilder.api.v0.models.Token] = scalaz.concurrent.Task.now {
      io.apibuilder.api.v0.mock.Factories.makeToken()
    }

    def deleteByGuid(
      guid: _root_.java.util.UUID,
      requestHeaders: Seq[(String, String)] = Nil
    ): scalaz.concurrent.Task[Unit] = scalaz.concurrent.Task.now {
      // unit type
    }

  }

  object MockUsersImpl extends MockUsers

  trait MockUsers extends io.apibuilder.api.v0.Users {

    /**
     * Search for a specific user. You must specify at least 1 parameter - either a
     * guid, email or token - and will receive back either 0 or 1 users.
     * 
     * @param guid Find user with this guid. Exact match
     * @param email Find user with this email address. Case in-sensitive. Exact match
     * @param token Find the user with this API token. Exact match
     */
    def get(
      guid: _root_.scala.Option[_root_.java.util.UUID] = None,
      email: _root_.scala.Option[String] = None,
      token: _root_.scala.Option[String] = None,
      requestHeaders: Seq[(String, String)] = Nil
    ): scalaz.concurrent.Task[Seq[io.apibuilder.api.v0.models.User]] = scalaz.concurrent.Task.now {
      Nil
    }

    /**
     * Returns information about the user with this guid.
     */
    def getByGuid(
      guid: _root_.java.util.UUID,
      requestHeaders: Seq[(String, String)] = Nil
    ): scalaz.concurrent.Task[io.apibuilder.api.v0.models.User] = scalaz.concurrent.Task.now {
      io.apibuilder.api.v0.mock.Factories.makeUser()
    }

    /**
     * Used to authenticate a user with an email address and password. Successful
     * authentication returns an instance of the user model. Failed authorizations of
     * any kind are returned as a generic error with code user_authorization_failed.
     */
    def postAuthenticate(
      email: String,
      password: String,
      requestHeaders: Seq[(String, String)] = Nil
    ): scalaz.concurrent.Task[io.apibuilder.api.v0.models.User] = scalaz.concurrent.Task.now {
      io.apibuilder.api.v0.mock.Factories.makeUser()
    }

    /**
     * Create a new user.
     */
    def post(
      userForm: io.apibuilder.api.v0.models.UserForm,
      requestHeaders: Seq[(String, String)] = Nil
    ): scalaz.concurrent.Task[io.apibuilder.api.v0.models.User] = scalaz.concurrent.Task.now {
      io.apibuilder.api.v0.mock.Factories.makeUser()
    }

    /**
     * Updates information about the user with the specified guid.
     */
    def putByGuid(
      guid: _root_.java.util.UUID,
      userUpdateForm: io.apibuilder.api.v0.models.UserUpdateForm,
      requestHeaders: Seq[(String, String)] = Nil
    ): scalaz.concurrent.Task[io.apibuilder.api.v0.models.User] = scalaz.concurrent.Task.now {
      io.apibuilder.api.v0.mock.Factories.makeUser()
    }

  }

  object MockValidationsImpl extends MockValidations

  trait MockValidations extends io.apibuilder.api.v0.Validations {

    def post(
      value: String,
      requestHeaders: Seq[(String, String)] = Nil
    ): scalaz.concurrent.Task[io.apibuilder.api.v0.models.Validation] = scalaz.concurrent.Task.now {
      io.apibuilder.api.v0.mock.Factories.makeValidation()
    }

  }

  object MockVersionsImpl extends MockVersions

  trait MockVersions extends io.apibuilder.api.v0.Versions {

    /**
     * Search all versions of this application. Results are always paginated.
     * 
     * @param orgKey The organization key for which to search versions
     * @param applicationKey The application key for which to search versions
     * @param limit The number of records to return
     * @param offset Used to paginate. First page of results is 0.
     */
    def getByApplicationKey(
      orgKey: String,
      applicationKey: String,
      limit: Long = 25L,
      offset: Long = 0L,
      requestHeaders: Seq[(String, String)] = Nil
    ): scalaz.concurrent.Task[Seq[io.apibuilder.api.v0.models.Version]] = scalaz.concurrent.Task.now {
      Nil
    }

    /**
     * Retrieve a specific version of an application.
     * 
     * @param version The version of tthis application to download, or the keyword latest to get the
     *        latest version
     */
    def getByApplicationKeyAndVersion(
      orgKey: String,
      applicationKey: String,
      version: String,
      requestHeaders: Seq[(String, String)] = Nil
    ): scalaz.concurrent.Task[io.apibuilder.api.v0.models.Version] = scalaz.concurrent.Task.now {
      io.apibuilder.api.v0.mock.Factories.makeVersion()
    }

    /**
     * Create a new version for an application
     */
    def postByVersion(
      orgKey: String,
      version: String,
      versionForm: io.apibuilder.api.v0.models.VersionForm,
      requestHeaders: Seq[(String, String)] = Nil
    ): scalaz.concurrent.Task[io.apibuilder.api.v0.models.Version] = scalaz.concurrent.Task.now {
      io.apibuilder.api.v0.mock.Factories.makeVersion()
    }

    /**
     * Upsert a version of an application
     */
    def putByApplicationKeyAndVersion(
      orgKey: String,
      applicationKey: String,
      version: String,
      versionForm: io.apibuilder.api.v0.models.VersionForm,
      requestHeaders: Seq[(String, String)] = Nil
    ): scalaz.concurrent.Task[io.apibuilder.api.v0.models.Version] = scalaz.concurrent.Task.now {
      io.apibuilder.api.v0.mock.Factories.makeVersion()
    }

    /**
     * Deletes a specific version.
     */
    def deleteByApplicationKeyAndVersion(
      orgKey: String,
      applicationKey: String,
      version: String,
      requestHeaders: Seq[(String, String)] = Nil
    ): scalaz.concurrent.Task[Unit] = scalaz.concurrent.Task.now {
      // unit type
    }

  }

  object MockWatchesImpl extends MockWatches

  trait MockWatches extends io.apibuilder.api.v0.Watches {

    /**
     * Search attributes. Always paginated.
     * 
     * @param guid Find the watch with this guid.
     * @param userGuid Find attributes for this user.
     * @param organizationKey Find attributes for this organization.
     * @param applicationKey Find attributes for this application.
     * @param limit The number of records to return
     * @param offset Used to paginate. First page of results is 0.
     */
    def get(
      guid: _root_.scala.Option[_root_.java.util.UUID] = None,
      userGuid: _root_.scala.Option[_root_.java.util.UUID] = None,
      organizationKey: _root_.scala.Option[String] = None,
      applicationKey: _root_.scala.Option[String] = None,
      limit: Long = 25L,
      offset: Long = 0L,
      requestHeaders: Seq[(String, String)] = Nil
    ): scalaz.concurrent.Task[Seq[io.apibuilder.api.v0.models.Watch]] = scalaz.concurrent.Task.now {
      Nil
    }

    /**
     * Returns information about a specific watch.
     */
    def getByGuid(
      guid: _root_.java.util.UUID,
      requestHeaders: Seq[(String, String)] = Nil
    ): scalaz.concurrent.Task[io.apibuilder.api.v0.models.Watch] = scalaz.concurrent.Task.now {
      io.apibuilder.api.v0.mock.Factories.makeWatch()
    }

    /**
     * Quick check if a user is watching a specific application.
     * 
     * @param userGuid The user for which we are checking. API returns false if the user guid is not
     *        provided
     */
    def getCheck(
      userGuid: _root_.scala.Option[_root_.java.util.UUID] = None,
      organizationKey: String,
      applicationKey: String,
      requestHeaders: Seq[(String, String)] = Nil
    ): scalaz.concurrent.Task[Boolean] = scalaz.concurrent.Task.now {
      true
    }

    /**
     * Create a new watch.
     */
    def post(
      watchForm: io.apibuilder.api.v0.models.WatchForm,
      requestHeaders: Seq[(String, String)] = Nil
    ): scalaz.concurrent.Task[io.apibuilder.api.v0.models.Watch] = scalaz.concurrent.Task.now {
      io.apibuilder.api.v0.mock.Factories.makeWatch()
    }

    def deleteByGuid(
      guid: _root_.java.util.UUID,
      requestHeaders: Seq[(String, String)] = Nil
    ): scalaz.concurrent.Task[Unit] = scalaz.concurrent.Task.now {
      // unit type
    }

  }

  object Factories {

    def randomString(): String = {
      "Test " + _root_.java.util.UUID.randomUUID.toString.replaceAll("-", " ")
    }

    def makeOriginalType(): io.apibuilder.api.v0.models.OriginalType = io.apibuilder.api.v0.models.OriginalType.ApiJson

    def makePublication(): io.apibuilder.api.v0.models.Publication = io.apibuilder.api.v0.models.Publication.MembershipRequestsCreate

    def makeVisibility(): io.apibuilder.api.v0.models.Visibility = io.apibuilder.api.v0.models.Visibility.User

    def makeApplication(): io.apibuilder.api.v0.models.Application = io.apibuilder.api.v0.models.Application(
      guid = java.util.UUID.randomUUID,
      organization = io.apibuilder.common.v0.mock.Factories.makeReference(),
      name = Factories.randomString(),
      key = Factories.randomString(),
      visibility = io.apibuilder.api.v0.mock.Factories.makeVisibility(),
      description = None,
      audit = io.apibuilder.common.v0.mock.Factories.makeAudit()
    )

    def makeApplicationForm(): io.apibuilder.api.v0.models.ApplicationForm = io.apibuilder.api.v0.models.ApplicationForm(
      name = Factories.randomString(),
      key = None,
      description = None,
      visibility = io.apibuilder.api.v0.mock.Factories.makeVisibility()
    )

    def makeApplicationSummary(): io.apibuilder.api.v0.models.ApplicationSummary = io.apibuilder.api.v0.models.ApplicationSummary(
      guid = java.util.UUID.randomUUID,
      organization = io.apibuilder.common.v0.mock.Factories.makeReference(),
      key = Factories.randomString()
    )

    def makeAttribute(): io.apibuilder.api.v0.models.Attribute = io.apibuilder.api.v0.models.Attribute(
      guid = java.util.UUID.randomUUID,
      name = Factories.randomString(),
      description = None,
      audit = io.apibuilder.common.v0.mock.Factories.makeAudit()
    )

    def makeAttributeForm(): io.apibuilder.api.v0.models.AttributeForm = io.apibuilder.api.v0.models.AttributeForm(
      name = Factories.randomString(),
      description = None
    )

    def makeAttributeSummary(): io.apibuilder.api.v0.models.AttributeSummary = io.apibuilder.api.v0.models.AttributeSummary(
      guid = java.util.UUID.randomUUID,
      name = Factories.randomString()
    )

    def makeAttributeValue(): io.apibuilder.api.v0.models.AttributeValue = io.apibuilder.api.v0.models.AttributeValue(
      guid = java.util.UUID.randomUUID,
      attribute = io.apibuilder.api.v0.mock.Factories.makeAttributeSummary(),
      value = Factories.randomString(),
      audit = io.apibuilder.common.v0.mock.Factories.makeAudit()
    )

    def makeAttributeValueForm(): io.apibuilder.api.v0.models.AttributeValueForm = io.apibuilder.api.v0.models.AttributeValueForm(
      value = Factories.randomString()
    )

    def makeChange(): io.apibuilder.api.v0.models.Change = io.apibuilder.api.v0.models.Change(
      guid = java.util.UUID.randomUUID,
      organization = io.apibuilder.common.v0.mock.Factories.makeReference(),
      application = io.apibuilder.common.v0.mock.Factories.makeReference(),
      fromVersion = io.apibuilder.api.v0.mock.Factories.makeChangeVersion(),
      toVersion = io.apibuilder.api.v0.mock.Factories.makeChangeVersion(),
      diff = io.apibuilder.api.v0.mock.Factories.makeDiff(),
      changedAt = java.time.Instant.now,
      changedBy = io.apibuilder.api.v0.mock.Factories.makeUserSummary(),
      audit = io.apibuilder.common.v0.mock.Factories.makeAudit()
    )

    def makeChangeVersion(): io.apibuilder.api.v0.models.ChangeVersion = io.apibuilder.api.v0.models.ChangeVersion(
      guid = java.util.UUID.randomUUID,
      version = Factories.randomString()
    )

    def makeCleartextToken(): io.apibuilder.api.v0.models.CleartextToken = io.apibuilder.api.v0.models.CleartextToken(
      token = Factories.randomString()
    )

    def makeCode(): io.apibuilder.api.v0.models.Code = io.apibuilder.api.v0.models.Code(
      generator = io.apibuilder.api.v0.mock.Factories.makeGeneratorWithService(),
      source = Factories.randomString(),
      files = Nil
    )

    def makeDiffBreaking(): io.apibuilder.api.v0.models.DiffBreaking = io.apibuilder.api.v0.models.DiffBreaking(
      description = Factories.randomString()
    )

    def makeDiffNonBreaking(): io.apibuilder.api.v0.models.DiffNonBreaking = io.apibuilder.api.v0.models.DiffNonBreaking(
      description = Factories.randomString()
    )

    def makeDomain(): io.apibuilder.api.v0.models.Domain = io.apibuilder.api.v0.models.Domain(
      name = Factories.randomString()
    )

    def makeEmailVerificationConfirmationForm(): io.apibuilder.api.v0.models.EmailVerificationConfirmationForm = io.apibuilder.api.v0.models.EmailVerificationConfirmationForm(
      token = Factories.randomString()
    )

    def makeError(): io.apibuilder.api.v0.models.Error = io.apibuilder.api.v0.models.Error(
      code = Factories.randomString(),
      message = Factories.randomString()
    )

    def makeGeneratorForm(): io.apibuilder.api.v0.models.GeneratorForm = io.apibuilder.api.v0.models.GeneratorForm(
      serviceGuid = java.util.UUID.randomUUID,
      generator = io.apibuilder.generator.v0.mock.Factories.makeGenerator()
    )

    def makeGeneratorService(): io.apibuilder.api.v0.models.GeneratorService = io.apibuilder.api.v0.models.GeneratorService(
      guid = java.util.UUID.randomUUID,
      uri = Factories.randomString(),
      audit = io.apibuilder.common.v0.mock.Factories.makeAudit()
    )

    def makeGeneratorServiceForm(): io.apibuilder.api.v0.models.GeneratorServiceForm = io.apibuilder.api.v0.models.GeneratorServiceForm(
      uri = Factories.randomString()
    )

    def makeGeneratorWithService(): io.apibuilder.api.v0.models.GeneratorWithService = io.apibuilder.api.v0.models.GeneratorWithService(
      service = io.apibuilder.api.v0.mock.Factories.makeGeneratorService(),
      generator = io.apibuilder.generator.v0.mock.Factories.makeGenerator()
    )

    def makeItem(): io.apibuilder.api.v0.models.Item = io.apibuilder.api.v0.models.Item(
      guid = java.util.UUID.randomUUID,
      detail = io.apibuilder.api.v0.mock.Factories.makeItemDetail(),
      label = Factories.randomString(),
      description = None
    )

    def makeMembership(): io.apibuilder.api.v0.models.Membership = io.apibuilder.api.v0.models.Membership(
      guid = java.util.UUID.randomUUID,
      user = io.apibuilder.api.v0.mock.Factories.makeUser(),
      organization = io.apibuilder.api.v0.mock.Factories.makeOrganization(),
      role = Factories.randomString(),
      audit = io.apibuilder.common.v0.mock.Factories.makeAudit()
    )

    def makeMembershipRequest(): io.apibuilder.api.v0.models.MembershipRequest = io.apibuilder.api.v0.models.MembershipRequest(
      guid = java.util.UUID.randomUUID,
      user = io.apibuilder.api.v0.mock.Factories.makeUser(),
      organization = io.apibuilder.api.v0.mock.Factories.makeOrganization(),
      role = Factories.randomString(),
      audit = io.apibuilder.common.v0.mock.Factories.makeAudit()
    )

    def makeMoveForm(): io.apibuilder.api.v0.models.MoveForm = io.apibuilder.api.v0.models.MoveForm(
      orgKey = Factories.randomString()
    )

    def makeOrganization(): io.apibuilder.api.v0.models.Organization = io.apibuilder.api.v0.models.Organization(
      guid = java.util.UUID.randomUUID,
      key = Factories.randomString(),
      name = Factories.randomString(),
      namespace = Factories.randomString(),
      visibility = io.apibuilder.api.v0.mock.Factories.makeVisibility(),
      domains = Nil,
      audit = io.apibuilder.common.v0.mock.Factories.makeAudit()
    )

    def makeOrganizationForm(): io.apibuilder.api.v0.models.OrganizationForm = io.apibuilder.api.v0.models.OrganizationForm(
      name = Factories.randomString(),
      key = None,
      namespace = Factories.randomString(),
      visibility = io.apibuilder.api.v0.mock.Factories.makeVisibility(),
      domains = None
    )

    def makeOriginal(): io.apibuilder.api.v0.models.Original = io.apibuilder.api.v0.models.Original(
      `type` = io.apibuilder.api.v0.mock.Factories.makeOriginalType(),
      data = Factories.randomString()
    )

    def makeOriginalForm(): io.apibuilder.api.v0.models.OriginalForm = io.apibuilder.api.v0.models.OriginalForm(
      `type` = None,
      data = Factories.randomString()
    )

    def makePasswordReset(): io.apibuilder.api.v0.models.PasswordReset = io.apibuilder.api.v0.models.PasswordReset(
      token = Factories.randomString(),
      password = Factories.randomString()
    )

    def makePasswordResetRequest(): io.apibuilder.api.v0.models.PasswordResetRequest = io.apibuilder.api.v0.models.PasswordResetRequest(
      email = Factories.randomString()
    )

    def makePasswordResetSuccess(): io.apibuilder.api.v0.models.PasswordResetSuccess = io.apibuilder.api.v0.models.PasswordResetSuccess(
      userGuid = java.util.UUID.randomUUID
    )

    def makeSubscription(): io.apibuilder.api.v0.models.Subscription = io.apibuilder.api.v0.models.Subscription(
      guid = java.util.UUID.randomUUID,
      organization = io.apibuilder.api.v0.mock.Factories.makeOrganization(),
      user = io.apibuilder.api.v0.mock.Factories.makeUser(),
      publication = io.apibuilder.api.v0.mock.Factories.makePublication(),
      audit = io.apibuilder.common.v0.mock.Factories.makeAudit()
    )

    def makeSubscriptionForm(): io.apibuilder.api.v0.models.SubscriptionForm = io.apibuilder.api.v0.models.SubscriptionForm(
      organizationKey = Factories.randomString(),
      userGuid = java.util.UUID.randomUUID,
      publication = io.apibuilder.api.v0.mock.Factories.makePublication()
    )

    def makeToken(): io.apibuilder.api.v0.models.Token = io.apibuilder.api.v0.models.Token(
      guid = java.util.UUID.randomUUID,
      user = io.apibuilder.api.v0.mock.Factories.makeUser(),
      maskedToken = Factories.randomString(),
      description = None,
      audit = io.apibuilder.common.v0.mock.Factories.makeAudit()
    )

    def makeTokenForm(): io.apibuilder.api.v0.models.TokenForm = io.apibuilder.api.v0.models.TokenForm(
      userGuid = java.util.UUID.randomUUID,
      description = None
    )

    def makeUser(): io.apibuilder.api.v0.models.User = io.apibuilder.api.v0.models.User(
      guid = java.util.UUID.randomUUID,
      email = Factories.randomString(),
      nickname = Factories.randomString(),
      name = None,
      audit = io.apibuilder.common.v0.mock.Factories.makeAudit()
    )

    def makeUserForm(): io.apibuilder.api.v0.models.UserForm = io.apibuilder.api.v0.models.UserForm(
      email = Factories.randomString(),
      password = Factories.randomString(),
      nickname = None,
      name = None
    )

    def makeUserSummary(): io.apibuilder.api.v0.models.UserSummary = io.apibuilder.api.v0.models.UserSummary(
      guid = java.util.UUID.randomUUID,
      nickname = Factories.randomString()
    )

    def makeUserUpdateForm(): io.apibuilder.api.v0.models.UserUpdateForm = io.apibuilder.api.v0.models.UserUpdateForm(
      email = Factories.randomString(),
      nickname = Factories.randomString(),
      name = None
    )

    def makeValidation(): io.apibuilder.api.v0.models.Validation = io.apibuilder.api.v0.models.Validation(
      valid = true,
      errors = Nil
    )

    def makeVersion(): io.apibuilder.api.v0.models.Version = io.apibuilder.api.v0.models.Version(
      guid = java.util.UUID.randomUUID,
      organization = io.apibuilder.common.v0.mock.Factories.makeReference(),
      application = io.apibuilder.common.v0.mock.Factories.makeReference(),
      version = Factories.randomString(),
      original = None,
      service = io.apibuilder.spec.v0.mock.Factories.makeService(),
      audit = io.apibuilder.common.v0.mock.Factories.makeAudit()
    )

    def makeVersionForm(): io.apibuilder.api.v0.models.VersionForm = io.apibuilder.api.v0.models.VersionForm(
      originalForm = io.apibuilder.api.v0.mock.Factories.makeOriginalForm(),
      visibility = None
    )

    def makeWatch(): io.apibuilder.api.v0.models.Watch = io.apibuilder.api.v0.models.Watch(
      guid = java.util.UUID.randomUUID,
      user = io.apibuilder.api.v0.mock.Factories.makeUser(),
      organization = io.apibuilder.api.v0.mock.Factories.makeOrganization(),
      application = io.apibuilder.api.v0.mock.Factories.makeApplication(),
      audit = io.apibuilder.common.v0.mock.Factories.makeAudit()
    )

    def makeWatchForm(): io.apibuilder.api.v0.models.WatchForm = io.apibuilder.api.v0.models.WatchForm(
      userGuid = java.util.UUID.randomUUID,
      organizationKey = Factories.randomString(),
      applicationKey = Factories.randomString()
    )

    def makeDiff(): io.apibuilder.api.v0.models.Diff = io.apibuilder.api.v0.mock.Factories.makeDiffBreaking()

    def makeItemDetail(): io.apibuilder.api.v0.models.ItemDetail = io.apibuilder.api.v0.mock.Factories.makeApplicationSummary()

  }

}