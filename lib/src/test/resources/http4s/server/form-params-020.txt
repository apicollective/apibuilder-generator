package io.apibuilder.http4s.test.server

import org.http4s.dsl.{io => _, _}
import org.http4s.implicits._
import cats.effect._
import cats.implicits._
import io.apibuilder.http4s.test.models.json._

private[server] trait Matchers[F[_]] extends Http4sDsl[F] {

  implicit lazy val queryParamDecodeBigDecimal: org.http4s.QueryParamDecoder[BigDecimal] =
    org.http4s.QueryParamDecoder.fromUnsafeCast[BigDecimal](p => BigDecimal(p.value))("BigDecimal")

  implicit lazy val queryParamDecodeInstant: org.http4s.QueryParamDecoder[_root_.java.time.Instant] =
    org.http4s.QueryParamDecoder.fromUnsafeCast[_root_.java.time.Instant](p => _root_.java.time.OffsetDateTime.parse(p.value).toInstant)("_root_.java.time.Instant")

  implicit lazy val queryParamDecodeLocalDate: org.http4s.QueryParamDecoder[_root_.java.time.LocalDate] =
    org.http4s.QueryParamDecoder.fromUnsafeCast[_root_.java.time.LocalDate](p => _root_.java.time.LocalDate.parse(p.value))("_root_.java.time.LocalDate")

  implicit lazy val queryParamDecodeUUID: org.http4s.QueryParamDecoder[_root_.java.util.UUID] =
    org.http4s.QueryParamDecoder.fromUnsafeCast[_root_.java.util.UUID](p => _root_.java.util.UUID.fromString(p.value))("_root_.java.util.UUID")


  object ApiVersion {
    val ApiVersionMajor = {
      "X-Apidoc-Version-Major".ci
    }

    def apply(req: org.http4s.Message[F]): Boolean = req.headers.get(ApiVersionMajor) match {
      case Some(v) if v.value == "0" => true
      case _ => false
    }
  }


}

trait ModelRoutes[F[_]] extends Matchers[F] {

  implicit def circeJsonDecoder[A](implicit decoder: _root_.io.circe.Decoder[A], sync: Sync[F]) = org.http4s.circe.jsonOf[F, A]
  implicit def circeJsonEncoder[A](implicit encoder: _root_.io.circe.Encoder[A], sync: Sync[F]) = org.http4s.circe.jsonEncoderOf[F, A]

  case class PostRequest(id: String, model: io.apibuilder.http4s.test.models.Model, enum: io.apibuilder.http4s.test.models.Enum, opt: _root_.scala.Option[Int], list: Seq[String], map: Map[String, String])

  implicit val PostRequestDecoder: _root_.io.circe.Decoder[PostRequest] = _root_.io.circe.Decoder.instance { a =>
    for {
      id <- a.downField("id").as[String]
      model <- a.downField("model").as[io.apibuilder.http4s.test.models.Model]
      enum <- a.downField("enum").as[io.apibuilder.http4s.test.models.Enum]
      opt <- a.downField("opt").as[_root_.scala.Option[Int]]
      list <- a.downField("list").as[Seq[String]]
      map <- a.downField("map").as[Map[String, String]]
    } yield {
      PostRequest(
        id = id,
        model = model,
        enum = enum,
        opt = opt,
        list = list,
        map = map
      )
    }
  }

  sealed trait PostResponse

  object PostResponse {
    case class HTTP200(headers: Seq[org.http4s.Header] = Nil) extends PostResponse
    case class UndocumentedResponse(response: F[org.http4s.Response[F]]) extends PostResponse
  }

  def post(
    _req: org.http4s.Request[F],
    id: String,
    model: io.apibuilder.http4s.test.models.Model,
    enum: io.apibuilder.http4s.test.models.Enum,
    opt: _root_.scala.Option[Int],
    list: Seq[String],
    map: Map[String, String]
  ): F[PostResponse]

  def apiVersionMatch(req: org.http4s.Message[F]): Boolean = ApiVersion(req)

  def service()(implicit sync: Sync[F]) = org.http4s.HttpRoutes.of[F] {
    case _req @ POST -> Root / "test" if apiVersionMatch(_req) =>
    if (_req.contentType.exists(_.mediaType == _root_.org.http4s.MediaType.application.json)) {
      _req.attemptAs[PostRequest].value.flatMap{
        case Right(req) =>
          post(_req, req.id, req.model, req.enum, req.opt, req.list, req.map).flatMap {
            case PostResponse.HTTP200(headers) => Ok(headers: _*)
            case PostResponse.UndocumentedResponse(response) => response
          }
        case Left(_) => BadRequest()
      }
    } else {
        _req.decode[_root_.org.http4s.UrlForm] {
          req =>
            val responseOpt = for {
              id <- req.getFirst("id")
              model <- req.getFirst("model").flatMap(f => _root_.io.circe.parser.decode[io.apibuilder.http4s.test.models.Model](f).toOption)
              enum <- req.getFirst("enum").flatMap(f => _root_.io.circe.parser.decode[io.apibuilder.http4s.test.models.Enum](f).toOption)
              opt <- Some(req.getFirst("opt").flatMap(f => _root_.io.circe.parser.decode[Int](f).toOption))
              list <- Some(req.get("list"))
              map <- req.getFirst("map").flatMap(f => _root_.io.circe.parser.decode[Map[String, String]](f).toOption)
            } yield {
                post(_req, id, model, enum, opt, list, map).flatMap {
                  case PostResponse.HTTP200(headers) => Ok(headers: _*)
                  case PostResponse.UndocumentedResponse(response) => response
                }
              }
            responseOpt.getOrElse(BadRequest())
      }
    }
    case _req @ POST -> Root / "test" if !_req.headers.get(ApiVersion.ApiVersionMajor).isDefined =>
      BadRequest(s"Missing required request header: ${ApiVersion.ApiVersionMajor}.")
  }
}