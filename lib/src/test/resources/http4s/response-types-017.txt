package io.apibuilder.http4s.test.server

import org.http4s.dsl._
import io.apibuilder.http4s.test.models.json._

private[server] object Matchers {

  implicit lazy val bigDecimalDateQueryParamDecoder: org.http4s.QueryParamDecoder[BigDecimal] =
    org.http4s.QueryParamDecoder.fromUnsafeCast[BigDecimal](p => BigDecimal(p.value))("BigDecimal")

  implicit lazy val instantQueryParamDecoder: org.http4s.QueryParamDecoder[java.time.Instant] =
    org.http4s.QueryParamDecoder.fromUnsafeCast[java.time.Instant](p => java.time.Instant.parse(p.value))("java.time.Instant")

  implicit lazy val localDateQueryParamDecoder: org.http4s.QueryParamDecoder[java.time.LocalDate] =
    org.http4s.QueryParamDecoder.fromUnsafeCast[java.time.LocalDate](p => java.time.LocalDate.parse(p.value))("java.time.LocalDate")

  implicit lazy val uuidQueryParamDecoder: org.http4s.QueryParamDecoder[java.util.UUID] =
    org.http4s.QueryParamDecoder.fromUnsafeCast[java.util.UUID](p => java.util.UUID.fromString(p.value))("java.util.UUID")


  object ApiVersion {
    val ApiVersionMajor = {
      import org.http4s.syntax.string._
      "X-Apidoc-Version-Major".ci
    }

    def apply(req: org.http4s.Message): Boolean = req.headers.get(ApiVersionMajor) match {
      case Some(v) if v.value == "0" => true
      case _ => false
    }
  }


}

trait ModelRoutes {
  import Matchers._

  implicit def circeJsonDecoder[A](implicit decoder: io.circe.Decoder[A]) = org.http4s.circe.jsonOf[A]
  implicit def circeJsonEncoder[A](implicit encoder: io.circe.Encoder[A]) = org.http4s.circe.jsonEncoderOf[A]

  sealed trait GetStringResponse

  object GetStringResponse {
    case class HTTP200(value: String, headers: Seq[org.http4s.Header] = Nil) extends GetStringResponse
  }

  def getString(
    _req: org.http4s.Request
  ): fs2.Task[GetStringResponse]

  sealed trait GetEnumResponse

  object GetEnumResponse {
    case class HTTP200(value: io.apibuilder.http4s.test.models.Enum, headers: Seq[org.http4s.Header] = Nil) extends GetEnumResponse
  }

  def getEnum(
    _req: org.http4s.Request
  ): fs2.Task[GetEnumResponse]

  sealed trait GetModelResponse

  object GetModelResponse {
    case class HTTP200(value: io.apibuilder.http4s.test.models.Model, headers: Seq[org.http4s.Header] = Nil) extends GetModelResponse
  }

  def getModel(
    _req: org.http4s.Request
  ): fs2.Task[GetModelResponse]

  sealed trait GetListResponse

  object GetListResponse {
    case class HTTP200(value: Seq[Int], headers: Seq[org.http4s.Header] = Nil) extends GetListResponse
  }

  def getList(
    _req: org.http4s.Request
  ): fs2.Task[GetListResponse]

  sealed trait GetMapResponse

  object GetMapResponse {
    case class HTTP200(value: Map[String, _root_.java.util.UUID], headers: Seq[org.http4s.Header] = Nil) extends GetMapResponse
  }

  def getMap(
    _req: org.http4s.Request
  ): fs2.Task[GetMapResponse]

  sealed trait GetMultipleResponse

  object GetMultipleResponse {
    case class HTTP200(value: io.apibuilder.http4s.test.models.Model, headers: Seq[org.http4s.Header] = Nil) extends GetMultipleResponse
    case class HTTP201(value: io.apibuilder.http4s.test.models.Enum, headers: Seq[org.http4s.Header] = Nil) extends GetMultipleResponse
    case class HTTP202(value: String, headers: Seq[org.http4s.Header] = Nil) extends GetMultipleResponse
    case class HTTP204(headers: Seq[org.http4s.Header] = Nil) extends GetMultipleResponse
    case class HTTP206(value: Seq[io.apibuilder.http4s.test.models.Model], headers: Seq[org.http4s.Header] = Nil) extends GetMultipleResponse
  }

  def getMultiple(
    _req: org.http4s.Request
  ): fs2.Task[GetMultipleResponse]

  def apiVersionMatch(req: org.http4s.Message): Boolean = ApiVersion(req)

  def service() = org.http4s.HttpService {
    case _req @ GET -> Root / "string" if apiVersionMatch(_req) =>
      getString(_req).flatMap {
        case GetStringResponse.HTTP200(value, headers) => Ok(value).putHeaders(headers: _*)
      }

    case _req @ GET -> Root / "enum" if apiVersionMatch(_req) =>
      getEnum(_req).flatMap {
        case GetEnumResponse.HTTP200(value, headers) => Ok(value).putHeaders(headers: _*)
      }

    case _req @ GET -> Root / "model" if apiVersionMatch(_req) =>
      getModel(_req).flatMap {
        case GetModelResponse.HTTP200(value, headers) => Ok(value).putHeaders(headers: _*)
      }

    case _req @ GET -> Root / "list" if apiVersionMatch(_req) =>
      getList(_req).flatMap {
        case GetListResponse.HTTP200(value, headers) => Ok(value).putHeaders(headers: _*)
      }

    case _req @ GET -> Root / "map" if apiVersionMatch(_req) =>
      getMap(_req).flatMap {
        case GetMapResponse.HTTP200(value, headers) => Ok(value).putHeaders(headers: _*)
      }

    case _req @ GET -> Root / "multiple" if apiVersionMatch(_req) =>
      getMultiple(_req).flatMap {
        case GetMultipleResponse.HTTP200(value, headers) => Ok(value).putHeaders(headers: _*)
        case GetMultipleResponse.HTTP201(value, headers) => Created(value).putHeaders(headers: _*)
        case GetMultipleResponse.HTTP202(value, headers) => Accepted(value).putHeaders(headers: _*)
        case GetMultipleResponse.HTTP204(headers) => NoContent().putHeaders(headers: _*)
        case GetMultipleResponse.HTTP206(value, headers) => PartialContent(value).putHeaders(headers: _*)
      }
  }
}
