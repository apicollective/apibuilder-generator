/**
 * Generated by apidoc - http://www.apidoc.me
 * Service version: 0.3.46
 */
package com.bryzek.apidoc.example.union.types.v0.models {

  sealed trait Foobar extends _root_.scala.Product with _root_.scala.Serializable

  @deprecated("to be removed") sealed trait User extends _root_.scala.Product with _root_.scala.Serializable

  case class GuestUser(
    guid: _root_.java.util.UUID,
    email: String
  ) extends User

  case class RegisteredUser(
    guid: _root_.java.util.UUID,
    email: String,
    preference: com.bryzek.apidoc.example.union.types.v0.models.Foobar
  ) extends User

  /**
   * Provides future compatibility in clients - in the future, when a type is added
   * to the union Foobar, it will need to be handled in the client code. This
   * implementation will deserialize these future types as an instance of this class.
   */
  case class FoobarUndefinedType(
    description: String
  ) extends Foobar

  /**
   * Provides future compatibility in clients - in the future, when a type is added
   * to the union User, it will need to be handled in the client code. This
   * implementation will deserialize these future types as an instance of this class.
   */
  case class UserUndefinedType(
    description: String
  ) extends User


  /**
   * Wrapper class to support the union types containing the datatype[uuid]
   */
  case class UserUuid(
    value: _root_.java.util.UUID
  ) extends User

  sealed trait Bar extends Foobar

  @deprecated("to be removed") object Bar {

    @deprecated case object B extends Bar { override def toString = "b" }

    /**
     * UNDEFINED captures values that are sent either in error or
     * that were added by the server after this library was
     * generated. We want to make it easy and obvious for users of
     * this library to handle this case gracefully.
     *
     * We use all CAPS for the variable name to avoid collisions
     * with the camel cased values above.
     */
    case class UNDEFINED(override val toString: String) extends Bar

    /**
     * all returns a list of all the valid, known values. We use
     * lower case to avoid collisions with the camel cased values
     * above.
     */
    val all = Seq(B)

    private[this]
    val byName = all.map(x => x.toString.toLowerCase -> x).toMap

    def apply(value: String): Bar = fromString(value).getOrElse(UNDEFINED(value))

    def fromString(value: String): _root_.scala.Option[Bar] = byName.get(value.toLowerCase)

  }

  sealed trait Foo extends Foobar

  object Foo {

    case object A extends Foo { override def toString = "a" }

    /**
     * UNDEFINED captures values that are sent either in error or
     * that were added by the server after this library was
     * generated. We want to make it easy and obvious for users of
     * this library to handle this case gracefully.
     *
     * We use all CAPS for the variable name to avoid collisions
     * with the camel cased values above.
     */
    case class UNDEFINED(override val toString: String) extends Foo

    /**
     * all returns a list of all the valid, known values. We use
     * lower case to avoid collisions with the camel cased values
     * above.
     */
    val all = Seq(A)

    private[this]
    val byName = all.map(x => x.toString.toLowerCase -> x).toMap

    def apply(value: String): Foo = fromString(value).getOrElse(UNDEFINED(value))

    def fromString(value: String): _root_.scala.Option[Foo] = byName.get(value.toLowerCase)

  }

}

package com.bryzek.apidoc.example.union.types.v0.models {

  package object json {
    import play.api.libs.json.__
    import play.api.libs.json.JsString
    import play.api.libs.json.Writes
    import play.api.libs.functional.syntax._
    import com.bryzek.apidoc.example.union.types.v0.models.json._

    private[v0] implicit val jsonReadsUUID = __.read[String].map(java.util.UUID.fromString)

    private[v0] implicit val jsonWritesUUID = new Writes[java.util.UUID] {
      def writes(x: java.util.UUID) = JsString(x.toString)
    }

    private[v0] implicit val jsonReadsJodaDateTime = __.read[String].map { str =>
      import org.joda.time.format.ISODateTimeFormat.dateTimeParser
      dateTimeParser.parseDateTime(str)
    }

    private[v0] implicit val jsonWritesJodaDateTime = new Writes[org.joda.time.DateTime] {
      def writes(x: org.joda.time.DateTime) = {
        import org.joda.time.format.ISODateTimeFormat.dateTime
        val str = dateTime.print(x)
        JsString(str)
      }
    }

    implicit val jsonReadsApidocExampleUnionTypesBar = new play.api.libs.json.Reads[com.bryzek.apidoc.example.union.types.v0.models.Bar] {
      def reads(js: play.api.libs.json.JsValue): play.api.libs.json.JsResult[com.bryzek.apidoc.example.union.types.v0.models.Bar] = {
        js match {
          case v: play.api.libs.json.JsString => play.api.libs.json.JsSuccess(com.bryzek.apidoc.example.union.types.v0.models.Bar(v.value))
          case _ => {
            (js \ "value").validate[String] match {
              case play.api.libs.json.JsSuccess(v, _) => play.api.libs.json.JsSuccess(com.bryzek.apidoc.example.union.types.v0.models.Bar(v))
              case err: play.api.libs.json.JsError => err
            }
          }
        }
      }
    }

    def jsonWritesApidocExampleUnionTypesBar(obj: com.bryzek.apidoc.example.union.types.v0.models.Bar) = {
      play.api.libs.json.JsString(obj.toString)
    }

    def jsObjectBar(obj: com.bryzek.apidoc.example.union.types.v0.models.Bar) = {
      play.api.libs.json.Json.obj("value" -> play.api.libs.json.JsString(obj.toString))
    }

    implicit def jsonWritesApidocExampleUnionTypesBar: play.api.libs.json.Writes[Bar] = {
      new play.api.libs.json.Writes[com.bryzek.apidoc.example.union.types.v0.models.Bar] {
        def writes(obj: com.bryzek.apidoc.example.union.types.v0.models.Bar) = {
          jsonWritesApidocExampleUnionTypesBar(obj)
        }
      }
    }

    implicit val jsonReadsApidocExampleUnionTypesFoo = new play.api.libs.json.Reads[com.bryzek.apidoc.example.union.types.v0.models.Foo] {
      def reads(js: play.api.libs.json.JsValue): play.api.libs.json.JsResult[com.bryzek.apidoc.example.union.types.v0.models.Foo] = {
        js match {
          case v: play.api.libs.json.JsString => play.api.libs.json.JsSuccess(com.bryzek.apidoc.example.union.types.v0.models.Foo(v.value))
          case _ => {
            (js \ "value").validate[String] match {
              case play.api.libs.json.JsSuccess(v, _) => play.api.libs.json.JsSuccess(com.bryzek.apidoc.example.union.types.v0.models.Foo(v))
              case err: play.api.libs.json.JsError => err
            }
          }
        }
      }
    }

    def jsonWritesApidocExampleUnionTypesFoo(obj: com.bryzek.apidoc.example.union.types.v0.models.Foo) = {
      play.api.libs.json.JsString(obj.toString)
    }

    def jsObjectFoo(obj: com.bryzek.apidoc.example.union.types.v0.models.Foo) = {
      play.api.libs.json.Json.obj("value" -> play.api.libs.json.JsString(obj.toString))
    }

    implicit def jsonWritesApidocExampleUnionTypesFoo: play.api.libs.json.Writes[Foo] = {
      new play.api.libs.json.Writes[com.bryzek.apidoc.example.union.types.v0.models.Foo] {
        def writes(obj: com.bryzek.apidoc.example.union.types.v0.models.Foo) = {
          jsonWritesApidocExampleUnionTypesFoo(obj)
        }
      }
    }

    implicit def jsonReadsApidocExampleUnionTypesGuestUser: play.api.libs.json.Reads[GuestUser] = {
      (
        (__ \ "guid").read[_root_.java.util.UUID] and
        (__ \ "email").read[String]
      )(GuestUser.apply _)
    }

    def jsObjectGuestUser(obj: com.bryzek.apidoc.example.union.types.v0.models.GuestUser) = {
      play.api.libs.json.Json.obj(
        "guid" -> play.api.libs.json.JsString(obj.guid.toString),
        "email" -> play.api.libs.json.JsString(obj.email)
      )
    }

    implicit def jsonReadsApidocExampleUnionTypesRegisteredUser: play.api.libs.json.Reads[RegisteredUser] = {
      (
        (__ \ "guid").read[_root_.java.util.UUID] and
        (__ \ "email").read[String] and
        (__ \ "preference").read[com.bryzek.apidoc.example.union.types.v0.models.Foobar]
      )(RegisteredUser.apply _)
    }

    def jsObjectRegisteredUser(obj: com.bryzek.apidoc.example.union.types.v0.models.RegisteredUser) = {
      play.api.libs.json.Json.obj(
        "guid" -> play.api.libs.json.JsString(obj.guid.toString),
        "email" -> play.api.libs.json.JsString(obj.email),
        "preference" -> jsObjectFoobar(obj.preference)
      )
    }

    implicit def jsonReadsApidocExampleUnionTypesUserUuid: play.api.libs.json.Reads[UserUuid] = {
      (__ \ "value").read[_root_.java.util.UUID].map { x => new UserUuid(value = x) }
    }

    implicit def jsonReadsApidocExampleUnionTypesFoobar: play.api.libs.json.Reads[Foobar] = {
      (
        (__ \ "foo").read(jsonReadsApidocExampleUnionTypesFoo).asInstanceOf[play.api.libs.json.Reads[Foobar]]
        orElse
        (__ \ "bar").read(jsonReadsApidocExampleUnionTypesBar).asInstanceOf[play.api.libs.json.Reads[Foobar]]
        orElse
        play.api.libs.json.Reads(jsValue => play.api.libs.json.JsSuccess(com.bryzek.apidoc.example.union.types.v0.models.FoobarUndefinedType(jsValue.toString))).asInstanceOf[play.api.libs.json.Reads[Foobar]]
      )
    }

    def jsObjectFoobar(obj: com.bryzek.apidoc.example.union.types.v0.models.Foobar) = {
      obj match {
        case x: com.bryzek.apidoc.example.union.types.v0.models.Foo => play.api.libs.json.Json.obj("foo" -> play.api.libs.json.JsString(x.toString))
        case x: com.bryzek.apidoc.example.union.types.v0.models.Bar => play.api.libs.json.Json.obj("bar" -> play.api.libs.json.JsString(x.toString))
        case x: com.bryzek.apidoc.example.union.types.v0.models.FoobarUndefinedType => sys.error(s"The type[com.bryzek.apidoc.example.union.types.v0.models.FoobarUndefinedType] should never be serialized")
      }
    }

    implicit def jsonWritesApidocExampleUnionTypesFoobar: play.api.libs.json.Writes[Foobar] = {
      new play.api.libs.json.Writes[com.bryzek.apidoc.example.union.types.v0.models.Foobar] {
        def writes(obj: com.bryzek.apidoc.example.union.types.v0.models.Foobar) = {
          jsObjectFoobar(obj)
        }
      }
    }

    implicit def jsonReadsApidocExampleUnionTypesUser: play.api.libs.json.Reads[User] = {
      (
        (__ \ "registered_user").read(jsonReadsApidocExampleUnionTypesRegisteredUser).asInstanceOf[play.api.libs.json.Reads[User]]
        orElse
        (__ \ "guest_user").read(jsonReadsApidocExampleUnionTypesGuestUser).asInstanceOf[play.api.libs.json.Reads[User]]
        orElse
        (__ \ "uuid").read(jsonReadsApidocExampleUnionTypesUserUuid).asInstanceOf[play.api.libs.json.Reads[User]]
        orElse
        play.api.libs.json.Reads(jsValue => play.api.libs.json.JsSuccess(com.bryzek.apidoc.example.union.types.v0.models.UserUndefinedType(jsValue.toString))).asInstanceOf[play.api.libs.json.Reads[User]]
      )
    }

    def jsObjectUser(obj: com.bryzek.apidoc.example.union.types.v0.models.User) = {
      obj match {
        case x: com.bryzek.apidoc.example.union.types.v0.models.RegisteredUser => play.api.libs.json.Json.obj("registered_user" -> jsObjectRegisteredUser(x))
        case x: com.bryzek.apidoc.example.union.types.v0.models.GuestUser => play.api.libs.json.Json.obj("guest_user" -> jsObjectGuestUser(x))
        case x: com.bryzek.apidoc.example.union.types.v0.models.UserUuid => play.api.libs.json.Json.obj("uuid" -> play.api.libs.json.Json.obj("value" -> play.api.libs.json.JsString(x.value.toString)))
        case x: com.bryzek.apidoc.example.union.types.v0.models.UserUndefinedType => sys.error(s"The type[com.bryzek.apidoc.example.union.types.v0.models.UserUndefinedType] should never be serialized")
      }
    }

    implicit def jsonWritesApidocExampleUnionTypesUser: play.api.libs.json.Writes[User] = {
      new play.api.libs.json.Writes[com.bryzek.apidoc.example.union.types.v0.models.User] {
        def writes(obj: com.bryzek.apidoc.example.union.types.v0.models.User) = {
          jsObjectUser(obj)
        }
      }
    }
  }
}



package com.bryzek.apidoc.example.union.types.v0 {
  import com.ning.http.client.{AsyncCompletionHandler, AsyncHttpClient, AsyncHttpClientConfig, Realm, Request, RequestBuilder, Response}

  object Constants {

    val Namespace = "com.bryzek.apidoc.example.union.types.v0"
    val UserAgent = "apidoc:play_2x_client:unknown"
    val Version = "0.3.46"
    val VersionMajor = 0

  }

  class Client(
    val baseUrl: String,
    auth: scala.Option[com.bryzek.apidoc.example.union.types.v0.Authorization] = None,
    defaultHeaders: Seq[(String, String)] = Nil,
    asyncHttpClient: AsyncHttpClient = Client.defaultAsyncHttpClient
  ) extends interfaces.Client {
    import org.slf4j.{Logger, LoggerFactory}
    import com.bryzek.apidoc.example.union.types.v0.models.json._

    def closeAsyncHttpClient() {
      asyncHttpClient.close()
    }

    val logger = LoggerFactory.getLogger(getClass)

    def users: Users = Users

    object Users extends Users {
      override def get(
        requestHeaders: Seq[(String, String)] = Nil
      )(implicit ec: scala.concurrent.ExecutionContext): scala.concurrent.Future[Seq[com.bryzek.apidoc.example.union.types.v0.models.User]] = {
        _executeRequest("GET", s"/users", requestHeaders = requestHeaders).map {
          case r if r.getStatusCode == 200 => _root_.com.bryzek.apidoc.example.union.types.v0.Client.parseJson("Seq[com.bryzek.apidoc.example.union.types.v0.models.User]", r, _.validate[Seq[com.bryzek.apidoc.example.union.types.v0.models.User]])
          case r => throw new com.bryzek.apidoc.example.union.types.v0.errors.FailedRequest(r.getStatusCode, s"Unsupported response code[${r.getStatusCode}]. Expected: 200", requestUri = Some(r.getUri))
        }
      }

      override def getByGuid(
        guid: _root_.java.util.UUID,
        requestHeaders: Seq[(String, String)] = Nil
      )(implicit ec: scala.concurrent.ExecutionContext): scala.concurrent.Future[com.bryzek.apidoc.example.union.types.v0.models.User] = {
        _executeRequest("GET", s"/users/${guid}", requestHeaders = requestHeaders).map {
          case r if r.getStatusCode == 200 => _root_.com.bryzek.apidoc.example.union.types.v0.Client.parseJson("com.bryzek.apidoc.example.union.types.v0.models.User", r, _.validate[com.bryzek.apidoc.example.union.types.v0.models.User])
          case r if r.getStatusCode == 404 => throw new com.bryzek.apidoc.example.union.types.v0.errors.UnitResponse(r.getStatusCode)
          case r => throw new com.bryzek.apidoc.example.union.types.v0.errors.FailedRequest(r.getStatusCode, s"Unsupported response code[${r.getStatusCode}]. Expected: 200, 404", requestUri = Some(r.getUri))
        }
      }

      override def post(
        user: com.bryzek.apidoc.example.union.types.v0.models.User,
        requestHeaders: Seq[(String, String)] = Nil
      )(implicit ec: scala.concurrent.ExecutionContext): scala.concurrent.Future[com.bryzek.apidoc.example.union.types.v0.models.User] = {
        val payload = play.api.libs.json.Json.toJson(user)

        _executeRequest("POST", s"/users", body = Some(payload), requestHeaders = requestHeaders).map {
          case r if r.getStatusCode == 201 => _root_.com.bryzek.apidoc.example.union.types.v0.Client.parseJson("com.bryzek.apidoc.example.union.types.v0.models.User", r, _.validate[com.bryzek.apidoc.example.union.types.v0.models.User])
          case r => throw new com.bryzek.apidoc.example.union.types.v0.errors.FailedRequest(r.getStatusCode, s"Unsupported response code[${r.getStatusCode}]. Expected: 201", requestUri = Some(r.getUri))
        }
      }
    }

    def _logRequest(request: Request) {
      logger.info("_logRequest: " + request)
    }

    def _requestBuilder(method: String, path: String, requestHeaders: Seq[(String, String)]): RequestBuilder = {
      val builder = new RequestBuilder(method)
        .setUrl(baseUrl + path)
        .addHeader("User-Agent", Constants.UserAgent)
        .addHeader("X-Apidoc-Version", Constants.Version)
        .addHeader("X-Apidoc-Version-Major", Constants.VersionMajor.toString)

      defaultHeaders.foreach { h => builder.addHeader(h._1, h._2) }
      requestHeaders.foreach { h => builder.addHeader(h._1, h._2) }

      auth.fold(builder) {
        case Authorization.Basic(username, passwordOpt) => {
          builder.setRealm(
            new Realm.RealmBuilder()
              .setPrincipal(username)
              .setPassword(passwordOpt.getOrElse(""))
              .setUsePreemptiveAuth(true)
              .setScheme(Realm.AuthScheme.BASIC)
              .build()
          )
        }
        case a => sys.error("Invalid authorization scheme[" + a.getClass + "]")
      }
    }

    def _executeRequest(
      method: String,
      path: String,
      queryParameters: Seq[(String, String)] = Nil,
      requestHeaders: Seq[(String, String)] = Nil,
      body: Option[play.api.libs.json.JsValue] = None
    )(implicit ec: scala.concurrent.ExecutionContext): scala.concurrent.Future[com.ning.http.client.Response] = {
      val allHeaders = body match {
        case None => requestHeaders
        case Some(_) => _withJsonContentType(requestHeaders)
      }

      val request = _requestBuilder(method, path, allHeaders)

      queryParameters.foreach { pair =>
        request.addQueryParameter(pair._1, pair._2)
      }

      val requestWithParamsAndBody = body.fold(request) { b =>
        val serialized = play.api.libs.json.Json.stringify(b)
        request.setBody(serialized)
      }

      val finalRequest = requestWithParamsAndBody.build()
      _logRequest(finalRequest)

      val result = scala.concurrent.Promise[com.ning.http.client.Response]()
      asyncHttpClient.executeRequest(finalRequest,
        new AsyncCompletionHandler[Unit]() {
          override def onCompleted(r: com.ning.http.client.Response) = result.success(r)
          override def onThrowable(t: Throwable) = result.failure(t)
        }
      )
      result.future
    }

    /**
     * Adds a Content-Type: application/json header unless the specified requestHeaders
     * already contain a Content-Type header
     */
    def _withJsonContentType(headers: Seq[(String, String)]): Seq[(String, String)] = {
      headers.find { _._1.toUpperCase == "CONTENT-TYPE" } match {
        case None => headers ++ Seq(("Content-Type" -> "application/json; charset=UTF-8"))
        case Some(_) => headers
      }
    }

  }

  object Client {

    private lazy val defaultAsyncHttpClient = {
      new AsyncHttpClient(
        new AsyncHttpClientConfig.Builder()
          .setExecutorService(java.util.concurrent.Executors.newCachedThreadPool())
          .build()
      )
    }

    def parseJson[T](
      className: String,
      r: _root_.com.ning.http.client.Response,
      f: (play.api.libs.json.JsValue => play.api.libs.json.JsResult[T])
    ): T = {
      f(play.api.libs.json.Json.parse(r.getResponseBody("UTF-8"))) match {
        case play.api.libs.json.JsSuccess(x, _) => x
        case play.api.libs.json.JsError(errors) => {
          throw new com.bryzek.apidoc.example.union.types.v0.errors.FailedRequest(r.getStatusCode, s"Invalid json for class[" + className + "]: " + errors.mkString(" "), requestUri = Some(r.getUri))
        }
      }
    }

  }

  sealed trait Authorization extends _root_.scala.Product with _root_.scala.Serializable
  object Authorization {
    case class Basic(username: String, password: Option[String] = None) extends Authorization
  }

  package interfaces {

    trait Client {
      def baseUrl: String
      def users: com.bryzek.apidoc.example.union.types.v0.Users
    }

  }

  trait Users {
    def get(
      requestHeaders: Seq[(String, String)] = Nil
    )(implicit ec: scala.concurrent.ExecutionContext): scala.concurrent.Future[Seq[com.bryzek.apidoc.example.union.types.v0.models.User]]

    def getByGuid(
      guid: _root_.java.util.UUID,
      requestHeaders: Seq[(String, String)] = Nil
    )(implicit ec: scala.concurrent.ExecutionContext): scala.concurrent.Future[com.bryzek.apidoc.example.union.types.v0.models.User]

    def post(
      user: com.bryzek.apidoc.example.union.types.v0.models.User,
      requestHeaders: Seq[(String, String)] = Nil
    )(implicit ec: scala.concurrent.ExecutionContext): scala.concurrent.Future[com.bryzek.apidoc.example.union.types.v0.models.User]
  }

  package errors {

    import com.bryzek.apidoc.example.union.types.v0.models.json._

    case class UnitResponse(status: Int) extends Exception(s"HTTP $status")

    case class FailedRequest(responseCode: Int, message: String, requestUri: Option[_root_.java.net.URI] = None) extends _root_.java.lang.Exception(s"HTTP $responseCode: $message")

  }

  object PathSegment {
    // See https://github.com/playframework/playframework/blob/2.3.x/framework/src/play/src/main/scala/play/utils/UriEncoding.scala
    def encode(s: String, inputCharset: String): String = {
      val in = s.getBytes(inputCharset)
      val out = new java.io.ByteArrayOutputStream()
      for (b <- in) {
        val allowed = segmentChars.get(b & 0xFF)
        if (allowed) {
          out.write(b)
        } else {
          out.write('%')
          out.write(upperHex((b >> 4) & 0xF))
          out.write(upperHex(b & 0xF))
        }
      }
      out.toString("US-ASCII")
    }

    private def upperHex(x: Int): Int = {
      // Assume 0 <= x < 16
      if (x < 10) (x + '0') else (x - 10 + 'A')
    }

    private[this] val segmentChars: java.util.BitSet = membershipTable(pchar)

    private def pchar: Seq[Char] = {
      val alphaDigit = for ((min, max) <- Seq(('a', 'z'), ('A', 'Z'), ('0', '9')); c <- min to max) yield c
      val unreserved = alphaDigit ++ Seq('-', '.', '_', '~')
      val subDelims = Seq('!', '$', '&', '\'', '(', ')', '*', '+', ',', ';', '=')
      unreserved ++ subDelims ++ Seq(':', '@')
    }

    private def membershipTable(chars: Seq[Char]): java.util.BitSet = {
      val bits = new java.util.BitSet(256)
      for (c <- chars) { bits.set(c.toInt) }
      bits
    }
  }
}
